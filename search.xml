<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="小程序-登录"><a href="#小程序-登录" class="headerlink" title="小程序-登录"></a>小程序-登录</h1><h2 id="unionid和openid"><a href="#unionid和openid" class="headerlink" title="unionid和openid"></a>unionid和openid</h2><p>了解小程序登陆之前，我们写了解下小程序&#x2F;公众号登录涉及到两个最关键的用户标识：</p><ul><li><code>OpenId</code> 是一个用户对于一个小程序／公众号的标识，开发者可以通过这个标识识别出用户。</li><li><code>UnionId</code> 是一个用户对于同主体微信小程序／公众号／APP的标识，开发者需要在微信开放平台下绑定相同账号的主体。开发者可通过UnionId，实现多个小程序、公众号、甚至APP 之间的数据互通了。</li></ul><h2 id="关键Api"><a href="#关键Api" class="headerlink" title="关键Api"></a>关键Api</h2><ul><li><a href="https://link.juejin.cn/?target=https://developers.weixin.qq.com/miniprogram/dev/api/api-login.html"><code>wx.login</code></a> 官方提供的登录能力</li><li><a href="https://link.juejin.cn/?target=https://developers.weixin.qq.com/miniprogram/dev/api/signature.html%23wxchecksessionobject"><code>wx.checkSession</code></a> 校验用户当前的session_key是否有效</li><li><a href="https://link.juejin.cn/?target=https://developers.weixin.qq.com/miniprogram/dev/api/authorize.html"><code>wx.authorize</code></a> 提前向用户发起授权请求</li><li><a href="https://link.juejin.cn/?target=https://developers.weixin.qq.com/miniprogram/dev/api/api-login.html"><code>wx.getUserInfo</code></a> 获取用户基本信息</li></ul><h2 id="登录流程设计"><a href="#登录流程设计" class="headerlink" title="登录流程设计"></a>登录流程设计</h2><p>以下从笔者接触过的几种登录流程来做阐述:</p><h3 id="利用现有登录体系"><a href="#利用现有登录体系" class="headerlink" title="利用现有登录体系"></a>利用现有登录体系</h3><p>直接复用现有系统的登录体系，只需要在小程序端设计用户名，密码&#x2F;验证码输入页面，便可以简便的实现登录，只需要保持良好的用户体验即可。</p><h3 id="利用OpenId-创建用户体系"><a href="#利用OpenId-创建用户体系" class="headerlink" title="利用OpenId 创建用户体系"></a>利用OpenId 创建用户体系</h3><p>👆提过，<code>OpenId</code> 是一个小程序对于一个用户的标识，利用这一点我们可以轻松的实现一套基于小程序的用户体系，值得一提的是这种用户体系对用户的打扰最低，可以实现静默登录。具体步骤如下：</p><ol><li>小程序客户端通过 <code>wx.login</code> 获取 code</li><li>传递 code 向服务端，服务端拿到 code 调用微信登录凭证校验接口，微信服务器返回 <code>openid</code> 和会话密钥 <code>session_key</code> ，此时开发者服务端便可以利用 <code>openid</code> 生成用户入库，再向小程序客户端返回自定义登录态</li><li>小程序客户端缓存 （通过<code>storage</code>）自定义登录态（token），后续调用接口时携带该登录态作为用户身份标识即可</li></ol><h3 id="利用-Unionid-创建用户体系"><a href="#利用-Unionid-创建用户体系" class="headerlink" title="利用 Unionid 创建用户体系"></a>利用 Unionid 创建用户体系</h3><p>如果想实现多个小程序，公众号，已有登录系统的数据互通，可以通过获取到用户 unionid 的方式建立用户体系。因为 unionid 在同一开放平台下的所所有应用都是相同的，通过 <code>unionid</code> 建立的用户体系即可实现全平台数据的互通，更方便的接入原有的功能，那如何获取 <code>unionid</code> 呢，有以下两种方式：</p><ol><li>如果户关注了某个相同主体公众号，或曾经在某个相同主体App、公众号上进行过微信登录授权，通过 <code>wx.login</code> 可以直接获取 到 <code>unionid</code></li><li>结合 <code>wx.getUserInfo</code> 和 <code>&lt;button open-type=&quot;getUserInfo&quot;&gt;&lt;button/&gt;</code> 这两种方式引导用户主动授权，主动授权后通过返回的信息和服务端交互 (这里有一步需要服务端解密数据的过程，很简单，微信提供了示例代码) 即可拿到 <code>unionid</code> 建立用户体系， 然后由服务端返回登录态，本地记录即可实现登录，附上微信提供的最佳实践：<ul><li>调用 wx.login 获取 code，然后从微信后端换取到 session_key，用于解密 getUserInfo返回的敏感数据。</li><li>使用 wx.getSetting 获取用户的授权情况<ul><li>如果用户已经授权，直接调用 API wx.getUserInfo 获取用户最新的信息；</li><li>用户未授权，在界面中显示一个按钮提示用户登入，当用户点击并授权后就获取到用户的最新信息。</li></ul></li><li>获取到用户数据后可以进行展示或者发送给自己的后端。</li></ul></li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>需要获取 <code>unionid</code> 形式的登录体系，在以前（18年4月之前）是通过以下这种方式来实现，但后续微信做了调整（因为一进入小程序，主动弹起各种授权弹窗的这种形式，比较容易导致用户流失），调整为必须使用按钮引导用户主动授权的方式，这次调整对开发者影响较大，开发者需要注意遵守微信的规则，并及时和业务方沟通业务形式，不要存在侥幸心理，以防造成小程序不过审等情况。</li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abnf</span><br><span class="line">复制代码   wx.login(获取code) <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span>&gt; wx.getUserInfo(用户授权) <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span>&gt; 获取 unionid</span><br></pre></td></tr></table></figure><ol><li>因为小程序不存在 <code>cookie</code> 的概念， 登录态必须缓存在本地，因此强烈建议为登录态设置过期时间</li><li>值得一提的是如果需要支持风控安全校验，多平台登录等功能，可能需要加入一些公共参数，例如platform，channel，deviceParam等参数。在和服务端确定方案时，作为前端同学应该及时提出这些合理的建议，设计合理的系统。</li><li><code>openid</code> ， <code>unionid</code> 不要在接口中明文传输，这是一种危险的行为，同时也很不专业。</li></ol><h1 id="小程序-图片导出"><a href="#小程序-图片导出" class="headerlink" title="小程序-图片导出"></a>小程序-图片导出</h1><p>经常开发和使用小程序的同学对这个功能一定不陌生，这是一种常见的引流方式，一般同时会在图片中附加一个小程序二维码。</p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><ol><li>借助 <code>canvas</code> 元素，将需要导出的样式首先在 <code>canvas</code> 画布上绘制出来 （api基本和h5保持一致，但有轻微差异，使用时注意即可）</li><li>借助微信提供的 <code>canvasToTempFilePath</code> 导出图片，最后再使用 <code>saveImageToPhotosAlbum</code> （需要授权）保存图片到本地</li></ol><h2 id="如何优雅实现"><a href="#如何优雅实现" class="headerlink" title="如何优雅实现"></a>如何优雅实现</h2><p>根据上述的原理来看，实现是很简单的，只不过就是设计稿的提取，绘制即可，但是作为一个常用功能，每次都这样写一坨代码岂不是非常的难受。那小程序如何设计一个通用的方法来帮助我们导出图片呢？思路如下：</p><ol><li>绘制出需要的样式这一步是省略不掉的。但是我们可以封装一个绘制库，包含常见图形的绘制，例如矩形，圆角矩形，圆， 扇形， 三角形， 文字，图片减少绘制代码，只需要提炼出样式信息，便可以轻松的绘制，最后导出图片存入相册。笔者觉得以下这种方式绘制更为优雅清晰一些，其实也可以使用加入一个type参数来指定绘制类型，传入的一个是样式数组，实现绘制。</li><li>结合上一步的实现，如果对于同一类型的卡片有多次导出需求的场景，也可以使用自定义组件的方式，封装同一类型的卡片为一个通用组件，在需要导出图片功能的地方，引入该组件即可。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">javascript复制代码    </span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">CanvasKit</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">drawImg</span>(<span class="params">option = &#123;&#125;</span>) &#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">drawRect</span>(<span class="params">option = &#123;&#125;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">drawText</span>(<span class="params">option = &#123;&#125;</span>) &#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">exportImg</span>(<span class="params">option = &#123;&#125;</span>) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> drawer = <span class="keyword">new</span> <span class="title class_">CanvasKit</span>(<span class="string">&#x27;canvasId&#x27;</span>).<span class="title function_">drawImg</span>(styleObj1).<span class="title function_">drawText</span>(styleObj2)</span><br><span class="line">  drawer.<span class="title function_">exportImg</span>()</span><br></pre></td></tr></table></figure><h2 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>小程序中无法绘制网络图片到canvas上，需要通过downLoadFile 先下载图片到本地临时文件才可以绘制</li><li>通常需要绘制二维码到导出的图片上，有<a href="https://link.juejin.cn/?target=https://developers.weixin.qq.com/miniprogram/dev/api/qrcode.html">一种方式</a>导出二维码时，需要携带的参数必须做编码，而且有具体的长度（32可见字符）限制，可以借助服务端生成 <code>短链接</code> 的方式来解决</li></ol><h1 id="小程序-数据统计"><a href="#小程序-数据统计" class="headerlink" title="小程序-数据统计"></a>小程序-数据统计</h1><p>数据统计作为目前一种常用的分析用户行为的方式，小程序端也是必不可少的。小程序采取的曝光，点击数据埋点其实和h5原理是一样的。但是埋点作为一个和业务逻辑不相关的需求，我们如果在每一个点击事件，每一个生命周期加入各种埋点代码，则会干扰正常的业务逻辑，和使代码变的臃肿，笔者提供以下几种思路来解决数据埋点：</p><h2 id="设计一个埋点sdk"><a href="#设计一个埋点sdk" class="headerlink" title="设计一个埋点sdk"></a>设计一个埋点sdk</h2><p>小程序的代码结构是，每一个 Page 中都有一个 Page 方法，接受一个包含生命周期函数，数据的 <code>业务逻辑对象</code> 包装这层数据，借助小程序的底层逻辑实现页面的业务逻辑。通过这个我们可以想到思路，对Page进行一次包装，篡改它的生命周期和点击事件，混入埋点代码，不干扰业务逻辑，只要做一些简单的配置即可埋点，简单的代码实现如下：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sqf复制代码  </span><br><span class="line">  代码仅供理解思路</span><br><span class="line">  page = function(<span class="built_in">params</span>) &#123;</span><br><span class="line">    let <span class="built_in">keys</span> = <span class="built_in">params</span>.<span class="built_in">keys</span>()</span><br><span class="line">    <span class="built_in">keys</span>.<span class="keyword">forEach</span>(v =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (v === <span class="string">&#x27;onLoad&#x27;</span>) &#123;</span><br><span class="line">          <span class="built_in">params</span>[v] = function(options) &#123;</span><br><span class="line">            stat()   <span class="comment">//曝光埋点代码</span></span><br><span class="line">            <span class="built_in">params</span>[v].<span class="built_in">call</span>(this, options)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (v.includes(<span class="string">&#x27;click&#x27;</span>)) &#123;</span><br><span class="line">          <span class="built_in">params</span>[v] = funciton(event) &#123; </span><br><span class="line">            let data = event.dataset.config</span><br><span class="line">            stat(data)  <span class="comment">// 点击埋点</span></span><br><span class="line">            <span class="built_in">param</span>[v].<span class="built_in">call</span>(this)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这种思路不光适用于埋点，也可以用来作全局异常处理，请求的统一处理等场景。</p><h2 id="分析接口"><a href="#分析接口" class="headerlink" title="分析接口"></a>分析接口</h2><p>对于特殊的一些业务，我们可以采取 <code>接口埋点</code>，什么叫接口埋点呢？很多情况下，我们有的api并不是多处调用的，只会在某一个特定的页面调用，通过这个思路我们可以分析出，该接口被请求，则这个行为被触发了，则完全可以通过服务端日志得出埋点数据，但是这种方式局限性较大，而且属于分析结果得出过程，可能存在误差，但可以作为一种思路了解一下。</p><h2 id="微信自定义数据分析"><a href="#微信自定义数据分析" class="headerlink" title="微信自定义数据分析"></a><a href="https://link.juejin.cn/?target=https://developers.weixin.qq.com/miniprogram/analysis/index.html?t=18081011">微信自定义数据分析</a></h2><p>微信本身提供的数据分析能力，微信本身提供了常规分析和自定义分析两种数据分析方式，在小程序后台配置即可。借助<code>小程序数据助手</code>这款小程序可以很方便的查看。</p><h1 id="小程序-工程化"><a href="#小程序-工程化" class="headerlink" title="小程序-工程化"></a>小程序-工程化</h1><h2 id="工程化做什么"><a href="#工程化做什么" class="headerlink" title="工程化做什么"></a>工程化做什么</h2><p>目前的前端开发过程，工程化是必不可少的一环，那小程序工程化都需要做些什么呢，先看下目前小程序开发当中存在哪些问题需要解决：</p><ol><li>不支持 css预编译器,作为一种主流的 css解决方案，不论是 less,sass,stylus 都可以提升css效率</li><li>不支持引入npm包 （这一条，从微信公开课中听闻，微信准备支持）</li><li>不支持ES7等后续的js特性，好用的async await等特性都无法使用</li><li>不支持引入外部字体文件，只支持base64</li><li>没有 eslint 等代码检查工具</li></ol><h2 id="方案选型"><a href="#方案选型" class="headerlink" title="方案选型"></a>方案选型</h2><p>对于目前常用的工程化方案，webpack，rollup，parcel等来看，都常用与单页应用的打包和处理，而小程序天生是 “多页应用” 并且存在一些特定的配置。根据要解决的问题来看，无非是文件的编译，修改，拷贝这些处理，对于这些需求，我们想到基于流的 <code>gulp</code>非常的适合处理，并且相对于webpack配置多页应用更加简单。所以小程序工程化方案推荐使用 <code>gulp</code></p><h2 id="具体开发思路"><a href="#具体开发思路" class="headerlink" title="具体开发思路"></a>具体开发思路</h2><p>通过 gulp 的 task 实现：</p><ol><li>实时编译 less 文件至相应目录</li><li>引入支持async，await的运行时文件</li><li>编译字体文件为base64 并生成相应css文件，方便使用</li><li>依赖分析哪些地方引用了npm包，将npm包打成一个文件，拷贝至相应目录</li><li>检查代码规范</li></ol><p>上述实现起来其实并不是很难，但是这样的话就是一份纯粹的 gulp 构建脚本和 约定好的目录而已，每次都有一个新的小程序都来拷贝这份脚本来处理吗？显然不合适，那如何真正的实现 <code>小程序工程化</code> 呢？ 我们可能需要一个简单的脚手架，脚手架需要支持的功能：</p><ol><li>支持新建项目，创建Page，创建Component</li><li>支持内置构建脚本</li><li>支持发布小程序，也可以想办法接入Jenkins等工具做持续集成 (小程序持续集成后面会提) …</li></ol><h1 id="小程序架构"><a href="#小程序架构" class="headerlink" title="小程序架构"></a>小程序架构</h1><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd567f00fcc~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="architecture"></p><p>微信小程序的框架包含两部分 View 视图层、App Service逻辑层。View 层用来渲染页面结构，AppService 层用来逻辑处理、数据请求、接口调用。</p><p>它们在<strong>两个线程里</strong>运行。</p><p>它们在<strong>两个线程里</strong>运行。</p><p>它们在<strong>两个线程里</strong>运行。</p><p>视图层和逻辑层通过系统层的 JSBridage 进行通信，逻辑层把数据变化通知到视图层，触发视图层页面更新，视图层把触发的事件通知到逻辑层进行业务处理。</p><p>补充</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd57d4375f0~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="one-context"></p><p><strong>视图层使用 WebView 渲染，iOS 中使用自带 WKWebView，在 Android 使用腾讯的 x5 内核（基于 Blink）运行。</strong></p><p><strong>逻辑层使用在 iOS 中使用自带的 JSCore 运行，在 Android 中使用腾讯的 x5 内核（基于 Blink）运行。</strong></p><p><strong>开发工具使用 nw.js 同时提供了视图层和逻辑层的运行环境。</strong></p><p>在 Mac下 使用 js-beautify 对微信开发工具 @v1.02.1808080代码批量格式化：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gradle复制代码cd <span class="regexp">/Applications/</span>wechatwebdevtools.app<span class="regexp">/Contents/</span>Resources/<span class="keyword">package</span>.nw</span><br><span class="line"><span class="keyword">find</span> . -type f -name <span class="string">&#x27;*.js&#x27;</span> -not -path <span class="string">&quot;./node_modules/*&quot;</span> -not -path -exec js-beautify -r -s <span class="number">2</span> -p -f <span class="string">&#x27;&#123;&#125;&#x27;</span> \;</span><br></pre></td></tr></table></figure><p>在 <code>js/extensions/appservice/index.js</code> 中找到：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">javascript复制代码<span class="number">267</span>: <span class="keyword">function</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> d = <span class="title function_">c</span>(<span class="number">8</span>),</span><br><span class="line">      e = <span class="title function_">c</span>(<span class="number">227</span>),</span><br><span class="line">      f = <span class="title function_">c</span>(<span class="number">226</span>),</span><br><span class="line">      g = <span class="title function_">c</span>(<span class="number">228</span>),</span><br><span class="line">      h = <span class="title function_">c</span>(<span class="number">229</span>),</span><br><span class="line">      i = <span class="title function_">c</span>(<span class="number">230</span>);</span><br><span class="line">    <span class="keyword">var</span> j = <span class="variable language_">window</span>.<span class="property">__global</span>.<span class="property">navigator</span>.<span class="property">userAgent</span>,</span><br><span class="line">      k = -<span class="number">1</span> !== j.<span class="title function_">indexOf</span>(<span class="string">&#x27;game&#x27;</span>);</span><br><span class="line">    k || <span class="title function_">i</span>(), <span class="variable language_">window</span>.<span class="property">__global</span>.<span class="property">getNewWeixinJSBridge</span> = <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="attr">invoke</span>: b</span><br><span class="line">      &#125; = <span class="title function_">f</span>(a), &#123;</span><br><span class="line">        <span class="attr">publish</span>: c</span><br><span class="line">      &#125; = <span class="title function_">g</span>(a), &#123;</span><br><span class="line">        <span class="attr">subscribe</span>: d,</span><br><span class="line">        <span class="attr">triggerSubscribeEvent</span>: i</span><br><span class="line">      &#125; = <span class="title function_">h</span>(a), &#123;</span><br><span class="line">        <span class="attr">on</span>: j,</span><br><span class="line">        <span class="attr">triggerOnEvent</span>: k</span><br><span class="line">      &#125; = <span class="title function_">e</span>(a);</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">invoke</span>: b,</span><br><span class="line">        <span class="attr">publish</span>: c,</span><br><span class="line">        <span class="attr">subscribe</span>: d,</span><br><span class="line">        <span class="attr">on</span>: j,</span><br><span class="line">        <span class="keyword">get</span> <span class="title function_">__triggerOnEvent</span>() &#123;</span><br><span class="line">          <span class="keyword">return</span> k</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">get</span> <span class="title function_">__triggerSubscribeEvent</span>() &#123;</span><br><span class="line">          <span class="keyword">return</span> i</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="variable language_">window</span>.<span class="property">WeixinJSBridge</span> = <span class="variable language_">window</span>.<span class="property">__global</span>.<span class="property">WeixinJSBridge</span> = <span class="variable language_">window</span>.<span class="property">__global</span>.<span class="title function_">getNewWeixinJSBridge</span>(<span class="string">&#x27;global&#x27;</span>), <span class="variable language_">window</span>.<span class="property">__global</span>.<span class="property">WeixinJSBridgeMap</span> = &#123;</span><br><span class="line">      <span class="attr">__globalBridge</span>: <span class="variable language_">window</span>.<span class="property">WeixinJSBridge</span></span><br><span class="line">    &#125;, __devtoolsConfig.<span class="property">online</span> &amp;&amp; __devtoolsConfig.<span class="property">autoTest</span> &amp;&amp; <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">clear</span>()</span><br><span class="line">    &#125;, <span class="number">1e4</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> l = <span class="keyword">new</span> <span class="variable language_">window</span>.<span class="property">__global</span>.<span class="property">XMLHttpRequest</span>;</span><br><span class="line">      l.<span class="property">responseType</span> = <span class="string">&#x27;text&#x27;</span>, l.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">`http://<span class="subst">$&#123;<span class="variable language_">window</span>.location.host&#125;</span>/calibration/<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>`</span>, !<span class="number">0</span>), l.<span class="title function_">send</span>()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (a) &#123;&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在 <code>js/extensions/gamenaitveview/index.js</code> 中找到：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">javascript复制代码  <span class="number">299</span>: <span class="keyword">function</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(b, <span class="string">&#x27;__esModule&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">value</span>: !<span class="number">0</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> d = <span class="title function_">c</span>(<span class="number">242</span>),</span><br><span class="line">      e = <span class="title function_">c</span>(<span class="number">241</span>),</span><br><span class="line">      f = <span class="title function_">c</span>(<span class="number">243</span>),</span><br><span class="line">      g = <span class="title function_">c</span>(<span class="number">244</span>);</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">WeixinJSBridge</span> = &#123;</span><br><span class="line">      <span class="attr">on</span>: d.<span class="property">a</span>,</span><br><span class="line">      <span class="attr">invoke</span>: e.<span class="property">a</span>,</span><br><span class="line">      <span class="attr">publish</span>: f.<span class="property">a</span>,</span><br><span class="line">      <span class="attr">subscribe</span>: g.<span class="property">a</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>在 <code>js/extensions/pageframe/index.js</code>中找到：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">javascript复制代码<span class="number">317</span>: <span class="keyword">function</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">d</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">WeixinJSBridge</span> = &#123;</span><br><span class="line">        <span class="attr">on</span>: e.<span class="property">a</span>,</span><br><span class="line">        <span class="attr">invoke</span>: f.<span class="property">a</span>,</span><br><span class="line">        <span class="attr">publish</span>: g.<span class="property">a</span>,</span><br><span class="line">        <span class="attr">subscribe</span>: h.<span class="property">a</span></span><br><span class="line">      &#125;, k.<span class="property">a</span>.<span class="title function_">init</span>();</span><br><span class="line">      <span class="keyword">let</span> a = <span class="variable language_">document</span>.<span class="title function_">createEvent</span>(<span class="string">&#x27;UIEvent&#x27;</span>);</span><br><span class="line">      a.<span class="title function_">initEvent</span>(<span class="string">&#x27;WeixinJSBridgeReady&#x27;</span>, !<span class="number">1</span>, !<span class="number">1</span>), <span class="variable language_">document</span>.<span class="title function_">dispatchEvent</span>(a), i.<span class="property">a</span>.<span class="title function_">init</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(b, <span class="string">&#x27;__esModule&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">value</span>: !<span class="number">0</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> e = <span class="title function_">c</span>(<span class="number">254</span>),</span><br><span class="line">      f = <span class="title function_">c</span>(<span class="number">253</span>),</span><br><span class="line">      g = <span class="title function_">c</span>(<span class="number">255</span>),</span><br><span class="line">      h = <span class="title function_">c</span>(<span class="number">256</span>),</span><br><span class="line">      i = <span class="title function_">c</span>(<span class="number">86</span>),</span><br><span class="line">      j = <span class="title function_">c</span>(<span class="number">257</span>),</span><br><span class="line">      k = c.<span class="title function_">n</span>(j);</span><br><span class="line">    <span class="string">&#x27;complete&#x27;</span> === <span class="variable language_">document</span>.<span class="property">readyState</span> ? <span class="title function_">d</span>() : <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">d</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>我们都看到了 WeixinJSBridge 的定义。分别都有 <code>on</code>、<code>invoke</code>、<code>publish</code>、<code>subscribe</code> 这个几个关键方法。</p><p>拿 <code>invoke</code> 举例，在 <code>js/extensions/appservice/index.js</code>中发现这段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">php复制代码<span class="title function_ invoke__">f</span> (!r) p[b] = s, f.<span class="title function_ invoke__">send</span>(&#123;</span><br><span class="line">    <span class="attr">command</span>: <span class="string">&#x27;APPSERVICE_INVOKE&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">api</span>: c,</span><br><span class="line">        <span class="attr">args</span>: e,</span><br><span class="line">        <span class="attr">callbackID</span>: b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在 <code>js/extensions/pageframe/index.js</code> 中发现这段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">php复制代码g[d] = c, e.a.<span class="title function_ invoke__">send</span>(&#123;</span><br><span class="line">    <span class="attr">command</span>: <span class="string">&#x27;WEBVIEW_INVOKE&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">api</span>: a,</span><br><span class="line">        <span class="attr">args</span>: b,</span><br><span class="line">        <span class="attr">callbackID</span>: d</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>简单的分析得知：字段 <code>command</code> 用来区分行为，<code>invoke</code> 用来调用 Native 的 Api。在不同的来源要使用不同的前缀。<code>data</code> 里面包含 Api 名，参数。另外 <code>callbackID</code> 指定接受回调的方法句柄。Appservice 和 Webview 使用的通信协议是一致的。</p><p>我们不能在代码里使用 BOM 和 DOM 是因为根本没有，另一方面也不希望 JS 代码直接操作视图。</p><p>在开发工具中 <code>remote-helper.js</code> 中找到了这样的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">javascript复制代码<span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vmGlobal = &#123;</span><br><span class="line">    <span class="attr">require</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">eval</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">process</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="title function_">setTimeout</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="comment">//...省略代码</span></span><br><span class="line">        <span class="keyword">return</span> timerCount;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">clearTimeout</span>(<span class="params">id</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> timer = timers[id];</span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">            <span class="keyword">delete</span> timers[id];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setInterval</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="comment">//...省略代码</span></span><br><span class="line">        <span class="keyword">return</span> timerCount;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">clearInterval</span>(<span class="params">id</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> timer = timers[id];</span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">            <span class="keyword">delete</span> timers[id];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">console</span>: (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//...省略代码</span></span><br><span class="line">        <span class="keyword">return</span> consoleClone;</span><br><span class="line">    &#125;)()</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> jsVm = vm.<span class="title function_">createContext</span>(vmGlobal);</span><br><span class="line"><span class="comment">// 省略大量代码...</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadCode</span>(<span class="params">filePath, sourceURL, content</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ret;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> script = <span class="keyword">typeof</span> content === <span class="string">&#x27;string&#x27;</span> ? content : fs.<span class="title function_">readFileSync</span>(filePath, <span class="string">&#x27;utf-8&#x27;</span>).<span class="title function_">toString</span>();</span><br><span class="line">        ret = vm.<span class="title function_">runInContext</span>(script, jsVm, &#123;</span><br><span class="line">            <span class="attr">filename</span>: sourceURL,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="comment">// something went wrong in user code</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的分层设计显然是有意为之的，它的中间层完全控制了程序对于界面进行的操作， 同时对于传递的数据和响应时间也能做到监控。一方面程序的行为受到了极大限制， 另一方面微信可以确保他们对于小程序内容和体验有绝对的控制。</p><p>这样的结构也说明了小程序的动画和绘图 API 被设计成生成一个最终对象而不是一步一步执行的样子， 原因就是  Json 格式的数据传递和解析相比与原生 API 都是损耗不菲的，如果频繁调用很可能损耗过多性能，进而影响用户体验。</p><h2 id="下载小程序完整包"><a href="#下载小程序完整包" class="headerlink" title="下载小程序完整包"></a>下载小程序完整包</h2><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd56a0887d0~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="download"></p><h2 id="App-Service-Life-Cylce"><a href="#App-Service-Life-Cylce" class="headerlink" title="App Service - Life Cylce"></a>App Service - Life Cylce</h2><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd58981205e~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="lifecycle"></p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p><strong>1.动画需要绑定在 data 上，而绘图却不用。你觉得是为什么呢？</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">apache</span>复制代码var context = wx.createCanvasContext(&#x27;firstCanvas&#x27;)</span><br><span class="line">    </span><br><span class="line"><span class="attribute">context</span>.setStrokeStyle(<span class="string">&quot;#00ff00&quot;</span>)</span><br><span class="line"><span class="attribute">context</span>.setLineWidth(<span class="number">5</span>)</span><br><span class="line"><span class="attribute">context</span>.rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line"><span class="attribute">context</span>.stroke()</span><br><span class="line"><span class="attribute">context</span>.setStrokeStyle(<span class="string">&quot;#ff0000&quot;</span>)</span><br><span class="line"><span class="attribute">context</span>.setLineWidth(<span class="number">2</span>)</span><br><span class="line"><span class="attribute">context</span>.moveTo(<span class="number">160</span>, <span class="number">100</span>)</span><br><span class="line"><span class="attribute">context</span>.arc(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, <span class="number">0</span>, <span class="number">2</span> * Math.PI, true)</span><br><span class="line"><span class="attribute">context</span>.moveTo(<span class="number">140</span>, <span class="number">100</span>)</span><br><span class="line"><span class="attribute">context</span>.arc(<span class="number">100</span>, <span class="number">100</span>, <span class="number">40</span>, <span class="number">0</span>, Math.PI, false)</span><br><span class="line"><span class="attribute">context</span>.moveTo(<span class="number">85</span>, <span class="number">80</span>)</span><br><span class="line"><span class="attribute">context</span>.arc(<span class="number">80</span>, <span class="number">80</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">2</span> * Math.PI, true)</span><br><span class="line"><span class="attribute">context</span>.moveTo(<span class="number">125</span>, <span class="number">80</span>)</span><br><span class="line"><span class="attribute">context</span>.arc(<span class="number">120</span>, <span class="number">80</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">2</span> * Math.PI, true)</span><br><span class="line"><span class="attribute">context</span>.stroke()</span><br><span class="line"><span class="attribute">context</span>.draw()</span><br><span class="line"><span class="attribute">lisp</span>复制代码Page(&#123;</span><br><span class="line">  <span class="attribute">data</span>: &#123;</span><br><span class="line">    <span class="attribute">animationData</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attribute">onShow</span>: function()&#123;</span><br><span class="line">    <span class="attribute">var</span> animation = wx.createAnimation(&#123;</span><br><span class="line">      <span class="attribute">duration</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attribute">timingFunction</span>: &#x27;ease&#x27;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this</span>.animation = animation</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">animation</span>.scale(<span class="number">2</span>,<span class="number">2</span>).rotate(<span class="number">45</span>).step()</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">this</span>.setData(&#123;</span><br><span class="line">      <span class="attribute">animationData</span>:animation.export()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>2.小程序的 Http Rquest 请求是不是用的浏览器 Fetch API?</strong></p><p>知识点考察</p><ul><li>知道 Request 是由 Native 实现的</li><li>JSCore 是不带 Http Request、Websocket、Storage等功能的，那是 Webkit 带的</li><li>小程序的 <code>wx.request</code> 是不是遵循 fetch API 规范实现的呢？答案，显然不是。因为没有 <code>Promise</code></li></ul><h1 id="View-WXML"><a href="#View-WXML" class="headerlink" title="View - WXML"></a>View - WXML</h1><p>WXML（WeiXin Markup Language）</p><ul><li>支持数据绑定</li><li>支持逻辑算术、运算</li><li>支持模板、引用</li><li>支持添加事件（bindtap）</li></ul><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd55da9d940~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="WXML"></p><p>Wxml编译器：Wcc  把 Wxml文件 转为 JS</p><p>执行方式：Wcc index.wxml</p><p><strong>使用 Virtual DOM，进行局部更新</strong></p><h1 id="View-WXSS"><a href="#View-WXSS" class="headerlink" title="View - WXSS"></a>View - WXSS</h1><p>WXSS(WeiXin Style Sheets)</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd55df8f76a~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="WXSS"></p><p>wxss编译器：wcsc 把wxss文件转化为 js</p><p>执行方式： wcsc index.wxss</p><h2 id="支持大部分CSS特性"><a href="#支持大部分CSS特性" class="headerlink" title="支持大部分CSS特性"></a>支持大部分CSS特性</h2><p>亲测包含但不限于如下内容：</p><ul><li><p>Transition</p></li><li><p>Animation</p><ul><li>Keyframes</li></ul></li><li><p>border-radius</p></li><li><p>calc()</p></li><li><p>选择器，除了</p><p>官方文档</p><p>列出的，其实还支持</p><ul><li>element&gt;element</li><li>element+element</li><li>element element</li><li>element:first-letter</li><li>element:first-line</li><li>element:first-child</li><li>element:last-child</li><li>element~element</li><li>element:first-of-type</li><li>element:last-of-type</li><li>element:only-of-type</li><li>element:only-child</li><li>element:nth-child(n)</li><li>element:nth-last-child(n)</li><li>element:nth-of-type(n)</li><li>element:nth-last-of-type(n)</li><li>:root</li><li>element:empty</li><li>:not(element)</li></ul></li><li><p>iconfont</p></li></ul><p>建议 Css3 的特性都可以做一下尝试。</p><h2 id="尺寸单位-rpx"><a href="#尺寸单位-rpx" class="headerlink" title="尺寸单位 rpx"></a>尺寸单位 rpx</h2><p>rpx（responsive pixel）: 可以根据屏幕宽度进行自适应。规定屏幕宽为 750rpx。公式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">javascript复制代码<span class="keyword">const</span> dsWidth = <span class="number">750</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> screenHeightOfRpx = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">750</span> / env.<span class="property">screenWidth</span> * env.<span class="property">screenHeight</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> rpxToPx = <span class="keyword">function</span> (<span class="params">rpx</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> env.<span class="property">screenWidth</span> / <span class="number">750</span> * rpx</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> pxToRpx = <span class="keyword">function</span> (<span class="params">px</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">750</span> / env.<span class="property">screenWidth</span> * px</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>设备</th><th>rpx换算px (屏幕宽度&#x2F;750)</th><th>px换算rpx (750&#x2F;屏幕宽度)</th></tr></thead><tbody><tr><td>iPhone5</td><td>1rpx &#x3D; 0.42px</td><td>1px &#x3D; 2.34rpx</td></tr><tr><td>iPhone6</td><td>1rpx &#x3D; 0.5px</td><td>1px &#x3D; 2rpx</td></tr><tr><td>iPhone6 Plus</td><td>1rpx &#x3D; 0.552px</td><td>1px &#x3D; 1.81rpx</td></tr></tbody></table><p>可以了解一下 <a href="https://link.juejin.cn/?target=https://github.com/mpvue/px2rpx-loader">pr2rpx-loader </a>这个库。</p><h2 id="样式导入"><a href="#样式导入" class="headerlink" title="样式导入"></a>样式导入</h2><p>使用 <code>@import</code>语句可以导入外联样式表，<code>@import</code>后跟需要导入的外联样式表的相对路径，用 <code>;</code> 表示语句结束。</p><h2 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h2><p>静态的样式统一写到 class 中。style 接收动态的样式，在运行时会进行解析，<strong>请尽量避免将静态的样式写进 style 中，以免影响渲染速度</strong>。</p><h2 id="全局样式与局部样式"><a href="#全局样式与局部样式" class="headerlink" title="全局样式与局部样式"></a>全局样式与局部样式</h2><p>定义在 app.wxss 中的样式为全局样式，作用于每一个页面。在 page 的 wxss 文件中定义的样式为局部样式，只作用在对应的页面，并会覆盖 app.wxss 中相同的选择器。</p><h2 id="iconfont"><a href="#iconfont" class="headerlink" title="iconfont"></a>iconfont</h2><p><strong>截止20180810</strong></p><p>小程序未来有计划支持字体。参考<a href="https://link.juejin.cn/?target=http://daxue.qq.com/content/content/id/4113">微信公开课</a>。</p><p>小程序开发与平时 Web开发类似，也可以使用字体图标，但是 <code>src:url()</code> 无论本地还是远程地址都不行，base64 值则都是可以显示的。</p><p>将 ttf 文件转换成 base64。打开这个平台 <a href="https://link.juejin.cn/?target=http://transfonter.org/%E3%80%82%E7%82%B9%E5%87%BB">transfonter.org&#x2F;。点击</a> Add fonts 按钮，加载ttf格式的那个文件。将下边的 base64 encode 改为 on。点击 Convert 按钮进行转换，转换后点击 download 下载。</p><p>复制下载的压缩文件中的 stylesheet.css 的内容到 font.wxss ，并且将 icomoon 中的 style.css 除了 @font-face 所有的代码也复制到 font.wxss 并将i选择器换成 .iconfont，最后：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">applescript</span><br><span class="line">复制代码&lt;<span class="built_in">text</span> <span class="built_in">class</span>=<span class="string">&quot;iconfont icon-home&quot;</span> style=<span class="string">&quot;font-size:50px;color:red&quot;</span>&gt;&lt;/<span class="built_in">text</span>&gt;</span><br></pre></td></tr></table></figure><h1 id="View-Component"><a href="#View-Component" class="headerlink" title="View - Component"></a>View - Component</h1><p>小程序提供了一系列组件用于开发业务功能，按照功能与HTML5的标签进行对比如下：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd61f6cc3dd~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="Component"></p><p>小程序的组件基于Web Component标准</p><p>使用Polymer框架实现Web Component</p><h1 id="View-Native-Component"><a href="#View-Native-Component" class="headerlink" title="View - Native Component"></a>View - Native Component</h1><p>目前Native实现的组件有</p><ul><li><p>cavnas</p></li><li><p>video</p></li><li><p>map</p></li><li><p>textarea</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd63ae856a7~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="Native Component"></p></li></ul><p>Native组件层在 WebView 层之上。这目前带来了一些问题：</p><ul><li>Native 实现的组件会遮挡其他组件</li><li>WebView 渲染出来的视图在滚动时，Native 实现的组件需要更新位置，这会带来性能问题，在安卓机器上比较明显</li><li>小程序原生组件 <code>cover-view</code> 可以覆盖 cavnas video 等，但是也有一下弊端，比如在 cavnas 上覆盖 <code>cover-view</code>，就会发现坐标系不统一处理麻烦</li></ul><h1 id="目前小程序的问题或限制"><a href="#目前小程序的问题或限制" class="headerlink" title="目前小程序的问题或限制"></a>目前小程序的问题或限制</h1><p><strong>截止20180810</strong></p><p>包含但不限于：</p><ul><li>小程序仍然使用 WebView 渲染，并非原生渲染。（部分原生）</li><li>服务端接口返回的头无法执行，比如：Set-Cookie。</li><li>依赖浏览器环境的 JS 库不能使用。</li><li>不能使用 npm，但是可以自搭构建工具或者使用 mpvue。（未来官方有计划支持）</li><li>不能使用 ES7，可以自己用babel+webpack自搭或者使用 mpvue。</li><li>不支持使用自己的字体（未来官方计划支持）。</li><li>可以用 base64 的方式来使用 iconfont。</li><li>小程序不能发朋友圈（可以通过保存图片到本地，发图片到朋友前。二维码可以使用<a href="https://link.juejin.cn/?target=https://developers.weixin.qq.com/miniprogram/dev/api/qrcode.html">B接口</a>）。</li><li>获取<a href="https://link.juejin.cn/?target=https://developers.weixin.qq.com/miniprogram/dev/api/qrcode.html">二维码&#x2F;小程序</a>接口的限制。<ul><li>B 接口 scene 最大32个可见字符。</li><li>AC 接口总共生成的码数量限制为 100,000，请谨慎调用。</li><li>真机扫描二维码只能跳转到线上版本，所以测试环境下只可通过开发者工具的通过二维码编译进行调试。</li><li>没有发布到线上版本的小程序页面路径会导致生成二维码失败，需要先将添加了页面的小程序发布到线上版本。</li></ul></li><li>小程序推送只能使用“服务通知” 而且需要用户主动触发提交 formId，formId 只有7天有效期。（现在的做法是在每个页面都放入form并且隐藏以此获取更多的 formId。后端使用原则为：优先使用有效期最短的）</li><li>小程序大小限制 2M，分包总计不超过 8M</li><li>转发（分享）小程序不能拿到成功结果，原来可以。<a href="https://link.juejin.cn/?target=https://mp.weixin.qq.com/s?__biz=MjM5NDAwMTA2MA==&mid=2695730124&idx=1&sn=666a448b047d657350de7684798f48d3&chksm=83d74a07b4a0c311569a748f4d11a5ebcce3ba8f6bd5a4b3183a4fea0b3442634a1c71d3cdd0&scene=21%23wechat_redirect">链接</a>（小游戏造的孽）</li><li>拿到相同的 unionId 必须绑在同一个开放平台下。开放平台绑定限制：<ul><li>50个移动应用</li><li>10个网站</li><li>50个同主体公众号</li><li>5个不同主体公众号</li><li>50个同主体小程序</li><li>5个不同主体小程序</li></ul></li><li>公众号关联小程序，<a href="https://link.juejin.cn/?target=https://developers.weixin.qq.com/miniprogram/introduction/%23%E5%85%AC%E4%BC%97%E5%8F%B7%E5%85%B3%E8%81%94%E5%B0%8F%E7%A8%8B%E5%BA%8F">链接</a><ul><li>所有公众号都可以关联小程序。</li><li>一个公众号可关联10个同主体的小程序，3个不同主体的小程序。</li><li>一个小程序可关联500个公众号。</li><li>公众号一个月可新增关联小程序13次，小程序一个月可新增关联500次。</li></ul></li><li>一个公众号关联的10个同主体小程序和3个非同主体小程序可以互相跳转</li><li>品牌搜索不支持金融、医疗</li><li>小程序授权需要用户主动点击</li><li>小程序不提供测试 <strong>access_token</strong></li><li>安卓系统下，小程序授权获取用户信息之后，删除小程序再重新获取，并重新授权，得到旧签名，导致第一次授权失败</li><li>开发者工具上，授权获取用户信息之后，如果清缓存选择全部清除，则即使使用了wx.checkSession，并且在session_key有效期内，授权获取用户信息也会得到新的session_key</li></ul><h2 id="小程序HTTP2支持情况"><a href="#小程序HTTP2支持情况" class="headerlink" title="小程序HTTP2支持情况"></a>小程序HTTP2支持情况</h2><h3 id="HTTP2支持情况：模拟器与真机均不支持"><a href="#HTTP2支持情况：模拟器与真机均不支持" class="headerlink" title="HTTP2支持情况：模拟器与真机均不支持"></a>HTTP2支持情况：模拟器与真机均不支持</h3><p>为了验证小程序对HTTP的支持适配情况，我找了两个服务器做测试，一个是网上搜索到支持HTTP2的服务器，一个是我本地起的一个HTTP2服务器。测试中所有请求方法均使用 <code>wx.request</code>。</p><ol><li><p>网上支持HTTP2的服务器：<code>HTTPs://www.snel.com:443</code></p></li><li><p>在Chrome上查看该服务器为 HTTP2</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd65fbde315~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="WechatIMG11"></p></li><li><p>在模拟器上请求该接口，<code>请求头</code>的HTTP版本为HTTP1.1，模拟器不支持HTTP2</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd6aa018b35~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="WechatIMG12"></p></li><li><p>由于小程序线上环境需要在项目管理里配置请求域名，而这个域名不是我们需要的请求域名，没必要浪费一个域名位置，所以打开不验证域名，TSL 等选项请求该接口，通过抓包工具表现与模拟器相同</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd6d67dc3a6~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="WechatIMG14"></p></li></ol><h3 id="HTTP2服务器需要对小程序做兼容性适配"><a href="#HTTP2服务器需要对小程序做兼容性适配" class="headerlink" title="HTTP2服务器需要对小程序做兼容性适配"></a>HTTP2服务器需要对小程序做兼容性适配</h3><p>由上可以看出，在真机与模拟器都不支持 HTTP2，但是都是成功请求的，并且 <code>响应头</code> 里的 HTTP 版本都变成了HTTP1.1 版本，说明服务器对 HTTP1.1 做了兼容性适配。</p><ol><li><p>本地新启一个 node 服务器，返回 JSON 为请求的 HTTP 版本</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd6d94de216~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="WechatIMG16"></p></li><li><p>如果服务器只支持 HTTP2，在模拟器请求时发生了一个 <code>ALPN</code> 协议的错误。并且提醒使用适配 HTTP1</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd6dfe717d8~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="WechatIMG8"></p></li><li><p>当把服务器的 <code>allowHTTP1</code>，设置为 <code>true</code>，并在请求时处理相关相关请求参数后，模拟器能正常访问接口，并打印出对应的 HTTP 请求版本</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd70704cc04~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="WechatIMG15"></p></li></ol><h1 id="授权获取用户信息流程"><a href="#授权获取用户信息流程" class="headerlink" title="授权获取用户信息流程"></a>授权获取用户信息流程</h1><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd745ae6210~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ul><li>session_key 有有效期，有效期并没有被告知开发者，只知道用户越频繁使用小程序，session_key 有效期越长</li><li>在调用 wx.login 时会直接更新 session_key，导致旧 session_key 失效</li><li>小程序内先调用 wx.checkSession 检查登录态，并保证没有过期的 session_key 不会被更新，再调用 wx.login 获取 code。接着用户授权小程序获取用户信息，小程序拿到加密后的用户数据，把加密数据和 code 传给后端服务。后端通过 code 拿到 session_key 并解密数据，将解密后的用户信息返回给小程序</li></ul><p><strong>面试题：先授权获取用户信息再 login 会发生什么？</strong></p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd7b715d456~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd7d0e907dc~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ul><li>用户授权时，开放平台使用旧的 session_key 对用户信息进行加密。调用 wx.login 重新登录，会刷新 session_key，这时后端服务从开放平台获取到新 session_key，但是无法对老 session_key 加密过的数据解密，用户信息获取失败</li><li>在用户信息授权之前先调用 wx.checkSession 呢？wx.checkSession 检查登录态，并且保证 wx.login 不会刷新 session_key，从而让后端服务正确解密数据。但是这里存在一个问题，如果小程序较长时间不用导致 session_key 过期，则 wx.login 必定会重新生成 session_key，从而再一次导致用户信息解密失败。</li></ul><h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><p><strong>我们知道view部分是运行在webview上的，所以前端领域的大多数优化方式都有用。</strong></p><p><strong>我们知道view部分是运行在webview上的，所以前端领域的大多数优化方式都有用。</strong></p><p><strong>我们知道view部分是运行在webview上的，所以前端领域的大多数优化方式都有用。</strong></p><h2 id="加载优化"><a href="#加载优化" class="headerlink" title="加载优化"></a>加载优化</h2><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd7fd0c7cb2~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="preload"></p><p>代码包的大小是最直接影响小程序加载启动速度的因素。代码包越大不仅下载速度时间长，业务代码注入时间也会变长。所以最好的优化方式就是减少代码包的大小。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd804824c9c~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="load-time-series"></p><p>小程序加载的三个阶段的表示。</p><p><strong>优化方式</strong></p><ul><li>代码压缩。</li><li>及时清理无用代码和资源文件。</li><li>减少代码包中的图片等资源文件的大小和数量。</li><li>分包加载。</li></ul><p><strong>首屏加载的体验优化建议</strong></p><ul><li>提前请求: 异步数据请求不需要等待页面渲染完成。</li><li>利用缓存: 利用 storage API 对异步请求数据进行缓存，二次启动时先利用缓存数据渲染页面，在进行后台更新。</li><li>避免白屏：先展示页面骨架页和基础内容。</li><li>及时反馈：即时地对需要用户等待的交互操作给出反馈，避免用户以为小程序无响应。</li></ul><h3 id="使用分包加载优化"><a href="#使用分包加载优化" class="headerlink" title="使用分包加载优化"></a>使用分包加载优化</h3><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd8ac3f82ae~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="sub-package"></p><p>在构建小程序分包项目时，构建会输出一个或多个功能的分包，其中每个分包小程序必定含有一个主包，所谓的主包，即放置默认启动页面&#x2F;TabBar 页面，以及一些所有分包都需用到公共资源&#x2F;JS 脚本，而分包则是根据开发者的配置进行划分。</p><p>在小程序启动时，默认会下载主包并启动主包内页面，如果用户需要打开分包内某个页面，客户端会把对应分包下载下来，下载完成后再进行展示。</p><p>优点：</p><ul><li>对开发者而言，能使小程序有更大的代码体积，承载更多的功能与服务</li><li>对用户而言，可以更快地打开小程序，同时在不影响启动速度前提下使用更多功能</li></ul><p>限制：</p><ul><li>整个小程序所有分包大小不超过 8M</li><li>单个分包&#x2F;主包大小不能超过 2M</li></ul><p><strong>原生分包加载的配置</strong> 假设支持分包的小程序目录结构如下：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">stata复制代码├── <span class="keyword">app</span>.js</span><br><span class="line">├── <span class="keyword">app</span>.json</span><br><span class="line">├── <span class="keyword">app</span>.wxss</span><br><span class="line">├── packageA</span><br><span class="line">│   └── pages</span><br><span class="line">│       ├── <span class="keyword">cat</span></span><br><span class="line">│       └── dog</span><br><span class="line">├── packageB</span><br><span class="line">│   └── pages</span><br><span class="line">│       ├── apple</span><br><span class="line">│       └── banana</span><br><span class="line">├── pages</span><br><span class="line">│   ├── index</span><br><span class="line">│   └── logs</span><br><span class="line">└── utils</span><br></pre></td></tr></table></figure><p>开发者通过在 app.json subPackages 字段声明项目分包结构：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">prolog复制代码&#123;</span><br><span class="line">  <span class="string">&quot;pages&quot;</span>:[</span><br><span class="line">    <span class="string">&quot;pages/index&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pages/logs&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;subPackages&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;root&quot;</span>: <span class="string">&quot;packageA&quot;</span>,</span><br><span class="line">      <span class="string">&quot;pages&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;pages/cat&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pages/dog&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="string">&quot;root&quot;</span>: <span class="string">&quot;packageB&quot;</span>,</span><br><span class="line">      <span class="string">&quot;pages&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;pages/apple&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pages/banana&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分包原则</strong></p><ul><li>声明 subPackages 后，将按 subPackages 配置路径进行打包，subPackages 配置路径外的目录将被打包到 app（主包） 中</li><li>app（主包）也可以有自己的 pages（即最外层的 pages 字段</li><li>subPackage 的根目录不能是另外一个 subPackage 内的子目录</li><li>首页的 TAB 页面必须在 app（主包）内</li></ul><p><strong>引用原则</strong></p><ul><li>packageA 无法 require packageB JS 文件，但可以 require app、自己 package 内的 JS 文件</li><li>packageA 无法 import packageB 的 template，但可以 require app、自己 package 内的 template</li><li>packageA 无法使用 packageB 的资源，但可以使用 app、自己 package 内的资源</li></ul><p><strong>官方即将推出</strong> 分包预加载</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd8b2167186~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="preload-sub-package"></p><p>独立分包</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd8b7610a45~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="single-sub-package"></p><h2 id="渲染性能优化"><a href="#渲染性能优化" class="headerlink" title="渲染性能优化"></a>渲染性能优化</h2><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd8e28809dd~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="render"></p><ul><li>每次 setData 的调用都是一次进程间通信过程，通信开销与 setData 的数据量正相关。</li><li>setData 会引发视图层页面内容的更新，这一耗时操作一定时间中会阻塞用户交互。</li><li><strong>setData 是小程序开发使用最频繁，也是最容易引发性能问题的。</strong></li></ul><p><strong>避免不当使用 setData</strong></p><ul><li>使用 data 在方法间共享数据，<strong>可能增加 setData 传输的数据量。</strong>。data 应仅包括与页面渲染相关的数据。</li><li>使用 setData 传输大量数据，<strong>通讯耗时与数据正相关，页面更新延迟可能造成页面更新开销增加。</strong>仅传输页面中发生变化的数据，使用 setData 的特殊 key 实现局部更新。</li><li>短时间内频繁调用 setData，<strong>操作卡顿，交互延迟，阻塞通信，页面渲染延迟。</strong>避免不必要的 setData，对连续的setData调用进行合并。</li><li>在后台页面进行 setData，<strong>抢占前台页面的渲染资源。</strong>页面切入后台后的 setData 调用，延迟到页面重新展示时执行。</li></ul><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd57d4375f0~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="one-context"></p><p><strong>避免不当使用onPageScroll</strong></p><ul><li>只在有必要的时候监听 pageScroll 事件。不监听，则不会派发。</li><li>避免在 onPageScroll 中执行复杂逻辑</li><li>避免在 onPageScroll 中频繁调用 setData</li><li>避免滑动时频繁查询节点信息（SelectQuery）用以判断是否显示，部分场景建议使用节点布局橡胶状态监听（inersectionObserver）替代</li></ul><p><strong>使用自定义组件</strong></p><p>在需要频繁更新的场景下，自定义组件的更新只在组件内部进行，不受页面其他部分内容复杂性影响。</p><h1 id="官方小程序技术能力规划"><a href="#官方小程序技术能力规划" class="headerlink" title="官方小程序技术能力规划"></a>官方小程序技术能力规划</h1><h2 id="自定义组件2-0"><a href="#自定义组件2-0" class="headerlink" title="自定义组件2.0"></a>自定义组件2.0</h2><p>小程序的几个页面间，存在一些相同或是类似的区域，这时候可以把这些区域逻辑封装成一个自定义组件，代码就可以重用，或者对于比较独立逻辑，也可以把它封装成一个自定义组件，也就是微信去年发布的自定义组件，它让代码得到复用、减少代码量，更方便模块化，优化代码架构组织，也使得模块清晰，后期更好地维护，从而保证更好的性能。</p><p>但微信打算在原来的基础上推出的自定义组件 2.0，它将拥有更高级的性能：</p><ul><li>usingComponents 计划支持全局定义和通配符定义：这意味着不用在每个页面反复定义，可以批量导入目录下的所有自定义组件</li><li>计划支持类似 Computed 和 watch 的功能，它能使代码逻辑更清晰</li><li>计划支持 Component 构造器插件，在实例化一个自定义组件的时候，允许你在构造器的这个阶段，加入一些逻辑，方便进行一些扩展，甚至是可以扩展成 Vue 的语法</li></ul><h2 id="npm支持"><a href="#npm支持" class="headerlink" title="npm支持"></a>npm支持</h2><p>目前小程序开发的痛点是：开源组件要手动复制到项目，后续更新组件也需要手动操作。不久的将来，小程序将支持npm包管理，有了这个之后，想要引入一些开源的项目就变得很简单了，只要在项目里面声明，然后用简单的命令安装，就可以使用了。</p><h2 id="官方自定义组件"><a href="#官方自定义组件" class="headerlink" title="官方自定义组件"></a>官方自定义组件</h2><p>微信小程序团队表示，他们在考虑推出一些官方自定义组件，为什么不内置到基础库里呢？因为内置组件要提供给开发者，这个组件一定是开发者很难实现或者是无法实现的一个能力。所以他们更倾向于封装成自定义组件，想基于这些内置组件里，封装一些比较常见的、交互逻辑比较复杂的组件给大家使用，让大家更容易开发。类似弹幕组件，开发者就不用关注弹幕怎么飘，可以节省开发者的开发成本。</p><p>同时，他们也想给开发者提供一些规范和一些模板，让开发者设计出好用的自定义组件，更好地被大家去使用。</p><h2 id="添加体验评分"><a href="#添加体验评分" class="headerlink" title="添加体验评分"></a>添加体验评分</h2><p>当小程序加载太慢时，可能会导致用户的流失，而小程序的开发者可能会面临着不知道如何定位问题或不知如何解决问题的困境。</p><p>为此，小程序即将推出一个体验评分的功能，这是为了帮助开发者可以检查出小程序有一些什么体验不好的地方，也会同时给出一份优化的指引建议。</p><h2 id="原生组件同层渲染"><a href="#原生组件同层渲染" class="headerlink" title="原生组件同层渲染"></a>原生组件同层渲染</h2><p>小程序在最初的技术选型时，引入了原生组件的概念，因为原生组件可以使小程序的能力更加丰富，比如地图、音视频的能力，但是原生组件是由客户端原生渲染的，导致了原生组件的层级是最高的，开发者很容易遇到打开调试的问题，发现视频组件挡在了 vConsole 上。</p><p>为了解决这个问题，当时微信做了一个过渡的方案：cover-view。cover-view可以覆盖在原生组件之上，这一套方案解决了大部分的需求场景。比如说视频组件上很多的按钮、标题甚至还有动画的弹幕，这些都是用 cover-view 去实现的，但它还是没有完全解决原生组件的开发体验问题，因为 cover-view 有一些限制：</p><ul><li>无法与其他组件混在一起渲染</li><li>没有完整的触摸事件</li><li>cover-view 对样式的表现有差异</li><li>cover-view 对样式的支持度不够高</li></ul><p>因此微信决定将用同层渲染取代 cover-view，它能像普通组件一样使用，原生组件的层级不再是最高，而是和其他的非原生组件在同一层级渲染，可完全由 z-index 控制，可完全支持触摸事件。</p><p>微信表示，同层渲染在 iOS 平台小程序上已经开始内测，会很快开放给开发者，Android 平台已经取得突破性进展，目前正在做一轮封装的工作，开放指日可待。</p><h1 id="wepy-vs-mpvue"><a href="#wepy-vs-mpvue" class="headerlink" title="wepy vs mpvue"></a>wepy vs mpvue</h1><h2 id="数据流管理"><a href="#数据流管理" class="headerlink" title="数据流管理"></a>数据流管理</h2><p>相比传统的小程序框架，这个一直是我们作为资深开发者比较期望去解决的，在 Web 开发中，随着 Flux、Redux、Vuex 等多个数据流工具出现，我们也期望在业务复杂的小程序中使用。</p><ul><li>WePY 默认支持 Redux，在脚手架生成项目的时候可以内置</li><li>Mpvue 作为 Vue 的移植版本，当然支持 Vuex，同样在脚手架生成项目的时候可以内置</li></ul><h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><p>如果你和我们一样，经历了从无到有的小程序业务开发，建议阅读【小程序的组件化开发】章节，进行官方语法的组件库开发（从基础库 1.6.3 开始，官方提供了组件化解决方案）。</p><ul><li>WePY 类似 Vue 实现了单文件组件，最大的差别是文件后缀 .wpy，只是写法上会有差异，具体可以查看【主流框架使用案例 1：WePY】章节，学习起来有一定成本，不过也会很快适应：</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala</span><br><span class="line">复制代码<span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">wepy</span>.<span class="title">page</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>Mpvue 作为 Vue 的移植版本，支持单文件组件，template、script 和 style 都在一个 .vue 文件中，和 vue 的写法类似，所以对 Vue 开发熟悉的同学会比较适应。</li></ul><h2 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h2><p>所有的小程序开发依赖官方提供的开发者工具。开发者工具简单直观，对调试小程序很有帮助，现在也支持腾讯云（目前我们还没有使用，但是对新的一些开发者还是有帮助的），可以申请测试报告查看小程序在真实的移动设备上运行性能和运行效果，但是它本身没有类似前端工程化中的概念和工具。</p><ul><li><p>wepy 内置了构建，通过 wepy init 命令初始化项目，大致流程如下：</p></li><li><p>wepy-cli 会判断模版是在远程仓库还是在本地，如果在本地则会立即跳到第 3 步，反之继续进行。</p></li><li><p>会从远程仓库下载模版，并保存到本地。</p></li><li><p>询问开发者 Project name 等问题，依据开发者的回答，创建项目。</p></li><li><p>mpvue 沿用了 vue 中推崇的 webpack 作为构建工具，但同时提供了一些自己的插件以及配置文件的一些修改，比如：</p></li><li><p>不再需要 html-webpack-plugin</p></li><li><p>基于 webpack-dev-middleware 修改成 webpack-dev-middleware-hard-disk</p></li><li><p>最大的变化是基于 webpack-loader 修改成 mpvue-loader</p></li><li><p>但是配置方式还是类似，分环境配置文件，最终都会编译成小程序支持的目录结构和文件后缀。</p></li></ul><h2 id="综合比较"><a href="#综合比较" class="headerlink" title="综合比较"></a>综合比较</h2><table><thead><tr><th>对比\框架</th><th>微信小程序</th><th>mpvue</th><th>wepy</th></tr></thead><tbody><tr><td>语法规范</td><td>小程序开发规范</td><td>vue.js</td><td>类vue.js</td></tr><tr><td>标签集合</td><td>小程序</td><td>htm l + 小程序</td><td>小程序</td></tr><tr><td>样式规范</td><td>wxss</td><td>sass,less,postcss</td><td>sass,less,styus</td></tr><tr><td>组件化</td><td>无组件化机制</td><td>vue规范</td><td>自定义组件规范</td></tr><tr><td>多段复用</td><td>不可复用</td><td>支持h5</td><td>支持h5</td></tr><tr><td>自动构建</td><td>无自动构建</td><td>webpack</td><td>框架内置</td></tr><tr><td>上手成本</td><td>全新学习</td><td>vue 学习</td><td>vue 和 wepy</td></tr><tr><td>数据管理</td><td>不支持</td><td>vuex</td><td>redux</td></tr></tbody></table><h2 id="选型的个人看法"><a href="#选型的个人看法" class="headerlink" title="选型的个人看法"></a>选型的个人看法</h2><p>先说结论：选择 mpvue。</p><p>wepy vs mpvue。</p><p>理由：</p><p><strong>工程化</strong> 原生开发因为不带工程化，诸如NPM包（未来会引入）、ES7、图片压缩、PostCss、pug、ESLint等等不能用。如果自己要搭工程化，不如直接使用wepy或mpvue。mpvue和wepy都可以和小程序原生开发混写。<a href="#https://github.com/mpvue/examples/tree/master/echarts">参考mpvue-echart</a>，<a href="https://link.juejin.cn/?target=https://github.com/Tencent/wepy/issues/1560">参考wepy</a>。 而问题在于wepy没有引入webpack(<a href="mailto:&#x77;&#101;&#x70;&#x79;&#x40;&#x32;&#x2e;&#48;&#46;&#x78;">&#x77;&#101;&#x70;&#x79;&#x40;&#x32;&#x2e;&#48;&#46;&#x78;</a>依然没有引入)，以上说的这些东西都要造轮子（作者造或自己造）。没有引入 Webpack 是一个重大的硬伤。社区维护的成熟 Webpack 显然更稳定，轮子更多。</p><p><strong>维护</strong> wepy 也是社区维护的，是官方的？其实 wepy 的主要开发者只有作者一人，附上一个<a href="https://link.juejin.cn/?target=https://github.com/Tencent/wepy/graphs/contributors">contrubutors</a>链接。另外被官方招安了也是后来的事，再说腾讯要有精力帮着一起维护好 wepy，为什么不花精力在小程序原生开发上呢？再来看看 mpvue，是美团一个前端小组维护的。</p><p><strong>学习成本</strong> Vue 的学习曲线比较平缓。mpvue 是 Vue的子集。所以 mpvue 的学习成本会低于 wepy。尤其是之前技术栈有学过用过 Vue 的。</p><p><strong>未来规划</strong> mpvue 已经支持 web 和小程序。因为 mpvue 基于AST，所以未来可以支持支付宝小程序和快应用。他们也是有这样的规划。</p><p>请在需求池下面自己找</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd96a15f056~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="mpvue-feature"></p><p><strong>坑</strong> 两者都有各自的坑。但是我觉得有一些wepy的坑是没法容忍的。比如<a href="https://link.juejin.cn/?target=https://github.com/Tencent/wepy/issues/1231">repeat组建里面用computed得到的列表全是同一套数据</a>而且1.x是没法解决的。 wepy和mpvue我都开发过完整小程序的体验下，我觉得wepy的坑更多，而且wepy有些坑碍于架构设计没办法解决。</p><h1 id="mpvue"><a href="#mpvue" class="headerlink" title="mpvue"></a>mpvue</h1><blockquote><p>Vue.js 小程序版, fork 自 vuejs&#x2F;<a href="mailto:&#x76;&#117;&#x65;&#x40;&#50;&#x2e;&#x34;&#x2e;&#49;">&#x76;&#117;&#x65;&#x40;&#50;&#x2e;&#x34;&#x2e;&#49;</a>，保留了 vue runtime 能力，添加了小程序平台的支持。 <code>mpvue</code> 是一个使用 <code>Vue.js</code> 开发小程序的前端框架。框架基于 <code>Vue.js</code> 核心，<code>mpvue</code> 修改了 <code>Vue.js</code> 的 runtime 和 compiler 实现，使其可以运行在小程序环境中，从而为小程序开发引入了整套 <code>Vue.js</code> 开发体验。</p></blockquote><h2 id="框架原理"><a href="#框架原理" class="headerlink" title="框架原理"></a>框架原理</h2><p><strong>两个大方向</strong></p><ul><li>通过<code>mpvue</code>提供 mp 的 runtime 适配小程序</li><li>通过<code>mpvue-loader</code>产出微信小程序所需要的文件结构和模块内容。</li></ul><p><strong>七个具体问题</strong></p><p>要了解 mpvue 原理必然要了解 Vue 原理，这是大前提。但是要讲清楚 Vue 原理需要花费大量的篇幅，不如参考<a href="https://link.juejin.cn/?target=https://github.com/answershuto/learnVue">learnVue</a>。</p><p>现在假设您对 Vue 原理有个大概的了解。</p><p>由于 Vue 使用了 Virtual DOM，所以 Virtual DOM 可以在任何支持 JavaScript 语言的平台上操作，譬如说目前 Vue 支持浏览器平台或 weex，也可以是 mp(小程序)。那么最后 Virtual DOM 如何映射到真实的 DOM 节点上呢？vue为平台做了一层适配层，浏览器平台见 <a href="https://link.juejin.cn/?target=https://github.com/Meituan-Dianping/mpvue/blob/master/src/platforms/web/runtime/node-ops.js">runtime&#x2F;node-ops.js</a>、weex平台见<a href="https://link.juejin.cn/?target=https://github.com/Meituan-Dianping/mpvue/blob/master/src/platforms/weex/runtime/node-ops.js">runtime&#x2F;node-ops.js</a>，小程序见<a href="https://link.juejin.cn/?target=https://github.com/Meituan-Dianping/mpvue/blob/master/src/platforms/mp/runtime/node-ops.js">runtime&#x2F;node-ops.js</a>。不同平台之间通过适配层对外提供相同的接口，Virtual DOM进行操作Real DOM节点的时候，只需要调用这些适配层的接口即可，而内部实现则不需要关心，它会根据平台的改变而改变。</p><p>所以思路肯定是往增加一个 mp 平台的 runtime 方向走。但问题是小程序不能操作 DOM，所以 mp 下的<code>node-ops.js</code> 里面的实现都是直接 <code>return obj</code>。</p><p>新 Virtual DOM 和旧 Virtual DOM 之间需要做一个 patch，找出 diff。patch完了之后的 diff 怎么更新视图，也就是如何给这些 DOM 加入 attr、class、style 等 DOM 属性呢？ Vue 中有 nextTick 的概念用以更新视图，mpvue这块对于小程序的 <code>setData</code> 应该怎么处理呢？</p><p>另外个问题在于小程序的 Virtual DOM 怎么生成？也就是怎么将 template 编译成<code>render function</code>。这当中还涉及到<a href="https://link.juejin.cn/?target=https://cn.vuejs.org/v2/guide/installation.html%23%E8%BF%90%E8%A1%8C%E6%97%B6-%E7%BC%96%E8%AF%91%E5%99%A8-vs-%E5%8F%AA%E5%8C%85%E5%90%AB%E8%BF%90%E8%A1%8C%E6%97%B6">运行时-编译器-vs-只包含运行时</a>，显然如果要提高性能、减少包大小、输出 wxml、mpvue 也要提供预编译的能力。因为要预输出 wxml 且没法动态改变 DOM，所以动态组件，自定义 render，和<code>&lt;script type=&quot;text/x-template&quot;&gt;</code> 字符串模版等都不支持(<a href="https://link.juejin.cn/?target=http://mpvue.com/mpvue/%23_15">参考</a>)。</p><p>另外还有一些其他问题，最后总结一下</p><ul><li>1.如何预编译生成<code>render function</code></li><li>2.如何预编译生成 wxml，wxss，wxs</li><li>3.如何 patch 出 diff</li><li>4.如何更新视图</li><li>5.如何建立小程序事件代理机制，在事件代理函数中触发与之对应的vue组件事件响应</li><li>6.如何建立vue实例与小程序 Page 实例关联</li><li>7.如何建立小程序和vue生命周期映射关系，能在小程序生命周期中触发vue生命周期</li></ul><p><strong><a href="https://link.juejin.cn/?target=">platform&#x2F;mp的目录结构</a></strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">awk复制代码.</span><br><span class="line">├── compiler <span class="regexp">//</span>解决问题<span class="number">1</span>，mpvue-template-compiler源码部分</span><br><span class="line">├── runtime <span class="regexp">//</span>解决问题<span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span></span><br><span class="line">├── util <span class="regexp">//</span>工具方法</span><br><span class="line">├── entry-compiler.js <span class="regexp">//m</span>pvue-template-compiler的入口。package.json相关命令会自动生成mpvue-template-compiler这个package。</span><br><span class="line">├── entry-runtime.js <span class="regexp">//</span>对外提供Vue对象，当然是mpvue</span><br><span class="line">└── join-code-<span class="keyword">in</span>-build.js <span class="regexp">//</span>编译出SDK时的修复</span><br></pre></td></tr></table></figure><p><strong>后面的内容逐步解答这几个问题，也就弄明白了原理</strong></p><h3 id="mpvue-loader"><a href="#mpvue-loader" class="headerlink" title="mpvue-loader"></a>mpvue-loader</h3><p><a href="https://link.juejin.cn/?target=https://github.com/mpvue/mpvue-loader">mpvue-loader</a> 是 <a href="https://link.juejin.cn/?target=https://github.com/vuejs/vue-loader">vue-loader</a> 的一个扩展延伸版，类似于超集的关系，除了<a href="https://link.juejin.cn/?target=https://github.com/vuejs/vue-loader">vue-loader</a> 本身所具备的能力之外，它还会利用<a href="https://link.juejin.cn/?target=https://github.com/Meituan-Dianping/mpvue/tree/master/packages/mpvue-template-compiler">mpvue-template-compiler</a>生成<code>render function</code>。</p><ul><li>entry</li></ul><p>它会从 <code>webpack</code> 的配置中的 entry 开始，分析依赖模块，并分别打包。在entry 中 app 属性及其内容会被打包为微信小程序所需要的 app.js／app.json／app.wxss，其余的会生成对应的页面page.js&#x2F;page.json&#x2F;page.wxml&#x2F;page.wxss，如示例的 entry 将会生成如下这些文件，文件内容下文慢慢讲来：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">stylus复制代码<span class="comment">// webpack.config.js</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: <span class="built_in">resolve</span>(<span class="string">&#x27;./src/main.js&#x27;</span>),               <span class="comment">// app 字段被识别为 app 类型</span></span><br><span class="line">        index: <span class="built_in">resolve</span>(<span class="string">&#x27;./src/pages/index/main.js&#x27;</span>),   <span class="comment">// 其余字段被识别为 page 类型</span></span><br><span class="line">        <span class="string">&#x27;news/home&#x27;</span>: <span class="built_in">resolve</span>(<span class="string">&#x27;./src/pages/news/home/index.js&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产出文件的结构</span></span><br><span class="line">.</span><br><span class="line">├── app<span class="selector-class">.js</span></span><br><span class="line">├── app<span class="selector-class">.json</span></span><br><span class="line">├──· app<span class="selector-class">.wxss</span></span><br><span class="line">├── components</span><br><span class="line">│   ├── card$<span class="number">74</span>bfae61<span class="selector-class">.wxml</span></span><br><span class="line">│   ├── index$<span class="number">023</span>eef02<span class="selector-class">.wxml</span></span><br><span class="line">│   └── news$<span class="number">0699930</span>b<span class="selector-class">.wxml</span></span><br><span class="line">├── news</span><br><span class="line">│   ├── home<span class="selector-class">.js</span></span><br><span class="line">│   ├── home<span class="selector-class">.wxml</span></span><br><span class="line">│   └── home<span class="selector-class">.wxss</span></span><br><span class="line">├── pages</span><br><span class="line">│   └── index</span><br><span class="line">│       ├── index<span class="selector-class">.js</span></span><br><span class="line">│       ├── index<span class="selector-class">.wxml</span></span><br><span class="line">│       └── index<span class="selector-class">.wxss</span></span><br><span class="line">└── static</span><br><span class="line">    ├── css</span><br><span class="line">    │   ├── app<span class="selector-class">.wxss</span></span><br><span class="line">    │   ├── index<span class="selector-class">.wxss</span></span><br><span class="line">    │   └── news</span><br><span class="line">    │       └── home<span class="selector-class">.wxss</span></span><br><span class="line">    └── js</span><br><span class="line">        ├── app<span class="selector-class">.js</span></span><br><span class="line">        ├── index<span class="selector-class">.js</span></span><br><span class="line">        ├── manifest<span class="selector-class">.js</span></span><br><span class="line">        ├── news</span><br><span class="line">        │   └── home<span class="selector-class">.js</span></span><br><span class="line">        └── vendor.js</span><br></pre></td></tr></table></figure><ul><li>wxml 每一个 <code>.vue</code> 的组件都会被生成为一个 wxml 规范的 template，然后通过 wxml 规范的 import 语法来达到一个复用，同时组件如果涉及到 props 的 data 数据，我们也会做相应的处理，举个实际的例子：</li></ul><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">handlebars复制代码<span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;my-component&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">msg</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">other-component</span> <span class="attr">:msg</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">other-component</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> otherComponent <span class="keyword">from</span> <span class="string">&#x27;./otherComponent.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123; otherComponent &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123; <span class="attr">msg</span>: <span class="string">&#x27;Hello Vue.js!&#x27;</span> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">test</span>(<span class="params"></span>) &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这样一个 Vue 的组件的模版部分会生成相应的 wxml</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">handlebars复制代码<span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">&quot;components/other-component$hash.wxml&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&quot;component$hash&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;my-component&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;handleProxy&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;_h1&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">msg</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">&quot;other-component$hash&quot;</span> <span class="attr">wx:if</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; <span class="name">$c</span>[0] &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">data</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; ..<span class="name">.$c</span>[0] &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>可能已经注意到了 other-component(:msg&#x3D;”msg”) 被转化成了  。mpvue 在运行时会从根组件开始把所有的组件实例数据合并成一个树形的数据，然后通过 setData 到 appData,<code>$c</code>是 $children 的缩写。至于那个 0 则是我们的 compiler 处理过后的一个标记，会为每一个子组件打一个特定的不重复的标记。 树形数据结构如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">awk复制代码<span class="regexp">//</span> 这儿数据结构是一个数组，index 是动态的</span><br><span class="line">&#123;</span><br><span class="line">  <span class="variable">$child</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>&#123;</span><br><span class="line">      <span class="regexp">//</span> ... root data</span><br><span class="line">      <span class="variable">$child</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;0&#x27;</span>: &#123;</span><br><span class="line">          <span class="regexp">//</span> ... data</span><br><span class="line">          msg: <span class="string">&#x27;Hello Vue.js!&#x27;</span>,</span><br><span class="line">          <span class="variable">$child</span>: &#123;</span><br><span class="line">            <span class="regexp">//</span> ...data</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>wxss</li></ul><p>这个部分的处理同 web 的处理差异不大，唯一不同在于通过配置生成 .css 为 .wxss ，其中的对于 css 的若干处理，在 postcss-mpvue-wxss 和 px2rpx-loader 这两部分的文档中又详细的介绍。</p><p>app.json／page.json 1.1.1 以上</p><p>推荐和小程序一样，将 app.json／page.json 放到页面入口处，使用 copy-webpack-plugin copy 到对应的生成位置。</p><p>1.1.1 以下</p><p>这部分内容来源于 app 和 page 的 entry 文件，通常习惯是 main.js，你需要在你的入口文件中 export default { config: {} }，这才能被我们的 loader 识别为这是一个配置，需要写成 json 文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">javascript复制代码<span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./app&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vueApp = <span class="keyword">new</span> <span class="title class_">Vue</span>(<span class="title class_">App</span>);</span><br><span class="line">vueApp.$mount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个是我们约定的额外的配置</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// 这个字段下的数据会被填充到 app.json ／ page.json</span></span><br><span class="line">    <span class="attr">config</span>: &#123;</span><br><span class="line">        <span class="attr">pages</span>: [<span class="string">&#x27;static/calendar/calendar&#x27;</span>, <span class="string">&#x27;^pages/list/list&#x27;</span>], <span class="comment">// Will be filled in webpack</span></span><br><span class="line">        <span class="attr">window</span>: &#123;</span><br><span class="line">            <span class="attr">backgroundTextStyle</span>: <span class="string">&#x27;light&#x27;</span>,</span><br><span class="line">            <span class="attr">navigationBarBackgroundColor</span>: <span class="string">&#x27;#455A73&#x27;</span>,</span><br><span class="line">            <span class="attr">navigationBarTitleText</span>: <span class="string">&#x27;美团汽车票&#x27;</span>,</span><br><span class="line">            <span class="attr">navigationBarTextStyle</span>: <span class="string">&#x27;#fff&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>同时，这个时候，我们会根据 entry 的页面数据，自动填充到 app.json 中的 pages 字段。 pages 字段也是可以自定义的，约定带有 ^ 符号开头的页面，会放到数组的最前面。</p><p>style scoped 在 vue-loader 中对 style scoped 的处理方式是给每个样式加一个 attr 来标记 module-id，然后在 css 中也给每条 rule 后添加 [module-id]，最终可以形成一个 css 的“作用域空间”。</p><p>在微信小程序中目前是不支持 attr 选择器的，所以我们做了一点改动，把 attr 上的 [module-id] 直接写到了 class 里，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">xml复制代码<span class="comment">&lt;!-- .vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        // ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- vue-loader --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span> <span class="attr">data-v-23e58823</span>&gt;</span></span><br><span class="line">        // ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span><span class="selector-attr">[data-v-23e58823]</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mpvue-loader --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container data-v-23e58823&quot;</span>&gt;</span></span><br><span class="line">        // ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span><span class="selector-class">.data-v-23e58823</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>compiler</li></ul><p>生产出的内容是：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">awk复制代码(<span class="keyword">function</span>(module, __webpack_exports__, __webpack_require__) &#123;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="regexp">//</span> mpvue-template-compiler会利用AST预编译生成一个render <span class="keyword">function</span>用以生成Virtual DOM。</span><br><span class="line">var render = <span class="keyword">function</span> () &#123;var _vm=this;var _h=_vm.<span class="variable">$createElement</span>;var _c=_vm._self._c||_h;</span><br><span class="line">  <span class="regexp">//</span> _c创建虚拟节点，参考https:<span class="regexp">//gi</span>thub.com<span class="regexp">/Meituan-Dianping/m</span>pvue<span class="regexp">/blob/m</span>aster<span class="regexp">/packages/m</span>pvue/index.js<span class="comment">#L3606</span></span><br><span class="line">  <span class="regexp">//</span> 以及https:<span class="regexp">//gi</span>thub.com<span class="regexp">/Meituan-Dianping/m</span>pvue<span class="regexp">/blob/m</span>aster<span class="regexp">/packages/m</span>pvue/index.js<span class="comment">#L3680</span></span><br><span class="line">  return _c(<span class="string">&#x27;div&#x27;</span>, &#123;</span><br><span class="line">    staticClass: <span class="string">&quot;my-component&quot;</span></span><br><span class="line">  &#125;, [_c(<span class="string">&#x27;h1&#x27;</span>, [_vm._v(_vm._s(_vm.msg))]), _vm._v(<span class="string">&quot; &quot;</span>), _c(<span class="string">&#x27;other-component&#x27;</span>, &#123;</span><br><span class="line">    attrs: &#123;</span><br><span class="line">      <span class="string">&quot;msg&quot;</span>: _vm.msg,</span><br><span class="line">      <span class="string">&quot;mpcomid&quot;</span>: <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)], <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> staticRenderFns的作用是静态渲染，在更新时不会进行patch，优化性能。而staticRenderFns是个空数组。</span><br><span class="line">var staticRenderFns = []</span><br><span class="line">render._withStripped = true</span><br><span class="line">var esExports = &#123; render: render, staticRenderFns: staticRenderFns &#125;</span><br><span class="line"><span class="regexp">/* harmony default export */</span> __webpack_exports__[<span class="string">&quot;a&quot;</span>] = (esExports);</span><br><span class="line"><span class="keyword">if</span> (false) &#123;</span><br><span class="line">  module.hot.accept()</span><br><span class="line">  <span class="keyword">if</span> (module.hot.data) &#123;</span><br><span class="line">     require(<span class="string">&quot;vue-hot-reload-api&quot;</span>).rerender(<span class="string">&quot;data-v-54ad9125&quot;</span>, esExports)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">/***/</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id="compiler"><a href="#compiler" class="headerlink" title="compiler"></a>compiler</h3><p>compiler相关，也就是template预编译这块，可以参考《<a href="https://link.juejin.cn/?target=https://github.com/answershuto/learnVue/blob/master/docs/%E8%81%8A%E8%81%8AVue%E7%9A%84template%E7%BC%96%E8%AF%91.MarkDown%23createcompiler">聊聊Vue的template编译</a>》来搞明白。原理是一样的。</p><p>mpvue自己实现了<code>export &#123; compile, compileToFunctions, compileToWxml &#125;</code>(<a href="https://link.juejin.cn/?target=https://github.com/Meituan-Dianping/mpvue/blob/master/src/platforms/mp/compiler/index.js">链接</a>)其中<code>compileToWxml</code>是用来生成wxml，具体代码<a href="https://link.juejin.cn/?target=https://github.com/mpvue/mpvue-loader/blob/master/lib/mp-compiler/index.js%23L30">在这</a>。</p><p>另外mpvue是不需要提供<a href="https://link.juejin.cn/?target=https://cn.vuejs.org/v2/guide/installation.html%23%E8%BF%90%E8%A1%8C%E6%97%B6-%E7%BC%96%E8%AF%91%E5%99%A8-vs-%E5%8F%AA%E5%8C%85%E5%90%AB%E8%BF%90%E8%A1%8C%E6%97%B6">运行时-编译器</a>的，虽然理论上是能够做到的。因为小程序不能操作DOM，即便提供了运行时-编译器也产生不了界面。</p><p>详细讲解compile过程：</p><p>1.将vue文件解析成模板对象</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk复制代码<span class="regexp">//</span> mpvue-loader<span class="regexp">/lib/</span>loader.js</span><br><span class="line">var parts = parse(content, fileName, this.sourceMap)</span><br></pre></td></tr></table></figure><p>假如vue文件源码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">xml复制代码<span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;container-bg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;home-container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">home-quotation-view</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in lists&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">:reason</span>=<span class="string">&quot;item.reason&quot;</span> <span class="attr">:stockList</span>=<span class="string">&quot;item.list&quot;</span> @<span class="attr">itemViewClicked</span>=<span class="string">&quot;itemViewClicked&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;js&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> homeQuotationView <span class="keyword">from</span> <span class="string">&#x27;@/components/homeQuotationView&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> topListApi <span class="keyword">from</span> <span class="string">&#x27;@/api/topListApi&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  data () &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">lists</span>: []</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    homeQuotationView</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> loadRankList () &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> &#123;data&#125; = <span class="keyword">await</span> topListApi.<span class="title function_">rankList</span>()</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (data) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">dateTime</span> = data.<span class="property">dt</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">lists</span> = data.<span class="property">rankList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> !!item</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    itemViewClicked (quotationItem) &#123;</span></span><br><span class="line"><span class="language-javascript">      wx.<span class="title function_">navigateTo</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>: <span class="string">`/pages/topListDetail/main?item=<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(quotationItem)&#125;</span>`</span></span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  onShow () &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="title function_">loadRankList</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;stylus&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container-bg</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span> <span class="number">100%</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span> <span class="number">100%</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span> <span class="selector-id">#F2F4FA</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.home-container</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span> <span class="number">100%</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span> <span class="number">100%</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow-x</span> hidden</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调用<code>parse(content, fileName, this.sourceMap)</code> 函数得到的结果大致如下：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">taggerscript复制代码&#123;</span><br><span class="line">  template: &#123;</span><br><span class="line">    type: &#x27;template&#x27;,</span><br><span class="line">    content: &#x27;<span class="symbol">\n</span>&lt;view class=&quot;container-bg&quot;&gt;<span class="symbol">\n</span>  &lt;view class=&quot;home-container&quot;&gt;<span class="symbol">\n</span>    &lt;home-quotation-view v-for=&quot;(item, index) in lists&quot; :key=&quot;index&quot; :reason=&quot;item.reason&quot; :stockList=&quot;item.list&quot; @itemViewClicked=&quot;itemViewClicked&quot; /&gt;<span class="symbol">\n</span>  &lt;/view&gt;<span class="symbol">\n</span>&lt;/view&gt;<span class="symbol">\n</span>&#x27;,</span><br><span class="line">    start: 10,</span><br><span class="line">    attrs: &#123;&#125;,</span><br><span class="line">    end: 251</span><br><span class="line">  &#125;,</span><br><span class="line">  script: &#123;</span><br><span class="line">    type: &#x27;script&#x27;,</span><br><span class="line">    content: &#x27;<span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span>import homeQuotationView from \&#x27;@/components/homeQuotationView\&#x27;<span class="symbol">\n</span>import topListApi from \&#x27;@/api/topListApi\&#x27;<span class="symbol">\n</span><span class="symbol">\n</span>export default &#123;<span class="symbol">\n</span>  data () &#123;<span class="symbol">\n</span>    return &#123;<span class="symbol">\n</span>      lists: []<span class="symbol">\n</span>    &#125;<span class="symbol">\n</span>  &#125;,<span class="symbol">\n</span>  components: &#123;<span class="symbol">\n</span>    homeQuotationView<span class="symbol">\n</span>  &#125;,<span class="symbol">\n</span>  methods: &#123;<span class="symbol">\n</span>    async loadRankList () &#123;<span class="symbol">\n</span>      let &#123;data&#125; = await topListApi.rankList()<span class="symbol">\n</span>      if (data) &#123;<span class="symbol">\n</span>        this.dateTime = data.dt<span class="symbol">\n</span>        this.lists = data.rankList.filter((item) =&gt; &#123;<span class="symbol">\n</span>          return !!item<span class="symbol">\n</span>        &#125;)<span class="symbol">\n</span>      &#125;<span class="symbol">\n</span>    &#125;,<span class="symbol">\n</span>    itemViewClicked (quotationItem) &#123;<span class="symbol">\n</span>      wx.navigateTo(&#123;<span class="symbol">\n</span>        url: `/pages/topListDetail/main?item=$&#123;JSON.stringify(quotationItem)&#125;`<span class="symbol">\n</span>      &#125;)<span class="symbol">\n</span>    &#125;<span class="symbol">\n</span>  &#125;,<span class="symbol">\n</span>  onShow () &#123;<span class="symbol">\n</span>    this.loadRankList()<span class="symbol">\n</span>  &#125;<span class="symbol">\n</span>&#125;<span class="symbol">\n</span>&#x27;,</span><br><span class="line">    start: 282,</span><br><span class="line">    attrs: &#123;</span><br><span class="line">      lang: &#x27;js&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    lang: &#x27;js&#x27;,</span><br><span class="line">    end: 946,</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  styles: [&#123;</span><br><span class="line">    type: &#x27;style&#x27;,</span><br><span class="line">    content: &#x27;<span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span>.container-bg<span class="symbol">\n</span>  width 100%<span class="symbol">\n</span>  height 100%<span class="symbol">\n</span>  background-color #F2F4FA<span class="symbol">\n</span><span class="symbol">\n</span>.home-container<span class="symbol">\n</span>  width 100%<span class="symbol">\n</span>  height 100%<span class="symbol">\n</span>  overflow-x hidden<span class="symbol">\n</span><span class="symbol">\n</span>&#x27;,</span><br><span class="line">    start: 985,</span><br><span class="line">    attrs: [Object],</span><br><span class="line">    lang: &#x27;stylus&#x27;,</span><br><span class="line">    scoped: true,</span><br><span class="line">    end: 1135,</span><br><span class="line">    ...</span><br><span class="line">  &#125;],</span><br><span class="line">  customBlocks: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.调用mpvue-loader&#x2F;lib&#x2F;template-compiler&#x2F;index.js导出的接口并传入上面得到的html模板：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dart复制代码<span class="keyword">var</span> templateCompilerPath = normalize.lib(<span class="string">&#x27;template-compiler/index&#x27;</span>)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">var</span> defaultLoaders = &#123;</span><br><span class="line">  html: templateCompilerPath + templateCompilerOptions,</span><br><span class="line">  css: options.extractCSS</span><br><span class="line">    ? getCSSExtractLoader()</span><br><span class="line">    : styleLoaderPath + <span class="string">&#x27;!&#x27;</span> + <span class="string">&#x27;css-loader&#x27;</span> + cssLoaderOptions,</span><br><span class="line">  js: hasBuble ? (<span class="string">&#x27;buble-loader&#x27;</span> + bubleOptions) : hasBabel ? babelLoaderOptions : <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// check if there are custom loaders specified via</span></span><br><span class="line"><span class="comment">// webpack config, otherwise use defaults</span></span><br><span class="line"><span class="keyword">var</span> loaders = <span class="built_in">Object</span>.assign(&#123;&#125;, defaultLoaders, options.loaders)</span><br></pre></td></tr></table></figure><ol><li>调用mpvue&#x2F;packages&#x2F;mpvue-template-compiler&#x2F;build.js的compile接口：</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk复制代码<span class="regexp">//</span> mpvue-loader<span class="regexp">/lib/</span>template-compiler/index.js</span><br><span class="line">var compiled = compile(html, compilerOptions)</span><br></pre></td></tr></table></figure><p>compile方法生产下面的ast(Abstract Syntax Tree)模板，render函数和staticRenderFns</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">yaml复制代码&#123;</span></span><br><span class="line">  <span class="attr">ast:</span> &#123;</span><br><span class="line">    <span class="attr">type:</span> <span class="number">1</span>,</span><br><span class="line">    <span class="attr">tag:</span> <span class="string">&#x27;view&#x27;</span>,</span><br><span class="line">    <span class="attr">attrsList:</span> [],</span><br><span class="line">    <span class="attr">attrsMap:</span> &#123;</span><br><span class="line">      <span class="attr">class:</span> <span class="string">&#x27;container-bg&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">parent:</span> <span class="string">undefined</span>,</span><br><span class="line">    <span class="attr">children:</span> [&#123;</span><br><span class="line">      <span class="attr">type:</span> <span class="number">1</span>,</span><br><span class="line">      <span class="attr">tag:</span> <span class="string">&#x27;view&#x27;</span>,</span><br><span class="line">      <span class="attr">attrsList:</span> [],</span><br><span class="line">      <span class="attr">attrsMap:</span> &#123;</span><br><span class="line">        <span class="attr">class:</span> <span class="string">&#x27;home-container&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">parent:</span> &#123;</span><br><span class="line">        <span class="attr">type:</span> <span class="number">1</span>,</span><br><span class="line">        <span class="attr">tag:</span> <span class="string">&#x27;view&#x27;</span>,</span><br><span class="line">        <span class="attr">attrsList:</span> [],</span><br><span class="line">        <span class="attr">attrsMap:</span> &#123;</span><br><span class="line">          <span class="attr">class:</span> <span class="string">&#x27;container-bg&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">parent:</span> <span class="string">undefined</span>,</span><br><span class="line">        <span class="attr">children:</span> [</span><br><span class="line">          [<span class="string">Circular</span>]</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">plain:</span> <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">staticClass:</span> <span class="string">&#x27;&quot;container-bg&quot;&#x27;</span>,</span><br><span class="line">        <span class="attr">static:</span> <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">staticRoot:</span> <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">children:</span> [&#123;</span><br><span class="line">        <span class="attr">type:</span> <span class="number">1</span>,</span><br><span class="line">        <span class="attr">tag:</span> <span class="string">&#x27;home-quotation-view&#x27;</span>,</span><br><span class="line">        <span class="attr">attrsList:</span> [&#123;</span><br><span class="line">          <span class="attr">name:</span> <span class="string">&#x27;:reason&#x27;</span>,</span><br><span class="line">          <span class="attr">value:</span> <span class="string">&#x27;item.reason&#x27;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">name:</span> <span class="string">&#x27;:stockList&#x27;</span>,</span><br><span class="line">          <span class="attr">value:</span> <span class="string">&#x27;item.list&#x27;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">name:</span> <span class="string">&#x27;@itemViewClicked&#x27;</span>,</span><br><span class="line">          <span class="attr">value:</span> <span class="string">&#x27;itemViewClicked&#x27;</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="attr">attrsMap:</span> &#123;</span><br><span class="line">          <span class="attr">&#x27;v-for&#x27;:</span> <span class="string">&#x27;(item, index) in lists&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;:key&#x27;</span><span class="string">:</span> <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;:reason&#x27;</span><span class="string">:</span> <span class="string">&#x27;item.reason&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;:stockList&#x27;</span><span class="string">:</span> <span class="string">&#x27;item.list&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;@itemViewClicked&#x27;</span><span class="string">:</span> <span class="string">&#x27;itemViewClicked&#x27;</span>,</span><br><span class="line">          <span class="attr">&#x27;data-eventid&#x27;:</span> <span class="string">&#x27;<span class="template-variable">&#123;&#123;\&#x27;0-\&#x27;+index&#125;&#125;</span>&#x27;</span>,</span><br><span class="line">          <span class="attr">&#x27;data-comkey&#x27;:</span> <span class="string">&#x27;<span class="template-variable">&#123;&#123;$k&#125;&#125;</span>&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">parent:</span> [<span class="string">Circular</span>],</span><br><span class="line">        <span class="attr">children:</span> [],</span><br><span class="line">        <span class="attr">for:</span> <span class="string">&#x27;lists&#x27;</span>,</span><br><span class="line">        <span class="attr">alias:</span> <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">        <span class="attr">iterator1:</span> <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">        <span class="attr">key:</span> <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">        <span class="attr">plain:</span> <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">hasBindings:</span> <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">attrs:</span> [&#123;</span><br><span class="line">          <span class="attr">name:</span> <span class="string">&#x27;reason&#x27;</span>,</span><br><span class="line">          <span class="attr">value:</span> <span class="string">&#x27;item.reason&#x27;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">name:</span> <span class="string">&#x27;stockList&#x27;</span>,</span><br><span class="line">          <span class="attr">value:</span> <span class="string">&#x27;item.list&#x27;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">name:</span> <span class="string">&#x27;eventid&#x27;</span>,</span><br><span class="line">          <span class="attr">value:</span> <span class="string">&#x27;\&#x27;0-\&#x27;+index&#x27;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">name:</span> <span class="string">&#x27;mpcomid&#x27;</span>,</span><br><span class="line">          <span class="attr">value:</span> <span class="string">&#x27;\&#x27;0-\&#x27;+index&#x27;</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="attr">events:</span> &#123;</span><br><span class="line">          <span class="attr">itemViewClicked:</span> &#123;</span><br><span class="line">            <span class="attr">value:</span> <span class="string">&#x27;itemViewClicked&#x27;</span>,</span><br><span class="line">            <span class="attr">modifiers:</span> <span class="string">undefined</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">eventid:</span> <span class="string">&#x27;\&#x27;0-\&#x27;+index&#x27;</span>,</span><br><span class="line">        <span class="attr">mpcomid:</span> <span class="string">&#x27;\&#x27;0-\&#x27;+index&#x27;</span>,</span><br><span class="line">        <span class="attr">static:</span> <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">staticRoot:</span> <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">forProcessed:</span> <span class="literal">true</span></span><br><span class="line">      &#125;],</span><br><span class="line">      <span class="attr">plain:</span> <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">staticClass:</span> <span class="string">&#x27;&quot;home-container&quot;&#x27;</span>,</span><br><span class="line">      <span class="attr">static:</span> <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">staticRoot:</span> <span class="literal">false</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="attr">plain:</span> <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">staticClass:</span> <span class="string">&#x27;&quot;container-bg&quot;&#x27;</span>,</span><br><span class="line">    <span class="attr">static:</span> <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">staticRoot:</span> <span class="literal">false</span></span><br><span class="line">  &#125;<span class="string">,</span></span><br><span class="line">  <span class="attr">render:</span> <span class="string">&#x27;with(this)&#123;return _c(\&#x27;view\&#x27;,&#123;staticClass:&quot;container-bg&quot;&#125;,[_c(\&#x27;view\&#x27;,&#123;staticClass:&quot;home-container&quot;&#125;,_l((lists),function(item,index)&#123;return _c(\&#x27;home-quotation-view\&#x27;,&#123;key:index,attrs:&#123;&quot;reason&quot;:item.reason,&quot;stockList&quot;:item.list,&quot;eventid&quot;:\&#x27;0-\&#x27;+index,&quot;mpcomid&quot;:\&#x27;0-\&#x27;+index&#125;,on:&#123;&quot;itemViewClicked&quot;:itemViewClicked&#125;&#125;)&#125;))])&#125;&#x27;</span><span class="string">,</span></span><br><span class="line">  <span class="attr">staticRenderFns:</span> []<span class="string">,</span></span><br><span class="line">  <span class="attr">errors:</span> []<span class="string">,</span></span><br><span class="line">  <span class="attr">tips:</span> []</span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>其中的render函数运行的结果是返回<code>VNode</code>对象，其实<code>render</code>函数应该长下面这样：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">scheme复制代码(<span class="name">function</span>() &#123;</span><br><span class="line">  with(<span class="name">this</span>)&#123;</span><br><span class="line">    return _c(<span class="symbol">&#x27;div</span>&#x27;,&#123;   //创建一个 div 元素</span><br><span class="line">      attrs:&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;app&quot;</span>&#125;  //div 添加属性 id</span><br><span class="line">      &#125;,[</span><br><span class="line">        _m(<span class="name">0</span>),  //静态节点 header，此处对应 staticRenderFns 数组索引为 <span class="number">0</span> 的 render 函数</span><br><span class="line">        _v(<span class="string">&quot; &quot;</span>), //空的文本节点</span><br><span class="line">        (<span class="name">message</span>) //三元表达式，判断 message 是否存在</span><br><span class="line">         //如果存在，创建 p 元素，元素里面有文本，值为 toString(<span class="name">message</span>)</span><br><span class="line">        ?_c(<span class="symbol">&#x27;p</span>&#x27;,[<span class="name">_v</span>(<span class="string">&quot;\n    &quot;</span>+_s(<span class="name">message</span>)+<span class="string">&quot;\n  &quot;</span>)])</span><br><span class="line">        //如果不存在，创建 p 元素，元素里面有文本，值为 No message. </span><br><span class="line">        :_c(<span class="symbol">&#x27;p</span>&#x27;,[<span class="name">_v</span>(<span class="string">&quot;\n    No message.\n  &quot;</span>)])</span><br><span class="line">      ]</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其中的<code>_c</code>就是vue对象的<code>createElement</code>方法 (创建元素)，<code>_m</code>是<code>renderStatic</code>（渲染静态节点），<code>_v</code> 是 <code>createTextVNode</code>（创建文本dom），<code>_s</code> 是 <code>toString</code> （转换为字符串）</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">reasonml复制代码<span class="comment">// src/core/instance/render.js</span></span><br><span class="line">export <span class="keyword">function</span> initRender<span class="function"> (<span class="params">vm<span class="typing">: <span class="module"><span class="identifier">Component</span>)</span> &#123;</span></span></span></span><br><span class="line"><span class="typing"><span class="params"><span class="function"></span>  <span class="operator">...</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>  // <span class="params">bind the createElement fn to this instance</span></span></span><br><span class="line"><span class="params"><span class="function"></span>  // <span class="params">so that we get proper render context inside it.</span></span></span><br><span class="line"><span class="params"><span class="function"></span>  // <span class="params">args order<span class="typing">: tag,</span> data,</span> <span class="params">children,</span> <span class="params">normalizationType,</span> <span class="params">alwaysNormalize</span></span></span><br><span class="line"><span class="params"><span class="function"></span>  // <span class="params">internal version is used by render functions compiled from templates</span></span></span><br><span class="line"><span class="params"><span class="function"></span>  <span class="params">vm._c = (a,</span> <span class="params">b,</span> <span class="params">c,</span> <span class="params">d)</span> =&gt;</span> create<span class="constructor">Element(<span class="params">vm</span>, <span class="params">a</span>, <span class="params">b</span>, <span class="params">c</span>, <span class="params">d</span>, <span class="params">false</span>)</span></span><br><span class="line">  <span class="comment">// normalization is always applied for the public version, used in</span></span><br><span class="line">  <span class="comment">// user-written render functions.</span></span><br><span class="line">  vm.$createElement =<span class="function"> (<span class="params">a</span>, <span class="params">b</span>, <span class="params">c</span>, <span class="params">d</span>) =&gt;</span> create<span class="constructor">Element(<span class="params">vm</span>, <span class="params">a</span>, <span class="params">b</span>, <span class="params">c</span>, <span class="params">d</span>, <span class="params">true</span>)</span><span class="operator"></span></span><br><span class="line"><span class="operator">  ...</span></span><br><span class="line"><span class="operator"></span>&#125;<span class="operator"></span></span><br><span class="line"><span class="operator"></span></span><br><span class="line"><span class="operator">...</span></span><br><span class="line"><span class="operator"></span><span class="module-access"><span class="module"><span class="identifier">Vue</span>.</span></span>prototype._s = toString<span class="operator"></span></span><br><span class="line"><span class="operator">...</span></span><br><span class="line"><span class="operator"></span><span class="module-access"><span class="module"><span class="identifier">Vue</span>.</span></span>prototype._m = renderStatic<span class="operator"></span></span><br><span class="line"><span class="operator">...</span></span><br><span class="line"><span class="operator"></span><span class="module-access"><span class="module"><span class="identifier">Vue</span>.</span></span>prototype._v = createTextVNode</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol><li>调用compileWxml方法生产wxml模板，这个方法最终会调用 mpvue&#x2F;packages&#x2F;mpvue-template-compiler&#x2F;build.js的compileToWxml方法将第一步compile出来的模板转成小程序的wxml模板</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk复制代码<span class="regexp">//</span> mpvue-loader<span class="regexp">/lib/</span>template-compiler/index.js</span><br><span class="line">compileToWxml.call(this, compiled, html)</span><br></pre></td></tr></table></figure><p><strong>以上解答了问题1、2</strong></p><h3 id="runtime"><a href="#runtime" class="headerlink" title="runtime"></a>runtime</h3><p><a href="https://link.juejin.cn/?target=">目录结构</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">awk复制代码.</span><br><span class="line">├── events.js <span class="regexp">//</span>解答问题<span class="number">5</span></span><br><span class="line">├── index.js <span class="regexp">//</span>入口提供Vue对象，以及<span class="variable">$mount</span>，和各种初始化</span><br><span class="line">├── liefcycle <span class="regexp">//</span>解答问题<span class="number">6</span>、<span class="number">7</span></span><br><span class="line">├── node-ops.js <span class="regexp">//</span>操作真实DOM的相关实现，因为小程序不能操作DOM，所以这里都是直接返回</span><br><span class="line">├── patch.js <span class="regexp">//</span>解答问题<span class="number">3</span></span><br><span class="line">└── render.js <span class="regexp">//</span>解答问题<span class="number">4</span></span><br></pre></td></tr></table></figure><p><strong><a href="https://link.juejin.cn/?target=https://github.com/Meituan-Dianping/mpvue/blob/master/src/platforms/mp/runtime/patch.js">patch.js</a></strong></p><p>和vue使用的<code>createPatchFunction</code>保持一致，任然是旧树和新树进行patch产出diff，但是多了一行this.$updateDataToMP()用以更新。</p><p><strong><a href="https://link.juejin.cn/?target=https://github.com/Meituan-Dianping/mpvue/blob/master/src/platforms/mp/runtime/render.js">render.js</a></strong></p><p>两个核心的方法<code>initDataToMP</code>、<code>updateDataToMP</code>。</p><p><code>initDataToMP</code>收集vm上的data，然后调用小程序Page示例的<code>setData</code>渲染。</p><p><code>updateDataToMP</code>在每次patch，也就是依赖收集发现数据改变时更新(参考patch.js代码)，这部分一样会使用<code>nextTick</code>和队列。最终使用了节流阀<code>throttleSetData</code>。50毫秒用来控制频率以解决频繁修改Data，会造成大量传输Data数据而导致的性能问题。</p><p>其中<code>collectVmData</code>最终也是用到了<code>formatVmData</code>。尤其要注意的是一句注释：</p><blockquote><p>getVmData 这儿获取当前组件内的所有数据，包含 props、computed 的数据</p></blockquote><p>我们又知道，service到view是两个线程间通信，如果Data含有大量数据，增加了传输数据量，加大了传输成本，将会造成性能下降。</p><p><strong><a href="https://link.juejin.cn/?target=https://github.com/Meituan-Dianping/mpvue/blob/master/src/platforms/mp/runtime/events.js">events.js</a></strong></p><p>正如官网所说的，这里使用<code>eventTypeMap</code>做了各<a href="https://link.juejin.cn/?target=http://mpvue.com/mpvue/%23_13">事件的隐射</a></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">clean</span><br><span class="line">复制代码<span class="keyword">import</span> &#123; getComKey, eventTypeMap &#125; <span class="keyword">from</span> <span class="string">&#x27;../util/index&#x27;</span></span><br><span class="line">stylus复制代码<span class="comment">// 用于小程序的 event type 到 web 的 event</span></span><br><span class="line"><span class="keyword">export</span> const eventTypeMap = &#123;</span><br><span class="line">  tap: [<span class="string">&#x27;tap&#x27;</span>, <span class="string">&#x27;click&#x27;</span>],</span><br><span class="line">  touchstart: [<span class="string">&#x27;touchstart&#x27;</span>],</span><br><span class="line">  touchmove: [<span class="string">&#x27;touchmove&#x27;</span>],</span><br><span class="line">  touchcancel: [<span class="string">&#x27;touchcancel&#x27;</span>],</span><br><span class="line">  touchend: [<span class="string">&#x27;touchend&#x27;</span>],</span><br><span class="line">  longtap: [<span class="string">&#x27;longtap&#x27;</span>],</span><br><span class="line">  input: [<span class="string">&#x27;input&#x27;</span>],</span><br><span class="line">  blur: [<span class="string">&#x27;change&#x27;</span>, <span class="string">&#x27;blur&#x27;</span>],</span><br><span class="line">  submit: [<span class="string">&#x27;submit&#x27;</span>],</span><br><span class="line">  focus: [<span class="string">&#x27;focus&#x27;</span>],</span><br><span class="line">  scrolltoupper: [<span class="string">&#x27;scrolltoupper&#x27;</span>],</span><br><span class="line">  scrolltolower: [<span class="string">&#x27;scrolltolower&#x27;</span>],</span><br><span class="line">  scroll: [<span class="string">&#x27;scroll&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用了<code>handleProxyWithVue</code>方法来代理小程序事件到vue事件。</p><p>另外看下作者自己对这部分的<a href="https://link.juejin.cn/?target=https://tech.meituan.com/mt_mpvue_development_framework.html">思路</a></p><blockquote><p><strong>事件代理机制</strong>：用户交互触发的数据更新通过事件代理机制完成。在 Vue.js 代码中，事件响应函数对应到组件的 method， Vue.js 自动维护了上下文环境。然而在小程序中并没有类似的机制，又因为 Vue.js 执行环境中维护着一份实时的虚拟 DOM，这与小程序的视图层完全对应，我们思考，在小程序组件节点上触发事件后，只要找到虚拟 DOM 上对应的节点，触发对应的事件不就完成了么；另一方面，Vue.js 事件响应如果触发了数据更新，其生命周期函数更新将自动触发，在此函数上同步更新小程序数据，数据同步也就实现了。</p></blockquote><p><code>getHandle</code>这个方法应该就是作者思路当中所说的：找到对应节点，然后找到handle。</p><p><strong><a href="https://link.juejin.cn/?target=https://github.com/Meituan-Dianping/mpvue/blob/master/src/platforms/mp/runtime/lifecycle.js">lifecycle.js</a></strong></p><p>在<code>initMP</code>方法中，自己创建小程序的App、Page。实现生命周期相关方法，使用<code>callHook</code>代理兼容小程序App、Page的生命周期。</p><p><a href="https://link.juejin.cn/?target=http://mpvue.com/mpvue/%23_4">官方文档生命周期</a>中说到了：</p><blockquote><p>同 vue，不同的是我们会在小程序 onReady 后，再去触发 vue mounted 生命周期</p></blockquote><p>这部分查看，<code>onReady</code>之后才会执行<code>next</code>，这个<code>next</code>回调最终是vue的<code>mountComponent</code>。可以在<a href="https://link.juejin.cn/?target=https://github.com/Meituan-Dianping/mpvue/blob/master/src/platforms/mp/runtime/index.js%23L37">index.js</a>中看到。这部分代码也就是解决了”小程序生命周期中触发vue生命周期”。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">awk复制代码export <span class="keyword">function</span> initMP (mpType, <span class="keyword">next</span>) &#123;</span><br><span class="line">  <span class="regexp">//</span> ...</span><br><span class="line">    global.Page(&#123;</span><br><span class="line">      <span class="regexp">//</span> 生命周期函数--监听页面初次渲染完成</span><br><span class="line">      onReady () &#123;</span><br><span class="line">        mp.status = <span class="string">&#x27;ready&#x27;</span></span><br><span class="line"></span><br><span class="line">        callHook(rootVueVM, <span class="string">&#x27;onReady&#x27;</span>)</span><br><span class="line">        <span class="keyword">next</span>()</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="regexp">//</span> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在小程序onShow时，使用$nextTick去第一次渲染数据，参考上面提到的render.js。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">awk复制代码export <span class="keyword">function</span> initMP (mpType, <span class="keyword">next</span>) &#123;</span><br><span class="line">  <span class="regexp">//</span> ...</span><br><span class="line">  global.Page(&#123;</span><br><span class="line">    <span class="regexp">//</span> 生命周期函数--监听页面显示</span><br><span class="line">    onShow () &#123;</span><br><span class="line">      mp.page = this</span><br><span class="line">      mp.status = <span class="string">&#x27;show&#x27;</span></span><br><span class="line">      callHook(rootVueVM, <span class="string">&#x27;onShow&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="regexp">//</span> 只有页面需要 setData</span><br><span class="line">      rootVueVM.<span class="variable">$nextTick</span>(() =&gt; &#123;</span><br><span class="line">        rootVueVM._initDataToMP()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="regexp">//</span> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在mpvue-loader生成template时，比如点击事件<code>@click</code>会变成<code>bindtap=&quot;handleProxy&quot;</code>，事件绑定全都会使用<code>handleProxy</code>这个方法。</p><p>可以查看上面<a href="#mpvue-loader">mpvue-loader</a>回顾一下。</p><p>最终handleProxy调用的是event.js中的<code>handleProxyWithVue</code>。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">awk复制代码export <span class="keyword">function</span> initMP (mpType, <span class="keyword">next</span>) &#123;</span><br><span class="line">  <span class="regexp">//</span> ...</span><br><span class="line">    global.Page(&#123;</span><br><span class="line">      handleProxy (e) &#123;</span><br><span class="line">        return rootVueVM.<span class="variable">$handleProxyWithVue</span>(e)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="regexp">//</span> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="https://link.juejin.cn/?target=https://github.com/Meituan-Dianping/mpvue/blob/master/src/platforms/mp/runtime/index.js">index.js</a></strong></p><p>最后index.js就负责各种初始化和mount。</p><h2 id="Class和Style为什么暂不支持组件"><a href="#Class和Style为什么暂不支持组件" class="headerlink" title="Class和Style为什么暂不支持组件"></a>Class和Style为什么暂不支持组件</h2><p>原因：目前的组件是使用小程序的 template 标签实现的，给组件指定的class和style是挂载在template标签上，而template 标签不支持 class 及 style 属性。</p><p>解决方案： 在自定义组件上绑定class或style到一个props属性上。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">arduino复制代码 <span class="comment">// 组件ComponentA.vue</span></span><br><span class="line"> &lt;<span class="keyword">template</span>&gt;</span><br><span class="line">  &lt;div <span class="keyword">class</span>=<span class="string">&quot;container&quot;</span> :<span class="keyword">class</span>=<span class="string">&quot;pClass&quot;</span>&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/<span class="keyword">template</span>&gt;</span><br><span class="line">xml复制代码&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      pClass: &#123;</span><br><span class="line">        type: <span class="type">String</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">xml复制代码&lt;!--PageB.vue--&gt;</span></span><br><span class="line"><span class="string">&lt;template&gt;</span></span><br><span class="line"><span class="string">    &lt;component-a :pClass=&quot;cusComponentAClass&quot;  /&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string">applescript复制代码&lt;script&gt;</span></span><br><span class="line"><span class="string">data () &#123;</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">      cusComponentAClass: &#x27;</span>a-<span class="keyword">class</span> b-<span class="keyword">class</span><span class="number">&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">xml复制代码&lt;style lang=<span class="string">&quot;stylus&quot;</span> scoped&gt;</span><br><span class="line">  .a-<span class="keyword">class</span></span><br><span class="line">    border red solid <span class="number">2</span>rpx</span><br><span class="line">  .b-<span class="keyword">class</span></span><br><span class="line">    margin-right <span class="number">20</span>rpx</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>但是这样会有问题就是style加上scoped之后，编译模板生成的代码是下面这样的：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">haskell</span>复制代码 .a-<span class="keyword">class</span>.<span class="class"><span class="keyword">data</span>-v-8f1d914e &#123;</span></span><br><span class="line"><span class="class">   <span class="title">border</span>: #<span class="title">f00</span> <span class="title">solid</span> 2<span class="title">rpx</span>;</span></span><br><span class="line"><span class="class"> &#125;</span></span><br><span class="line"> .b-<span class="keyword">class</span>.<span class="class"><span class="keyword">data</span>-v-8f1d914e &#123;</span></span><br><span class="line"><span class="class">   <span class="title">margin</span>-<span class="title">right</span> 20<span class="title">rpx</span></span></span><br><span class="line"><span class="class"> &#125;</span></span><br></pre></td></tr></table></figure><p>所以想要这些组件的class生效就不能使用scoped的style，改成下面这样，最好自己给a-class和b-class加前缀以防其他的文件引用这些样式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">xml复制代码 <span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;stylus&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.a-class</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span> red solid <span class="number">2</span>rpx</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.b-class</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-right</span> <span class="number">20</span>rpx</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;stylus&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.other-class</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span> red solid <span class="number">2</span>rpx</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">   ...</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在定义组件上绑定style属性到一个props属性上：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">xml复制代码 <span class="comment">&lt;!--P组件ComponentA.vue--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;pStyle&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">xml复制代码<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">pStyle</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">xml复制代码<span class="comment">&lt;!--PageB.vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component-a</span> <span class="attr">:pStyle</span>=<span class="string">&quot;cusComponentAStyle&quot;</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">xml复制代码<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> cusComponentAStyle = <span class="string">&#x27;border:red solid 2rpx; margin-right:20rpx;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">data () &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      cusComponentAStyle</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">xml复制代码<span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;stylus&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以通过定义styleObject，然后通过工具函数转化为styleString，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">javascript复制代码<span class="keyword">const</span> bstyle = &#123;</span><br><span class="line">  <span class="attr">border</span>: <span class="string">&#x27;red solid 2rpx&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;margin-right&#x27;</span>: <span class="string">&#x27;20rpx&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(bstyle)) &#123;</span><br><span class="line">  arr.<span class="title function_">push</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cusComponentAStyle = arr.<span class="title function_">join</span>(<span class="string">&#x27;; &#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>当然自定义组件确定只会改变某个css样式，通过pros传入单个样式的值，然后通过:style绑定肯定没问题：</li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">dust复制代码<span class="comment">&lt;!--组件ComponentA.vue--&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#x27;background-color&#x27;: backgroundColor&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    ...</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">xml复制代码<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span> </span></span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">    props: &#123;</span></span><br><span class="line"><span class="template-variable">      backgroundColor: &#123;</span></span><br><span class="line"><span class="template-variable">        type: String,</span></span><br><span class="line"><span class="template-variable">        <span class="keyword">default</span>: &#x27;yellow&#x27;</span></span><br><span class="line"><span class="template-variable">      &#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">xml复制代码<span class="comment">&lt;!-- PageB.vue --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">component-a</span> <span class="attr">backgroundColor</span>=<span class="string">&quot;red&quot;</span>  /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="分包加载"><a href="#分包加载" class="headerlink" title="分包加载"></a>分包加载</h2><p>package.json修改</p><ul><li>升级： “mpvue-loader”: “^1.1.2-rc.4” “webpack-mpvue-asset-plugin”: “^0.1.1”</li><li>新增： “relative”: “^3.0.2”</li></ul><p>注意事项</p><ul><li>1.1.2-rc.5 修复 slot 文件路径生成错误的问题</li><li>1.1.x 版本还不是很稳定，对稳定性要求较高的项目建议暂时使用 1.0.x 版本</li></ul><p>移动src&#x2F;main.js中config相关内容到同级目录下main.json(新建)中</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nim复制代码<span class="keyword">export</span> default &#123;</span><br><span class="line">  // config: <span class="meta">&#123;...&#125;</span> 需要移动</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>to</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">nim复制代码&#123;</span><br><span class="line"> <span class="string">&quot;pages&quot;</span>: [</span><br><span class="line">   <span class="string">&quot;pages/index/main&quot;</span>,</span><br><span class="line">   <span class="string">&quot;pages/logs/main&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;subPackages&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;root&quot;</span>: <span class="string">&quot;pages/packageA&quot;</span>,</span><br><span class="line">     <span class="string">&quot;pages&quot;</span>: [</span><br><span class="line">       <span class="string">&quot;counter/main&quot;</span></span><br><span class="line">     ]</span><br><span class="line">   &#125;</span><br><span class="line"> ],</span><br><span class="line"> <span class="string">&quot;window&quot;</span>: <span class="meta">&#123;...&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>webpack 配置配合升级指南</strong></p><ul><li>本次升级意在调整生成文件目录结构，对依赖的文件由原来的写死绝对路径该改为相对路径</li><li><a href="mailto:&#x6d;&#x70;&#118;&#x75;&#101;&#45;&#x6c;&#111;&#x61;&#x64;&#x65;&#x72;&#64;&#x31;&#46;&#x31;&#x2e;&#50;&#45;&#114;&#x63;&#46;&#52;">&#x6d;&#x70;&#118;&#x75;&#101;&#45;&#x6c;&#111;&#x61;&#x64;&#x65;&#x72;&#64;&#x31;&#46;&#x31;&#x2e;&#50;&#45;&#114;&#x63;&#46;&#52;</a> 依赖 <a href="mailto:&#119;&#101;&#98;&#x70;&#x61;&#x63;&#x6b;&#45;&#x6d;&#112;&#118;&#x75;&#101;&#x2d;&#97;&#115;&#x73;&#x65;&#116;&#45;&#x70;&#108;&#x75;&#103;&#x69;&#x6e;&#x40;&#x30;&#46;&#49;&#x2e;&#x30;">&#119;&#101;&#98;&#x70;&#x61;&#x63;&#x6b;&#45;&#x6d;&#112;&#118;&#x75;&#101;&#x2d;&#97;&#115;&#x73;&#x65;&#116;&#45;&#x70;&#108;&#x75;&#103;&#x69;&#x6e;&#x40;&#x30;&#46;&#49;&#x2e;&#x30;</a> 做依赖资源引用</li><li>之前写在 main.js 中的 config 信息，需要在 main.js 同级目录下新建 main.json 文件，使用 webapck-copy-plugin copy 到 build 目录下</li><li>app.json 中引用的图片不会自动 copy 到 dist 目录下 json 配置文件是由 webapck-copy-plugin copy 过去的，不会处理依赖，可以将图片放到根目录下 static 目录下，使用 webapck-copy-plugin copy 过去</li></ul><p>build&#x2F;webpack.base.conf.js</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">arcade复制代码+<span class="keyword">var</span> CopyWebpackPlugin = require(<span class="string">&#x27;copy-webpack-plugin&#x27;</span>)</span><br><span class="line">+<span class="keyword">var</span> relative = require(<span class="string">&#x27;relative&#x27;</span>)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">resolve</span> (<span class="params">dir</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> path.join(__dirname, <span class="string">&#x27;..&#x27;</span>, dir)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">-<span class="keyword">function</span> <span class="title function_">getEntry</span> (<span class="params">rootSrc, pattern</span>) &#123;</span><br><span class="line">-  <span class="keyword">var</span> files = glob.sync(path.resolve(rootSrc, pattern))</span><br><span class="line">-  <span class="keyword">return</span> files.<span class="built_in">reduce</span>(<span class="function">(<span class="params">res, file</span>) =&gt;</span> &#123;</span><br><span class="line">-    <span class="keyword">var</span> info = path.parse(file)</span><br><span class="line">-    <span class="keyword">var</span> key = info.dir.<span class="built_in">slice</span>(rootSrc.<span class="built_in">length</span> + <span class="number">1</span>) + <span class="string">&#x27;/&#x27;</span> + info.name</span><br><span class="line">-    res[key] = path.resolve(file)</span><br><span class="line">-    <span class="keyword">return</span> res</span><br><span class="line">-  &#125;, &#123;&#125;)</span><br><span class="line">+<span class="keyword">function</span> <span class="title function_">getEntry</span> (<span class="params">rootSrc</span>) &#123;</span><br><span class="line">+  <span class="keyword">var</span> <span class="built_in">map</span> = &#123;&#125;;</span><br><span class="line">+  glob.sync(rootSrc + <span class="string">&#x27;/pages/**/main.js&#x27;</span>)</span><br><span class="line">+  .forEach(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">+    <span class="keyword">var</span> key = relative(rootSrc, file).<span class="built_in">replace</span>(<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">+    <span class="built_in">map</span>[key] = file;</span><br><span class="line">+  &#125;)</span><br><span class="line">+   <span class="keyword">return</span> <span class="built_in">map</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">   plugins: [</span><br><span class="line">-    <span class="keyword">new</span> MpvuePlugin()</span><br><span class="line">+    <span class="keyword">new</span> MpvuePlugin(),</span><br><span class="line">+    <span class="keyword">new</span> CopyWebpackPlugin([&#123;</span><br><span class="line">+      from: <span class="string">&#x27;**/*.json&#x27;</span>,</span><br><span class="line">+      to: <span class="string">&#x27;app.json&#x27;</span></span><br><span class="line">+    &#125;], &#123;</span><br><span class="line">+      context: <span class="string">&#x27;src/&#x27;</span></span><br><span class="line">+    &#125;),</span><br><span class="line">+    <span class="keyword">new</span> CopyWebpackPlugin([ <span class="comment">// 处理 main.json 里面引用的图片，不要放代码中引用的图片</span></span><br><span class="line">+      &#123;</span><br><span class="line">+        from: path.resolve(__dirname, <span class="string">&#x27;../static&#x27;</span>),</span><br><span class="line">+        to: path.resolve(__dirname, <span class="string">&#x27;../dist/static&#x27;</span>),</span><br><span class="line">+        ignore: [<span class="string">&#x27;.*&#x27;</span>]</span><br><span class="line">+      &#125;</span><br><span class="line">+    ])</span><br><span class="line">   ]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>build&#x2F;webpack.dev.conf.js</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">php复制代码module.exports = <span class="title function_ invoke__">merge</span>(baseWebpackConfig, &#123;</span><br><span class="line">   <span class="attr">devtool</span>: <span class="string">&#x27;#source-map&#x27;</span>,</span><br><span class="line">   <span class="attr">output</span>: &#123;</span><br><span class="line">     <span class="attr">path</span>: config.build.assetsRoot,</span><br><span class="line">-    <span class="attr">filename</span>: utils.<span class="title function_ invoke__">assetsPath</span>(<span class="string">&#x27;js/[name].js&#x27;</span>),</span><br><span class="line">-    <span class="attr">chunkFilename</span>: utils.<span class="title function_ invoke__">assetsPath</span>(<span class="string">&#x27;js/[id].js&#x27;</span>)</span><br><span class="line">+    <span class="attr">filename</span>: utils.<span class="title function_ invoke__">assetsPath</span>(<span class="string">&#x27;[name].js&#x27;</span>),</span><br><span class="line">+    <span class="attr">chunkFilename</span>: utils.<span class="title function_ invoke__">assetsPath</span>(<span class="string">&#x27;[id].js&#x27;</span>)</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">plugins</span>: [</span><br><span class="line">     <span class="keyword">new</span> webpack.<span class="title function_ invoke__">DefinePlugin</span>(&#123;</span><br><span class="line">    module.exports = <span class="title function_ invoke__">merge</span>(baseWebpackConfig, &#123;</span><br><span class="line">     // copy <span class="keyword">from</span> ./webpack.prod.conf.js</span><br><span class="line">     // extract css into its own file</span><br><span class="line">     <span class="keyword">new</span> <span class="title class_">ExtractTextPlugin</span>(&#123;</span><br><span class="line">-      <span class="attr">filename</span>: utils.<span class="title function_ invoke__">assetsPath</span>(<span class="string">&#x27;css/[name].wxss&#x27;</span>)</span><br><span class="line">+      <span class="attr">filename</span>: utils.<span class="title function_ invoke__">assetsPath</span>(<span class="string">&#x27;[name].wxss&#x27;</span>)</span><br><span class="line">     &#125;),</span><br><span class="line">    module.exports = <span class="title function_ invoke__">merge</span>(baseWebpackConfig, &#123;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;),</span><br><span class="line">     <span class="keyword">new</span> webpack.optimize.<span class="title function_ invoke__">CommonsChunkPlugin</span>(&#123;</span><br><span class="line">-      <span class="attr">name</span>: <span class="string">&#x27;vendor&#x27;</span>,</span><br><span class="line">+      <span class="attr">name</span>: <span class="string">&#x27;common/vendor&#x27;</span>,</span><br><span class="line">       <span class="attr">minChunks</span>: function (module, count) &#123;</span><br><span class="line">         // any required modules inside node_modules are extracted to vendor</span><br><span class="line">         <span class="keyword">return</span> (</span><br><span class="line">        module.exports = <span class="title function_ invoke__">merge</span>(baseWebpackConfig, &#123;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;),</span><br><span class="line">     <span class="keyword">new</span> webpack.optimize.<span class="title function_ invoke__">CommonsChunkPlugin</span>(&#123;</span><br><span class="line">-      <span class="attr">name</span>: <span class="string">&#x27;manifest&#x27;</span>,</span><br><span class="line">-      <span class="attr">chunks</span>: [<span class="string">&#x27;vendor&#x27;</span>]</span><br><span class="line">+      <span class="attr">name</span>: <span class="string">&#x27;common/manifest&#x27;</span>,</span><br><span class="line">+      <span class="attr">chunks</span>: [<span class="string">&#x27;common/vendor&#x27;</span>]</span><br><span class="line">     &#125;),</span><br><span class="line">-    // copy custom <span class="built_in">static</span> assets</span><br><span class="line">-    <span class="keyword">new</span> <span class="title class_">CopyWebpackPlugin</span>([</span><br><span class="line">-      &#123;</span><br><span class="line">-        <span class="attr">from</span>: path.<span class="title function_ invoke__">resolve</span>(__dirname, <span class="string">&#x27;../static&#x27;</span>),</span><br><span class="line">-        <span class="attr">to</span>: config.build.assetsSubDirectory,</span><br><span class="line">-        <span class="attr">ignore</span>: [<span class="string">&#x27;.*&#x27;</span>]</span><br><span class="line">-      &#125;</span><br><span class="line">-    ]),</span><br></pre></td></tr></table></figure><p>build&#x2F;webpack.prod.conf.js</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">php复制代码</span><br><span class="line">    <span class="keyword">var</span> webpackConfig = <span class="title function_ invoke__">merge</span>(baseWebpackConfig, &#123;</span><br><span class="line">   <span class="attr">devtool</span>: config.build.productionSourceMap ? <span class="string">&#x27;#source-map&#x27;</span> : <span class="literal">false</span>,</span><br><span class="line">   <span class="attr">output</span>: &#123;</span><br><span class="line">     <span class="attr">path</span>: config.build.assetsRoot,</span><br><span class="line">-    <span class="attr">filename</span>: utils.<span class="title function_ invoke__">assetsPath</span>(<span class="string">&#x27;js/[name].js&#x27;</span>),</span><br><span class="line">-    <span class="attr">chunkFilename</span>: utils.<span class="title function_ invoke__">assetsPath</span>(<span class="string">&#x27;js/[id].js&#x27;</span>)</span><br><span class="line">+    <span class="attr">filename</span>: utils.<span class="title function_ invoke__">assetsPath</span>(<span class="string">&#x27;[name].js&#x27;</span>),</span><br><span class="line">+    <span class="attr">chunkFilename</span>: utils.<span class="title function_ invoke__">assetsPath</span>(<span class="string">&#x27;[id].js&#x27;</span>)</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">var</span> webpackConfig = <span class="title function_ invoke__">merge</span>(baseWebpackConfig, &#123;</span><br><span class="line">     &#125;),</span><br><span class="line">     // extract css into its own file</span><br><span class="line">     <span class="keyword">new</span> <span class="title class_">ExtractTextPlugin</span>(&#123;</span><br><span class="line">-      // <span class="attr">filename</span>: utils.<span class="title function_ invoke__">assetsPath</span>(<span class="string">&#x27;css/[name].[contenthash].css&#x27;</span>)</span><br><span class="line">-      <span class="attr">filename</span>: utils.<span class="title function_ invoke__">assetsPath</span>(<span class="string">&#x27;css/[name].wxss&#x27;</span>)</span><br><span class="line">+      // <span class="attr">filename</span>: utils.<span class="title function_ invoke__">assetsPath</span>(<span class="string">&#x27;[name].[contenthash].css&#x27;</span>)</span><br><span class="line">+      <span class="attr">filename</span>: utils.<span class="title function_ invoke__">assetsPath</span>(<span class="string">&#x27;[name].wxss&#x27;</span>)</span><br><span class="line">     &#125;),</span><br><span class="line">     <span class="comment">// Compress extracted CSS. We are using this plugin so that possible</span></span><br><span class="line">     <span class="comment">// duplicated CSS from different components can be deduped.</span></span><br><span class="line">    <span class="keyword">var</span> webpackConfig = <span class="title function_ invoke__">merge</span>(baseWebpackConfig, &#123;</span><br><span class="line">     <span class="keyword">new</span> webpack.<span class="title function_ invoke__">HashedModuleIdsPlugin</span>(),</span><br><span class="line">     // split vendor js into its own file</span><br><span class="line">     <span class="keyword">new</span> webpack.optimize.<span class="title function_ invoke__">CommonsChunkPlugin</span>(&#123;</span><br><span class="line">-      <span class="attr">name</span>: <span class="string">&#x27;vendor&#x27;</span>,</span><br><span class="line">+      <span class="attr">name</span>: <span class="string">&#x27;common/vendor&#x27;</span>,</span><br><span class="line">       <span class="attr">minChunks</span>: function (module, count) &#123;</span><br><span class="line">         // any required modules inside node_modules are extracted to vendor</span><br><span class="line">         <span class="keyword">return</span> (</span><br><span class="line">     <span class="keyword">var</span> webpackConfig = <span class="title function_ invoke__">merge</span>(baseWebpackConfig, &#123;</span><br><span class="line">     // extract webpack runtime <span class="keyword">and</span> module manifest to its own file in order to</span><br><span class="line">     // prevent vendor hash <span class="keyword">from</span> being updated whenever app bundle is updated</span><br><span class="line">     <span class="keyword">new</span> webpack.optimize.<span class="title function_ invoke__">CommonsChunkPlugin</span>(&#123;</span><br><span class="line">-      <span class="attr">name</span>: <span class="string">&#x27;manifest&#x27;</span>,</span><br><span class="line">-      <span class="attr">chunks</span>: [<span class="string">&#x27;vendor&#x27;</span>]</span><br><span class="line">-    &#125;),</span><br><span class="line">+      <span class="attr">name</span>: <span class="string">&#x27;common/manifest&#x27;</span>,</span><br><span class="line">+      <span class="attr">chunks</span>: [<span class="string">&#x27;common/vendor&#x27;</span>]</span><br><span class="line">+    &#125;)</span><br><span class="line">-    // copy custom <span class="built_in">static</span> assets</span><br><span class="line">-    <span class="keyword">new</span> <span class="title class_">CopyWebpackPlugin</span>([</span><br><span class="line">-      &#123;</span><br><span class="line">-        <span class="attr">from</span>: path.<span class="title function_ invoke__">resolve</span>(__dirname, <span class="string">&#x27;../static&#x27;</span>),</span><br><span class="line">-        <span class="attr">to</span>: config.build.assetsSubDirectory,</span><br><span class="line">-        <span class="attr">ignore</span>: [<span class="string">&#x27;.*&#x27;</span>]</span><br><span class="line">-      &#125;</span><br><span class="line">-    ])</span><br><span class="line">   ]</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>config&#x2F;index.js</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">coffeescript复制代码</span><br><span class="line">module.<span class="built_in">exports</span> = &#123;</span><br><span class="line">     env: <span class="built_in">require</span>(<span class="string">&#x27;./prod.env&#x27;</span>),</span><br><span class="line">     index: path.resolve(__dirname, <span class="string">&#x27;../dist/index.html&#x27;</span>),</span><br><span class="line">     assetsRoot: path.resolve(__dirname, <span class="string">&#x27;../dist&#x27;</span>),</span><br><span class="line">-    assetsSubDirectory: <span class="string">&#x27;static&#x27;</span>, <span class="regexp">//</span> 不将资源聚合放在 static 目录下</span><br><span class="line">+    assetsSubDirectory: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">     assetsPublicPath: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">     productionSourceMap: <span class="literal">false</span>,</span><br><span class="line">     <span class="regexp">//</span> Gzip <span class="literal">off</span> <span class="keyword">by</span> <span class="keyword">default</span> <span class="keyword">as</span> many popular static hosts such <span class="keyword">as</span></span><br><span class="line">@@ <span class="number">-26</span>,<span class="number">7</span> +<span class="number">26</span>,<span class="number">7</span> @@ module.<span class="built_in">exports</span> = &#123;</span><br><span class="line">     port: <span class="number">8080</span>,</span><br><span class="line">     <span class="regexp">//</span> 在小程序开发者工具中不需要自动打开浏览器</span><br><span class="line">     autoOpenBrowser: <span class="literal">false</span>,</span><br><span class="line">-    assetsSubDirectory: <span class="string">&#x27;static&#x27;</span>, <span class="regexp">//</span> 不将资源聚合放在 static 目录下</span><br><span class="line">+    assetsSubDirectory: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">     assetsPublicPath: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">     proxyTable: &#123;&#125;,</span><br><span class="line">     <span class="regexp">//</span> CSS Sourcemaps <span class="literal">off</span> <span class="keyword">by</span> <span class="keyword">default</span> because relative paths are <span class="string">&quot;buggy&quot;</span></span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>以上内容部分来自：</p><ul><li><a href="https://link.juejin.cn/?target=https://zhuanlan.zhihu.com/p/22754296">微信小程序架构分析 (上)</a></li><li><a href="https://link.juejin.cn/?target=https://zhuanlan.zhihu.com/p/25105936">微信小程序架构解析</a></li><li><a href="https://link.juejin.cn/?target=http://daxue.qq.com/content/online/id/4107">2018微信公开课第七季上海站·小程序专场</a></li><li><a href="https://juejin.cn/post/6844903548866543623">小程序中使用iconfont</a></li><li><a href="https://link.juejin.cn/?target=http://www.infoq.com/cn/news/2018/07/wchat-miniprog-support">微信小程序的下一步：支持NPM、小程序云、可视化编程、支持分包</a></li><li><a href="https://link.juejin.cn/?target=http://mpvue.com/build/mpvue-loader/">mpvue-docs</a></li><li><a href="https://juejin.cn/post/6844903607301570568">使用Mpvue开发微信小程序的最佳实践</a></li><li><a href="https://link.juejin.cn/?target=https://tech.meituan.com/mt_mpvue_development_framework.html">用Vue.js开发微信小程序：开源框架mpvue解析</a></li><li><a href="https://link.juejin.cn/?target=https://github.com/answershuto/learnVue">learnVue</a></li></ul><p>作者：yck<br>链接：<a href="https://juejin.cn/post/6844903670589423623">https://juejin.cn/post/6844903670589423623</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>广告位</th><th>广告ID</th><th>广告来源</th></tr></thead><tbody><tr><td>地图首页gif-签到</td><td>1</td><td>众简</td></tr><tr><td>骑行中显示-移动积分兑换</td><td>2</td><td>有钱途</td></tr><tr><td>地图首页gif-移动积分兑换</td><td>3</td><td>有钱途</td></tr><tr><td>个人中心页面-签到</td><td>4</td><td>众简</td></tr><tr><td>开锁动画页面banner</td><td>5</td><td>众简</td></tr><tr><td>登录页面banner</td><td>6</td><td>众简</td></tr><tr><td>实名认证页面banner</td><td>7</td><td>众简</td></tr><tr><td>订单结束页面瀑布流广告</td><td>8</td><td>同程</td></tr><tr><td>订单结束页面插屏广告</td><td>9</td><td>众简</td></tr><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>console家族</title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[<h3 id="console系列方法"><a href="#console系列方法" class="headerlink" title="console系列方法"></a>console系列方法</h3><ol><li><p>万物皆可—log🧐<br>console.log()是一个通用的打印方案，可以用它打印任何东西，但有时候，我们需要打印对象，数组这类东西，这个就不太方便，这个时候，我们就可以用</p></li><li><p>对象数组—table🧐<br>console.table()是专门用来打印对象和数组的，他会制作成一个表格，然后很明确的可以看到里面的值</p></li><li><p>计算时间—time和timeEnd😲<br>console.time(相同名)记录开始时间</p></li></ol><p>console.timeEnd(相同名)记录结束时间</p><ol start="4"><li>红色警告—error和warn😤<br>console.error()打印报错信息</li></ol><p>console.warn()打印警告信息</p><ol start="5"><li>元素结构—dir✌<br>console.dir()对打印对象结构非常有用。</li></ol><p>例如：console.dir(document.body)</p><ol start="6"><li><p>执行次数—count✌<br>console.count()打印执行的次数，最长广泛应用于函数当中</p></li><li><p>追踪执行次数—trace🤝<br>我们知道，程序的执行次序主要是由堆栈来执行的。使用&#x3D;&#x3D;console.trace()&#x3D;&#x3D;可以追踪执行的顺序。</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// a函数调用此方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">trace</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// b调用a函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">a</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 全局调用b函数</span></span><br><span class="line"><span class="title function_">b</span>();</span><br><span class="line"></span><br><span class="line">at a (<span class="attr">C</span>:\<span class="title class_">Users</span>\<span class="variable constant_">LENOVO</span>\<span class="title class_">Desktop</span>\正则表达式\<span class="number">02</span>-正则表达式\<span class="number">04</span>.<span class="property">js</span>:<span class="number">3</span>:<span class="number">13</span>)</span><br><span class="line">at b (<span class="attr">C</span>:\<span class="title class_">Users</span>\<span class="variable constant_">LENOVO</span>\<span class="title class_">Desktop</span>\正则表达式\<span class="number">02</span>-正则表达式\<span class="number">04</span>.<span class="property">js</span>:<span class="number">7</span>:<span class="number">5</span>)</span><br><span class="line">at <span class="title class_">Object</span>.&lt;anonymous&gt; (<span class="attr">C</span>:\<span class="title class_">Users</span>\<span class="variable constant_">LENOVO</span>\<span class="title class_">Desktop</span>\正则表达式\<span class="number">02</span>-正则表达式\<span class="number">04</span>.<span class="property">js</span>:<span class="number">10</span>:<span class="number">1</span>) </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
