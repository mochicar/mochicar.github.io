<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ts快速上手</title>
      <link href="/post/a6577751.html"/>
      <url>/post/a6577751.html</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript入门"><a href="#TypeScript入门" class="headerlink" title="TypeScript入门"></a>TypeScript入门</h1><p>内容</p><p>参考链接</p><p>TypeScript（零） —— 简介、环境搭建、第一个实例</p><p><a href="https://zahuopu.blog.csdn.net/article/details/126000138">搭建开发环境</a></p><hr><h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul><li><a href="#typescript%E5%85%A5%E9%97%A8">TypeScript入门</a><ul><li><a href="#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95">文章目录</a></li><li><a href="#%E8%AE%A4%E8%AF%86-typescript">认识 TypeScript</a></li><li><a href="#typescript-%E5%B7%A5%E4%BD%9C%E6%B5%81">TypeScript 工作流</a></li><li><a href="#typescript-%E7%9A%84%E7%B1%BB%E5%9E%8B">TypeScript 的类型</a><ul><li><a href="#number-%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B">Number 数字类型</a></li><li><a href="#string-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B">String 字符串类型</a></li><li><a href="#boolean-%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B">Boolean 布尔类型</a></li><li><a href="#array-%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B">Array 数组类型</a></li><li><a href="#tuple-%E5%85%83%E7%BB%84%E7%B1%BB%E5%9E%8B">Tuple 元组类型</a></li><li><a href="#union-%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B">Union 联合类型</a></li><li><a href="#literal-%E5%AD%97%E9%9D%A2%E9%87%8F%E7%B1%BB%E5%9E%8B">Literal 字面量类型</a></li><li><a href="#enum-%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B">Enum 枚举类型</a></li><li><a href="#any-%E4%BB%BB%E6%84%8F%E7%B1%BB%E5%9E%8B">Any 任意类型</a></li><li><a href="#unknown-%E6%9C%AA%E7%9F%A5%E7%B1%BB%E5%9E%8B">unknown 未知类型</a></li><li><a href="#voidundefinednever-%E7%B1%BB%E5%9E%8B">void、undefined、never 类型</a></li><li><a href="#type-assertions-%E7%B1%BB%E5%9E%8B%E9%80%82%E9%85%8D">Type Assertions 类型适配</a></li></ul></li><li><a href="#%E6%9C%AC%E7%AB%A0%E5%B0%8F%E7%BB%93">本章小结</a></li></ul></li></ul><hr><h2 id="认识-TypeScript"><a href="#认识-TypeScript" class="headerlink" title="认识 TypeScript"></a>认识 TypeScript</h2><p>TypeScript 简介</p><blockquote><p>TypeScript 是微软开发的一个开源的编程语言，通过在 JavaScript 的基础上添加静态类型定义构建而成。</p></blockquote><p>TypeScript 的作用</p><p>我们都知道，<strong>JavaScript 是弱类型的语言</strong>，对于一些类型的限制并不是很明确。比如说我们编码一个在两个输入框中输入数字求和的加法小程序，这时候直接输入到文本框的数字会被自动转换为字符串形式，就会得到 1 + 1 &#x3D; 11 的奇怪结果。那么这个时候 TypeScript 就可以大显身手，实现 1 + 1 &#x3D; 2。</p><blockquote><p>a. 规范我们的代码<br>b. 代码编译阶段就能及时发现问题<br>c. 在原生JS基础上加上了一层类型定义</p></blockquote><h2 id="TypeScript-工作流"><a href="#TypeScript-工作流" class="headerlink" title="TypeScript 工作流"></a>TypeScript 工作流</h2><p>TSC （把 ts 文件转换为 js 文件）的作用相当于 Babel（把高级语法和代码转换为浏览器能识别的低级语法和代码）。</p><p>编译和运行参考 <a href="https://zahuopu.blog.csdn.net/article/details/126000138">TypeScript（零） —— 简介、环境搭建、第一个实例</a></p><p><img src="https://img-blog.csdnimg.cn/5b7d7d1921454fa2aeaf81206a9090d5.png" alt="在这里插入图片描述"></p><p>上图表示：ts 文件通过 tsc 命令把 ts 文件转成了 js 文件。</p><h2 id="TypeScript-的类型"><a href="#TypeScript-的类型" class="headerlink" title="TypeScript 的类型"></a>TypeScript 的类型</h2><p>相比于 JavaScript 的原始类型（基本数据类型）和对象类型（引用数据类型），TypeScript 也有自己的数据类型，内容如下：</p><blockquote><p>基本类型：boolean、string、number、array、tuple、enum、null、undefined、object、void、never、any</p></blockquote><blockquote><p>高级类型：union 组合类型、Nullable 可空类型、Literal 预定义类型</p></blockquote><p>接下来，我们对不同类型进行逐一详细的探索…</p><h3 id="Number-数字类型"><a href="#Number-数字类型" class="headerlink" title="Number 数字类型"></a>Number 数字类型</h3><p>对数字的定义只有一个笼统的 Number 表示，既能表示 <strong>整数</strong>、也能表示 <strong>浮点数</strong>，甚至也可以表示 <strong>正负数</strong>。例如：1，3.3，-5 等等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">6</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">n1: number, n2: number</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n1 + n2</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(num1, num2))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之后终端执行 <code>tsc main.ts</code> 和 <code>node main.js</code>，可以得出结果 <code>8</code>。</p><h3 id="String-字符串类型"><a href="#String-字符串类型" class="headerlink" title="String 字符串类型"></a>String 字符串类型</h3><p>与 JavaScript 书写方式及使用方法均一致。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;前端杂货铺&#x27;</span></span><br><span class="line"><span class="string">&quot;前端杂货铺&quot;</span></span><br><span class="line"><span class="string">`前端杂货铺`</span></span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">``</span><span class="string">``</span>javascript</span><br><span class="line"><span class="keyword">let</span> <span class="attr">myName</span>: string = <span class="string">&quot;前端杂货铺&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;myName&#x27;</span>, myName)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之后终端执行 <code>tsc main.ts</code> 和 <code>node main.js</code>，可以得出以下结果。</p><p><img src="https://img-blog.csdnimg.cn/4e8e97379f16492ca3b37672937d8130.png" alt="在这里插入图片描述"></p><h3 id="Boolean-布尔类型"><a href="#Boolean-布尔类型" class="headerlink" title="Boolean 布尔类型"></a>Boolean 布尔类型</h3><p>表示真、假，常用于处理判断逻辑。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">isTrue</span>: boolean = <span class="literal">true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isTure&#x27;</span>, isTrue)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之后终端执行 <code>tsc main.ts</code> 和 <code>node main.js</code>，可以得出以下结果。</p><p><img src="https://img-blog.csdnimg.cn/9b4c81d6c5cb4658b60a8da5aa07786b.png" alt="在这里插入图片描述"></p><h3 id="Array-数组类型"><a href="#Array-数组类型" class="headerlink" title="Array 数组类型"></a>Array 数组类型</h3><p>数组中可以存放任意类型的数据，JS中数组的宽容度非常大，TS也继承了这一点。</p><p>以下三种写法（list1、list2、list3）表示的完全一致，鼠标移动至 list 上编译器均提示 <code>number[]</code>，表示数字类型。</p><p><img src="https://img-blog.csdnimg.cn/18dd86617db740168e576f87dfc863f4.png" alt="在这里插入图片描述"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">list1</span>: number[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">list2</span>: <span class="title class_">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> list3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面的 list 4 为 (string | number)[]，表示字符串和数字类型。</p><p><img src="https://img-blog.csdnimg.cn/ace86d03b03b438bae260d34bf7b6344.png" alt="在这里插入图片描述"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list4 = [<span class="number">1</span>, <span class="string">&#x27;前端杂货铺&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面的 list 5 为 any[]，表示任意类型。</p><p><img src="https://img-blog.csdnimg.cn/a0d3a352b9894d1789d55fdf1bb36ac3.png" alt="在这里插入图片描述"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">list5</span>: any[] = [<span class="number">1</span>, <span class="string">&#x27;前端杂货铺&#x27;</span>, <span class="literal">true</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Tuple-元组类型"><a href="#Tuple-元组类型" class="headerlink" title="Tuple 元组类型"></a>Tuple 元组类型</h3><p>固定长度，固定类型的 Array，声明元组的时候一定要事先指定类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: [number, string] = [<span class="number">1</span>, <span class="string">&quot;前端杂货铺&quot;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时，元组的长度和类型都被固定住了，当我们尝试修改元素的长度和类型都会报错。</p><p><img src="https://img-blog.csdnimg.cn/329278ba86ec45428d1b5d39f8123a5c.png" alt="在这里插入图片描述"></p><p><strong>注：元组类型有一个 Bug，可以调用 push() 方法改变元组的长度。</strong></p><h3 id="Union-联合类型"><a href="#Union-联合类型" class="headerlink" title="Union 联合类型"></a>Union 联合类型</h3><p>联合类型表示一个变量同时支持两个或者多个不同的类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> union : string | number</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d46e7e59a60549f68f3a33b22ca98fbf.png" alt="在这里插入图片描述"></p><h3 id="Literal-字面量类型"><a href="#Literal-字面量类型" class="headerlink" title="Literal 字面量类型"></a>Literal 字面量类型</h3><p>可以混合使用不同的类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> literal : <span class="number">1</span> | <span class="string">&quot;前端杂货铺&quot;</span> | <span class="literal">true</span> | [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>示例：merge 求和（分为数字和字符串两种方式）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">n1: number | string, n2: number | string, resultType: <span class="string">&quot;as-number&quot;</span> | <span class="string">&quot;as-string&quot;</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (resultType === <span class="string">&#x27;as-string&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n1.<span class="title function_">toString</span>() + n2.<span class="title function_">toString</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> n1 === <span class="string">&quot;string&quot;</span> || <span class="keyword">typeof</span> n2 === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n1.<span class="title function_">toString</span>() + n2.<span class="title function_">toString</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n1 + n2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mergeNumber1 = <span class="title function_">merge</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;as-number&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> mergeNumber2 = <span class="title function_">merge</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;as-string&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> mergeString = <span class="title function_">merge</span>(<span class="string">&quot;前端&quot;</span>, <span class="string">&quot;杂货铺&quot;</span>, <span class="string">&quot;as-string&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mergeNumber1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mergeNumber2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mergeString)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之后终端执行 <code>tsc main.ts</code> 和 <code>node main.js</code>，可以得出以下结果。</p><p><img src="https://img-blog.csdnimg.cn/adfbfc44f3d2458190412282763ed30b.png" alt="在这里插入图片描述"></p><h3 id="Enum-枚举类型"><a href="#Enum-枚举类型" class="headerlink" title="Enum 枚举类型"></a>Enum 枚举类型</h3><p>枚举允许我们定义一组命名的常量。<strong>默认情况下</strong>，我们获取到对象的某个属性打印出来的是该属性的<strong>索引</strong>，神奇的是，我们可以 <strong>给对象里面的属性赋值</strong>，这时候再获取到对象的某个属性时打印出来的就是 <strong>我们给属性赋的值</strong> 了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">enum <span class="title class_">Color</span> &#123;</span><br><span class="line">    red,</span><br><span class="line">    yellow = <span class="string">&#x27;黄色&#x27;</span>,</span><br><span class="line">    blue = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> color1 = <span class="title class_">Color</span>.<span class="property">red</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(color1)</span><br><span class="line"><span class="keyword">let</span> color2 = <span class="title class_">Color</span>.<span class="property">blue</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(color2)</span><br><span class="line"><span class="keyword">let</span> color3 = <span class="title class_">Color</span>.<span class="property">yellow</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(color3)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之后终端执行 <code>tsc main.ts</code> 和 <code>node main.js</code>，可以得出以下结果。</p><p><img src="https://img-blog.csdnimg.cn/0ebba57921864bd1a30ce4a6a674c367.png" alt="在这里插入图片描述"></p><h3 id="Any-任意类型"><a href="#Any-任意类型" class="headerlink" title="Any 任意类型"></a>Any 任意类型</h3><p>Any 这个类型可以让我们随意定义类型，当我们“懒得”定义复杂类型结构的时候，可以合理的使用它。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">randomValue</span>: any = <span class="number">123</span></span><br><span class="line">randomValue = <span class="literal">true</span></span><br><span class="line">randomValue = <span class="string">&quot;前端杂货铺&quot;</span></span><br><span class="line">randomValue = &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="unknown-未知类型"><a href="#unknown-未知类型" class="headerlink" title="unknown 未知类型"></a>unknown 未知类型</h3><p>unknown 不保证类型，但 <strong>可以保证类型安全</strong>，当我们出现错误编码时（下面的数字 123 不能调用 toUpperCase() 方法），使用 unknow 编译器会有报错提示。</p><p><img src="https://img-blog.csdnimg.cn/791317f9ddcd48648bdd1eb99c7f65fa.png" alt="在这里插入图片描述"></p><p>我们可以做出以下适配，让编译器不报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">randomValue</span>: unknown = <span class="number">123</span></span><br><span class="line">randomValue = <span class="literal">true</span></span><br><span class="line">randomValue = <span class="string">&quot;前端杂货铺&quot;</span></span><br><span class="line">randomValue = &#123;&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> randomValue === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">randomValue</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> randomValue === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    randomValue.<span class="title function_">toUpperCase</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="void、undefined、never-类型"><a href="#void、undefined、never-类型" class="headerlink" title="void、undefined、never 类型"></a>void、undefined、never 类型</h3><p>不存在时用 void，undefined 表示必须存在但可以不赋值，永远不会执行完时用 never。</p><p>此时使用了 void（默认就是 void，可加可不加），不添加返回值也一切正常。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printResult</span>(<span class="params"></span>) : <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;前端杂货铺&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>, <span class="title function_">printResult</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之后终端执行 <code>tsc main.ts</code> 和 <code>node main.js</code>，可以得出以下结果。</p><p><img src="https://img-blog.csdnimg.cn/bc75f30833de483c81778c84a7eb3669.png" alt="在这里插入图片描述"></p><p>此时使用了 undefined，函数体里面必须有返回值，我们可以在函数体内添加 return，不然会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printResult</span>(<span class="params"></span>) : <span class="literal">undefined</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;前端杂货铺&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>, <span class="title function_">printResult</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之后终端执行 <code>tsc main.ts</code> 和 <code>node main.js</code>，可以得出以下结果。</p><p><img src="https://img-blog.csdnimg.cn/bc75f30833de483c81778c84a7eb3669.png" alt="在这里插入图片描述"></p><p>此时使用了 never，一般用在抛出异常或者 promise 中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throwError</span>(<span class="params">message: string, errorCode: number</span>): never &#123;</span><br><span class="line">    <span class="keyword">throw</span> &#123;</span><br><span class="line">        message,</span><br><span class="line">        errorCode</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">throwError</span>(<span class="string">&quot;not found&quot;</span>, <span class="number">404</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">``</span><span class="string">``</span>javascript</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">whileLoop</span>(<span class="params"></span>): never &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;前端杂货铺&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Type-Assertions-类型适配"><a href="#Type-Assertions-类型适配" class="headerlink" title="Type Assertions 类型适配"></a>Type Assertions 类型适配</h3><p>第一个 endsWith() 出现的地方编译器是不会自动提示补全的，因为此时的类型还是 any，而不是 string，我们可以使用 endsWith() 在下面代码中第二次和第三次出现的地方的方式进行类型适配，便可以实现自动补全（在我们刚开始不明确类型，而后面明确类型后就可以使用这种类型适配的方式）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message : any</span><br><span class="line">message = <span class="string">&quot;前端杂货铺&quot;</span></span><br><span class="line">message.<span class="title function_">endsWith</span>(<span class="string">&quot;铺&quot;</span>)</span><br><span class="line"></span><br><span class="line">(&lt;string&gt;message).<span class="title function_">endsWith</span>(<span class="string">&quot;铺&quot;</span>)</span><br><span class="line">(message <span class="keyword">as</span> string).<span class="title function_">endsWith</span>(<span class="string">&quot;铺&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h2><p>存在即合理，TypeScript 的出现自有它的用途。TypeScript 作为 JavaScript 的超集，对 JavaScript 进行了一些列约束，使得弱类型的 JavaScript 变成强类型，这就会使得代码更清晰、可读性更高、提高了代码的可读性和可维护性，更适合开发大型应用。</p><p>结合 Vue3 对 TypeScript 更好的包容性，使用 Vue3 + TS 构建大、中、小型应用便成了一种大趋势…</p><hr><blockquote><p>参考资料：</p><ol><li>TypeScript 百度百科</li><li>TypeScript 入门讲解 【作者：阿莱克斯刘】</li></ol></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>fetch和ajax的区别</title>
      <link href="/post/692db637.html"/>
      <url>/post/692db637.html</url>
      
        <content type="html"><![CDATA[<p><strong>一、写在前面</strong><br>今天总结一下<code>fetch</code>和<code>ajax</code>的区别。<br><strong>二、Ajax</strong><br><code>ajax</code>的本质就是使用<code>XMLHttpRequest</code>对象来请求数据，下面是简单的原生js实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">url, fnSucc, fnFaild</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//1.创建Ajax对象</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>)&#123;</span><br><span class="line">       <span class="keyword">var</span> oAjax=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="keyword">var</span> oAjax=<span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.连接服务器（打开和服务器的连接）</span></span><br><span class="line">    oAjax.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.发送</span></span><br><span class="line">    oAjax.<span class="title function_">send</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.接收</span></span><br><span class="line">    oAjax.<span class="property">onreadystatechange</span>=<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">       <span class="keyword">if</span>(oAjax.<span class="property">readyState</span>==<span class="number">4</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span>(oAjax.<span class="property">status</span>==<span class="number">200</span>)&#123;</span><br><span class="line">              <span class="comment">//alert(&#x27;成功了：&#x27;+oAjax.responseText);</span></span><br><span class="line">              <span class="title function_">fnSucc</span>(oAjax.<span class="property">responseText</span>);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              <span class="comment">//alert(&#x27;失败了&#x27;);</span></span><br><span class="line">              <span class="keyword">if</span>(fnFaild)&#123;</span><br><span class="line">                  <span class="title function_">fnFaild</span>();</span><br><span class="line">              &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>三、fetch</strong><br><code>fetch</code>是全局量<code>window</code>的一个方法，它的主要特点有：<br><code>1、第一个参数是URL</code>.<br><code>2、第二个参数是可选参数，可以控制不同的配置的init对象。</code><br><code>3、使用了JavaScript Promises来处理结果/回调。</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&#x27;http://123.207.32.32:8000/home/multidata&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">      <span class="keyword">return</span> response.<span class="title function_">json</span>()</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">returnedValue</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(returnedValue)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>四、fetch和ajax主要有两种方式不同</strong><br><code>4.1、</code>从<code>fetch()</code>返回的<code>Promise</code>将不会拒绝<code>http</code>错误状态，即使相应是一个相应是<code>400</code>或者<code>500</code>,它都会安装正常的去解决，并且仅在网络故障时或者任何阻止请求完成时，它才会拒绝，可以做简单的封装。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkStatus</span>(<span class="params">response</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (response.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; response.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> error = <span class="keyword">new</span> <span class="title class_">Error</span>(response.<span class="property">statusText</span>)</span><br><span class="line">    error.<span class="property">response</span> = response</span><br><span class="line">    <span class="keyword">throw</span> error</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">parseJSON</span>(<span class="params">response</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> response.<span class="title function_">json</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;/users&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(checkStatus)</span><br><span class="line">  .<span class="title function_">then</span>(parseJSON)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;request succeeded with JSON response&#x27;</span>, data)</span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;request failed&#x27;</span>, error)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>4.2、</code>默认情况下，<code>fetch</code>在不会接受和发送<code>cookie</code>，如果需要发送<code>cookie</code>的话，此时需要对其单独进行配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(url, &#123;</span><br><span class="line"><span class="attr">credentials</span>: <span class="string">&#x27;same-origin&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>same-origin</code>值使得<code>fetch</code>处理<code>cookie</code>与<code>XMLHTTPRequest</code>类似。否则，<code>cookie</code>将不会被发送，导致这些请求不保留认证会话。<br>对于<code>cors</code>请求，使用<code>include</code>值允许将凭证发送到其他域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(url, &#123;</span><br><span class="line"><span class="attr">credentials</span>:<span class="string">&#x27;include&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="fetch的-post基本语法"><a href="#fetch的-post基本语法" class="headerlink" title="fetch的 post基本语法"></a>fetch的 post基本语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;请求地址&quot;</span>,&#123;</span><br><span class="line">   <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">   <span class="attr">headers</span>: &#123;</span><br><span class="line"> <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">  <span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;Bearer 用户的token&quot;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">body</span>: <span class="string">&quot;请求参数&quot;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(*res* =&gt; res.<span class="title function_">json</span>()).<span class="title function_">then</span>(*data*=&gt;&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">*err*</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>console的常见方法</title>
      <link href="/post/de8f3828.html"/>
      <url>/post/de8f3828.html</url>
      
        <content type="html"><![CDATA[<hr><p>title: console家族<br>abbrlink: ‘0’</p><hr><h3 id="console系列方法"><a href="#console系列方法" class="headerlink" title="console系列方法"></a>console系列方法</h3><ol><li><p>万物皆可—log🧐<br>console.log()是一个通用的打印方案，可以用它打印任何东西，但有时候，我们需要打印对象，数组这类东西，这个就不太方便，这个时候，我们就可以用</p></li><li><p>对象数组—table🧐<br>console.table()是专门用来打印对象和数组的，他会制作成一个表格，然后很明确的可以看到里面的值</p></li><li><p>计算时间—time和timeEnd😲<br>console.time(相同名)记录开始时间</p></li></ol><p>console.timeEnd(相同名)记录结束时间</p><ol start="4"><li>红色警告—error和warn😤<br>console.error()打印报错信息</li></ol><p>console.warn()打印警告信息</p><ol start="5"><li>元素结构—dir✌<br>console.dir()对打印对象结构非常有用。</li></ol><p>例如：console.dir(document.body)</p><ol start="6"><li><p>执行次数—count✌<br>console.count()打印执行的次数，最长广泛应用于函数当中</p></li><li><p>追踪执行次数—trace🤝<br>我们知道，程序的执行次序主要是由堆栈来执行的。使用&#x3D;&#x3D;console.trace()&#x3D;&#x3D;可以追踪执行的顺序。</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// a函数调用此方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">trace</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// b调用a函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">a</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 全局调用b函数</span></span><br><span class="line"><span class="title function_">b</span>();</span><br><span class="line"></span><br><span class="line">at a (<span class="attr">C</span>:\<span class="title class_">Users</span>\<span class="variable constant_">LENOVO</span>\<span class="title class_">Desktop</span>\正则表达式\<span class="number">02</span>-正则表达式\<span class="number">04</span>.<span class="property">js</span>:<span class="number">3</span>:<span class="number">13</span>)</span><br><span class="line">at b (<span class="attr">C</span>:\<span class="title class_">Users</span>\<span class="variable constant_">LENOVO</span>\<span class="title class_">Desktop</span>\正则表达式\<span class="number">02</span>-正则表达式\<span class="number">04</span>.<span class="property">js</span>:<span class="number">7</span>:<span class="number">5</span>)</span><br><span class="line">at <span class="title class_">Object</span>.&lt;anonymous&gt; (<span class="attr">C</span>:\<span class="title class_">Users</span>\<span class="variable constant_">LENOVO</span>\<span class="title class_">Desktop</span>\正则表达式\<span class="number">02</span>-正则表达式\<span class="number">04</span>.<span class="property">js</span>:<span class="number">10</span>:<span class="number">1</span>) </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>小程序canvas2d实现电子签名</title>
      <link href="/post/d3aa27e1.html"/>
      <url>/post/d3aa27e1.html</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序新版canvas2d实现电子签名"><a href="#微信小程序新版canvas2d实现电子签名" class="headerlink" title="微信小程序新版canvas2d实现电子签名"></a>微信小程序新版canvas2d实现电子签名</h1><p><strong>效果</strong>： <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e0ce14702d9341ab932ce57f544c68a9~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="image.png"></p><p><strong>简单说明</strong>： 由于 canvas2D 的实例需要获取到 canvas 的容器元素，因此我们最早只能在页面 <code>onReady</code> 中调用初始化函数，如果在 <code>onLoad</code> 或者 <code>onShow</code> 中调用该函数，则无法获取到 canvas 容器元素</p><p>触摸开始的时候和旧版的canvas 接口是一样的，需要 <code>moveTo</code> 到起始点</p><p>在 canvas2D 绘制的时候和旧版的 canvas 不同：canvas2D 只需要 <code>lineTo() &gt; stroke() &gt; moveTo()</code> 即可，不需要显式的调用 <code>draw()</code> 方法，如下图动图中显式的效果，要不旧版的 canvas 更为细腻</p><p>完整代码如下： <strong>wxml</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas <span class="attr">id</span>=<span class="string">&quot;myCanvas&quot;</span> type=<span class="string">&quot;2d&quot;</span> class=<span class="string">&quot;canvas&quot;</span> style=<span class="string">&quot;width:&#123;&#123;width+&#x27;px&#x27;&#125;&#125;;height:&#123;&#123;height+&#x27;px&#x27;&#125;&#125;&quot;</span> catchtouchstart=<span class="string">&quot;catchtouchstart&quot;</span> catchtouchmove=<span class="string">&quot;catchtouchmove&quot;</span> catchtouchend=<span class="string">&quot;catchtouchend&quot;</span>&gt;&lt;/canvas&gt;</span><br><span class="line">&lt;view <span class="attr">class</span>=<span class="string">&quot;btn-reset&quot;</span> catchtap=<span class="string">&quot;clearCanvas&quot;</span>&gt;重新签名&lt;/view&gt;</span><br><span class="line">&lt;view <span class="attr">class</span>=<span class="string">&quot;btn-ok&quot;</span> catchtap=<span class="string">&quot;canvasToImg&quot;</span>&gt;确认&lt;/view&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>wxss</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">page&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f2f2f2</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">canvas</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.myCanvas</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-reset</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">130</span>rpx;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">30</span>rpx;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">180</span>rpx;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8</span>rpx;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1</span>rpx solid <span class="number">#4965B3</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#4965B3</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">24</span>rpx;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-ok</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">130</span>rpx;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">30</span>rpx;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">30</span>rpx;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8</span>rpx;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#4965B3</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1</span>rpx solid <span class="number">#4965B3</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">24</span>rpx;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>js</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    canvas:null,</span><br><span class="line">    ctx: null,</span><br><span class="line">    width: 385,</span><br><span class="line">    height: 650,</span><br><span class="line">    drawCount: 0,</span><br><span class="line">    drawState: &quot;init&quot;,</span><br><span class="line">    points:<span class="section">[]</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    initCanvas() &#123;</span><br><span class="line">      wx.nextTick(()=&gt;&#123;</span><br><span class="line">        const <span class="attr">query</span> = wx.createSelectorQuery().in(this)</span><br><span class="line">        query.select(&#x27;<span class="comment">#myCanvas&#x27;)</span></span><br><span class="line">        .fields(&#123; node: true, size: true &#125;)</span><br><span class="line">        .exec((res) =&gt; &#123;</span><br><span class="line">            // Canvas 对象</span><br><span class="line">            const <span class="attr">canvas</span> = res[<span class="number">0</span>].node</span><br><span class="line">            // Canvas 画布的实际绘制宽高</span><br><span class="line">            const <span class="attr">renderWidth</span> = res[<span class="number">0</span>].width</span><br><span class="line">            const <span class="attr">renderHeight</span> = res[<span class="number">0</span>].height</span><br><span class="line">            // Canvas 绘制上下文</span><br><span class="line">            const <span class="attr">ctx</span> = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">            <span class="attr">this.data.ctx</span> = ctx</span><br><span class="line">            <span class="attr">this.data.canvas</span> = canvas</span><br><span class="line"></span><br><span class="line">            // 初始化画布大小</span><br><span class="line">            const <span class="attr">dpr</span> = wx.getWindowInfo().pixelRatio</span><br><span class="line">            <span class="attr">canvas.width</span> = renderWidth * dpr</span><br><span class="line">            <span class="attr">canvas.height</span> = renderHeight * dpr</span><br><span class="line">            ctx.scale(dpr, dpr)</span><br><span class="line">            this.clearCanvas()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    clearCanvas() &#123;</span><br><span class="line">      const &#123; ctx,canvas &#125; = this.data</span><br><span class="line">      <span class="attr">this.data.drawCount</span> = <span class="number">0</span></span><br><span class="line">      <span class="attr">this.data.drawState</span> = <span class="string">&quot;ing&quot;</span></span><br><span class="line">      <span class="attr">ctx.textBaseline</span> = <span class="string">&#x27;top&#x27;</span></span><br><span class="line">      <span class="attr">ctx.textAlign</span> = <span class="string">&#x27;center&#x27;</span></span><br><span class="line">      <span class="attr">ctx.fontSize</span> = <span class="string">&#x27;20&#x27;</span></span><br><span class="line">      <span class="attr">ctx.font</span> = <span class="string">&#x27;24px red&#x27;</span></span><br><span class="line">      <span class="attr">ctx.fillStyle</span> = <span class="string">&#x27;#fff&#x27;</span></span><br><span class="line">      ctx.fillRect(0, 0, canvas.width, canvas.height)</span><br><span class="line">      <span class="attr">ctx.fillStyle</span> = <span class="string">&#x27;#616165&#x27;</span></span><br><span class="line">      ctx.fillText(&quot;请在区域内完成签名&quot;, this.data.width / 2, this.data.height/2 - 40)</span><br><span class="line">    &#125;,</span><br><span class="line">    catchtouchstart(e) &#123;</span><br><span class="line">      const &#123; canvas &#125; = this.data</span><br><span class="line">      if (<span class="attr">this.data.drawCount</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        this.data.ctx.beginPath()</span><br><span class="line">        this.data.ctx.clearRect(0,0,canvas.width,canvas.height)</span><br><span class="line">      &#125;</span><br><span class="line">      this.data.drawCount++</span><br><span class="line">      this.data.ctx.moveTo(e.changedTouches<span class="section">[0]</span>.clientX, e.changedTouches<span class="section">[0]</span>.clientY)</span><br><span class="line">    &#125;,</span><br><span class="line">    catchtouchmove(e) &#123;</span><br><span class="line">      const &#123; ctx &#125; = this.data</span><br><span class="line">      if (<span class="attr">this.data.drawState</span> == <span class="string">&quot;stop&quot;</span>) return</span><br><span class="line">      <span class="attr">this.data.drawState</span> = <span class="string">&quot;ing&quot;</span></span><br><span class="line">      if (e.touches.length &gt; 1) &#123;</span><br><span class="line">        return</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="attr">ctx.strokeStyle</span> = <span class="string">&#x27;#000000&#x27;</span><span class="comment">;</span></span><br><span class="line">      <span class="attr">ctx.LineWidth</span> = <span class="number">4</span><span class="comment">;</span></span><br><span class="line">      <span class="attr">ctx.shadowOffsetX</span> = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">      <span class="attr">ctx.shadowOffsetY</span> = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">      <span class="attr">ctx.shadowColor</span> = <span class="string">&#x27;#000000&#x27;</span><span class="comment">;</span></span><br><span class="line">      <span class="attr">ctx.shadowBlur</span> = <span class="number">1</span><span class="comment">;</span></span><br><span class="line">      <span class="attr">ctx.lineCap</span> = <span class="string">&#x27;round&#x27;</span><span class="comment">;</span></span><br><span class="line">      <span class="attr">ctx.lineJoin</span> = <span class="string">&#x27;round&#x27;</span><span class="comment">;</span></span><br><span class="line">      ctx.lineTo(e.changedTouches<span class="section">[0]</span>.clientX, e.changedTouches<span class="section">[0]</span>.clientY)</span><br><span class="line">      ctx.stroke()</span><br><span class="line">      ctx.moveTo(e.changedTouches<span class="section">[0]</span>.clientX, e.changedTouches<span class="section">[0]</span>.clientY)</span><br><span class="line">    &#125;,</span><br><span class="line">    catchtouchend(e) &#123;</span><br><span class="line">      <span class="attr">this.data.points</span> = []</span><br><span class="line">    &#125;,</span><br><span class="line">    canvasToImg() &#123;</span><br><span class="line">      const &#123; canvas &#125; = this.data</span><br><span class="line">      if (<span class="attr">this.data.drawState</span> == <span class="string">&quot;init&quot;</span>) return</span><br><span class="line">      <span class="attr">this.data.drawState</span> = <span class="string">&quot;stop&quot;</span></span><br><span class="line">      wx.canvasToTempFilePath(&#123;</span><br><span class="line">        canvas: canvas,</span><br><span class="line">        success: (res) =&gt; &#123;</span><br><span class="line">          console.log(res.tempFilePath)</span><br><span class="line">        &#125;,</span><br><span class="line">        fail(rej)&#123;</span><br><span class="line">          console.log(rej)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  pageLifetimes:&#123;</span><br><span class="line">    show: function () &#123;</span><br><span class="line">      this.initCanvas()</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用vite构建项目</title>
      <link href="/post/e7e9df67.html"/>
      <url>/post/e7e9df67.html</url>
      
        <content type="html"><![CDATA[<h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul><li><a href="#1-%E5%AE%89%E8%A3%85vite%E8%84%9A%E6%89%8B%E6%9E%B6">1. 安装vite脚手架</a><ul><li><a href="#11-%E4%B8%8B%E8%BD%BDvite">1.1 下载vite</a></li><li><a href="#12-%E5%88%9B%E5%BB%BAvue%E9%A1%B9%E7%9B%AE">1.2 创建vue项目</a></li><li><a href="#13-%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8--viteconfigts-">1.3 配置代理服务器 ( vite.config.ts )</a></li></ul></li><li><a href="#2-%E5%88%9B%E5%BB%BA%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6-indexhtml-">2. 创建入口文件( index.html )</a></li><li><a href="#3-%E5%88%9B%E5%BB%BA%E7%B3%BB%E7%BB%9F%E5%85%A5%E5%8F%A3%E9%A1%B5%E9%9D%A2-appvue-">3. 创建系统入口页面( app.vue )</a></li><li><a href="#4-%E5%88%9B%E5%BB%BA%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%85%A5%E5%8F%A3-maints-">4. 创建系统启动入口( main.ts )</a></li><li><a href="#5-%E9%85%8D%E7%BD%AEpinia">5. 配置pinia</a><ul><li><a href="#51-%E5%88%9B%E5%BB%BApinia-stores%E6%96%87%E4%BB%B6-">5.1 创建pinia( stores文件 )</a></li><li><a href="#52-%E6%8C%82%E8%BD%BDpinia--maints-">5.2 挂载pinia ( main.ts )</a></li><li><a href="#53-%E4%BD%BF%E7%94%A8pinia--%E7%BB%84%E4%BB%B6%E4%B8%AD-">5.3 使用pinia ( 组件中 )</a></li></ul></li><li><a href="#6-%E9%85%8D%E7%BD%AE%E8%B7%AF%E7%94%B1">6. 配置路由</a><ul><li><a href="#61-%E5%88%9B%E5%BB%BA%E8%B7%AF%E7%94%B1%E8%A1%A8-routerts-">6.1 创建路由表( router.ts )</a></li><li><a href="#62-%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB--routerts-">6.2 路由守卫 ( router.ts )</a></li><li><a href="#63-%E6%8C%82%E8%BD%BD%E8%B7%AF%E7%94%B1--maints-">6.3 挂载路由 ( main.ts )</a></li><li><a href="#64-%E8%B7%AF%E7%94%B1%E6%98%BE%E7%A4%BA--appvue-">6.4 路由显示 ( app.vue )</a></li></ul></li><li><a href="#7%E9%85%8D%E7%BD%AEapi">7.配置API</a><ul><li><a href="#71-%E5%88%9B%E5%BB%BAaxios%E5%AE%9E%E4%BE%8B--apits-">7.1 创建axios实例 ( api.ts )</a></li><li><a href="#72-%E5%88%9B%E5%BB%BA%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E6%8B%A6%E6%88%AA%E5%99%A8--apits-">7.2 创建请求和响应拦截器 ( api.ts )</a></li><li><a href="#73-%E4%BD%BF%E7%94%A8api--%E7%BB%84%E4%BB%B6%E4%B8%AD-">7.3 使用API ( 组件中 )</a></li></ul></li></ul><h1 id="1-安装vite脚手架"><a href="#1-安装vite脚手架" class="headerlink" title="1. 安装vite脚手架"></a>1. 安装vite脚手架</h1><h3 id="1-1-下载vite"><a href="#1-1-下载vite" class="headerlink" title="1.1 下载vite"></a>1.1 下载vite</h3><blockquote><p>终端输入<code>npm init vue@latest</code></p></blockquote><h3 id="1-2-创建vue项目"><a href="#1-2-创建vue项目" class="headerlink" title="1.2 创建vue项目"></a>1.2 创建vue项目</h3><blockquote><p>依次按需求选择图中打勾的插件;选择完后,依次执行最底下的三条命令<br><img src="https://img-blog.csdnimg.cn/1e6b359eca1a4bf2bd2fdbb07ae37175.png#pic_center" alt="在这里插入图片描述"><br>安装完后的项目结构<br><img src="https://img-blog.csdnimg.cn/02e800e7cff541b593a98459bb9ec877.png#pic_center" alt="项目结构"></p></blockquote><h3 id="1-3-配置代理服务器-vite-config-ts"><a href="#1-3-配置代理服务器-vite-config-ts" class="headerlink" title="1.3 配置代理服务器 ( vite.config.ts )"></a>1.3 配置代理服务器 ( vite.config.ts )</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;<span class="comment">// 配置需要代理的路径 --&gt; 这里的意思是代理http://localhost:80/api/后的所有路由</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://httpbin.org&#x27;</span>,<span class="comment">// 目标地址 --&gt; 服务器地址</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,<span class="comment">// 允许跨域</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-创建入口文件-index-html"><a href="#2-创建入口文件-index-html" class="headerlink" title="2. 创建入口文件( index.html )"></a>2. 创建入口文件( index.html )</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/favicon.ico&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vite App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 根组件容器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 引入系统启动入口js文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/src/main.ts&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-创建系统入口页面-app-vue"><a href="#3-创建系统入口页面-app-vue" class="headerlink" title="3. 创建系统入口页面( app.vue )"></a>3. 创建系统入口页面( app.vue )</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- html代码 --&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//js代码</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="comment">/*局部css样式 */</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4-创建系统启动入口-main-ts"><a href="#4-创建系统启动入口-main-ts" class="headerlink" title="4. 创建系统启动入口( main.ts )"></a>4. 创建系统启动入口( main.ts )</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> 导入全局css样式</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./assets/main.css&#x27;</span></span><br><span class="line"><span class="comment">// 导入创建vue应用的函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入根组件容器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建根组件</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载根组件</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="5-配置pinia"><a href="#5-配置pinia" class="headerlink" title="5. 配置pinia"></a>5. 配置pinia</h1><h3 id="5-1-创建pinia-stores文件"><a href="#5-1-创建pinia-stores文件" class="headerlink" title="5.1 创建pinia( stores文件 )"></a>5.1 创建pinia( stores文件 )</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入ref、computed函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//导入创建pinia的函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建pinia并导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//ref()是state属性</span></span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//computed()是getters属性</span></span><br><span class="line">  <span class="keyword">const</span> doubleCount = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//function()是actions属性</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    count.<span class="property">value</span>++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//返回状态，供其他文件调用</span></span><br><span class="line">  <span class="keyword">return</span> &#123; count, doubleCount, increment &#125;</span><br><span class="line">&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//pinia数据持久化</span></span><br><span class="line">    <span class="attr">persist</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main.js</p><h3 id="5-2-挂载pinia-main-ts"><a href="#5-2-挂载pinia-main-ts" class="headerlink" title="5.2 挂载pinia ( main.ts )"></a>5.2 挂载pinia ( main.ts )</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入创建vue应用的函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入创建pinia的函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="comment">//导入pinia持久化插件</span></span><br><span class="line"><span class="keyword">import</span> piniaPluginPersistedstate <span class="keyword">from</span> <span class="string">&#x27;pinia-plugin-persistedstate&#x27;</span></span><br><span class="line"><span class="comment">// 导入根组件容器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建根组件</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="comment">// 创建pinia</span></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//pinia挂载数据持久化插件</span></span><br><span class="line">pinia.<span class="title function_">use</span>(piniaPluginPersistedstate)</span><br><span class="line"><span class="comment">// 挂载pinia</span></span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br><span class="line"><span class="comment">// 挂载根组件</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-3-使用pinia-组件中"><a href="#5-3-使用pinia-组件中" class="headerlink" title="5.3 使用pinia ( 组件中 )"></a>5.3 使用pinia ( 组件中 )</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//导入pinia</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;./stores/counter&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//导入ref函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 使用pinia</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> counterStore = <span class="title function_">useCounterStore</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//创建响应式数据,以pinia中的数据为初始值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> count = <span class="title function_">ref</span>(counterStore.<span class="property">count</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">btn</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  count.<span class="property">value</span>++</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//把更新后的数据存储到pinia中</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  counterStore.<span class="property">count</span> = count.<span class="property">value</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="comment">/*局部css样式 */</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="6-配置路由"><a href="#6-配置路由" class="headerlink" title="6. 配置路由"></a>6. 配置路由</h1><h3 id="6-1-创建路由表-router-ts"><a href="#6-1-创建路由表-router-ts" class="headerlink" title="6.1 创建路由表( router.ts )"></a>6.1 创建路由表( router.ts )</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">//一级路由</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/Login.vue&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/Main.vue&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//路由重定向</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">redirect</span>: <span class="string">&#x27;/main&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-2-路由守卫-router-ts"><a href="#6-2-路由守卫-router-ts" class="headerlink" title="6.2 路由守卫 ( router.ts )"></a>6.2 路由守卫 ( router.ts )</h3><ul><li>全局前置守卫</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to：要去的路由</span></span><br><span class="line"><span class="comment">//from：当前的路由</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回 false 不让页面跳转</span></span><br><span class="line">  <span class="comment">// 返回 true 允许页面跳转</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-3-挂载路由-main-ts"><a href="#6-3-挂载路由-main-ts" class="headerlink" title="6.3 挂载路由 ( main.ts )"></a>6.3 挂载路由 ( main.ts )</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入创建vue应用的函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入根组件容器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入路由</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./routers&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建根组件</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载路由</span></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"><span class="comment">// 挂载根组件</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-4-路由显示-app-vue"><a href="#6-4-路由显示-app-vue" class="headerlink" title="6.4 路由显示 ( app.vue )"></a>6.4 路由显示 ( app.vue )</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template &gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">&quot;login&quot;</span>&gt;</span>去登录<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">&quot;main&quot;</span>&gt;</span>去主页<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  &lt;!-- 路由显示区域 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">RouterView</span>&gt;</span><span class="tag">&lt;/<span class="name">RouterView</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; useRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//声明路由表</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">login</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//跳转到登录</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  router.<span class="title function_">push</span>(<span class="string">&#x27;/login&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">main</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//跳转到登录</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  router.<span class="title function_">push</span>(<span class="string">&#x27;/main&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="7-配置API"><a href="#7-配置API" class="headerlink" title="7.配置API"></a>7.配置API</h1><ul><li>终端输入<code>npm i axios</code>,安装axios模块</li></ul><h3 id="7-1-创建axios实例-api-ts"><a href="#7-1-创建axios实例-api-ts" class="headerlink" title="7.1 创建axios实例 ( api.ts )"></a>7.1 创建axios实例 ( api.ts )</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入axios模块</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建axios实例</span></span><br><span class="line"><span class="keyword">const</span> request = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="comment">//baseURL 将自动加在 url 前面，除非 url 是一个绝对 URL</span></span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;http://httpbin.org&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果请求时间超过 timeout 的值，则请求会被中断</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义请求头</span></span><br><span class="line">    <span class="attr">headers</span>: &#123; <span class="string">&#x27;X-Custom-Header&#x27;</span>: <span class="string">&#x27;foobar&#x27;</span> &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-2-创建请求和响应拦截器-api-ts"><a href="#7-2-创建请求和响应拦截器-api-ts" class="headerlink" title="7.2 创建请求和响应拦截器 ( api.ts )"></a>7.2 创建请求和响应拦截器 ( api.ts )</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求出错&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 2xx 范围内的状态码都会触发该函数。</span></span><br><span class="line">        <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 超出 2xx 范围的状态码都会触发该log函数。</span></span><br><span class="line">        <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-3-使用API-组件中"><a href="#7-3-使用API-组件中" class="headerlink" title="7.3 使用API ( 组件中 )"></a>7.3 使用API ( 组件中 )</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template &gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">&quot;req&quot;</span>&gt;</span>发送请求<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;./api/index&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">req</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  request.<span class="title function_">post</span>(<span class="string">&#x27;url&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文件流和切片传输</title>
      <link href="/post/bd390c75.html"/>
      <url>/post/bd390c75.html</url>
      
        <content type="html"><![CDATA[<h1 id="前端文件流、切片下载和上传：优化文件传输效率与用户体验"><a href="#前端文件流、切片下载和上传：优化文件传输效率与用户体验" class="headerlink" title="前端文件流、切片下载和上传：优化文件传输效率与用户体验"></a>前端文件流、切片下载和上传：优化文件传输效率与用户体验</h1><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0af7daee3f8a4cd18f57ff57b80c6ef9~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="image.png"></p><blockquote><p>文件传输是一个常见的需求。对于大文件的下载和上传，直接使用传统的方式可能会遇到性能和用户体验方面的问题。幸运的是，前端技术提供了一些高效的解决方案：文件流操作和切片下载与上传。本文将深入探讨这些技术，帮助你理解它们的原理和实现方法，以优化文件传输效率和提升用户体验。</p></blockquote><h2 id="一、前端文件流操作"><a href="#一、前端文件流操作" class="headerlink" title="一、前端文件流操作"></a>一、前端文件流操作</h2><p>在前端开发中，文件流操作是指通过数据流的方式处理文件，对文件进行<code>读取</code>、<code>写入</code>和<code>展示</code>等操作。下面详细介绍了前端文件流操作的几个基本概念和技术。</p><h3 id="数据流和文件处理的基本概念"><a href="#数据流和文件处理的基本概念" class="headerlink" title="数据流和文件处理的基本概念"></a>数据流和文件处理的基本概念</h3><p>数据流是指连<code>续的数据序列</code>，可以从一个源传输到另一个目的地。在前端开发中，文件可以被看作数据流的一种形式，可以通过数据流的方式进行处理。 文件处理涉及读取和写入文件的操作，包括读取文件的内容、写入数据到文件，以及对文件进行删除、重命名等操作。</p><h3 id="Blob-对象和-ArrayBuffer：处理二进制数据"><a href="#Blob-对象和-ArrayBuffer：处理二进制数据" class="headerlink" title="Blob 对象和 ArrayBuffer：处理二进制数据"></a>Blob 对象和 ArrayBuffer：处理二进制数据</h3><p>在前端处理文件时，经常需要处理二进制数据。<code>Blob</code>（Binary Large Object）对象是用来表示二进制数据的一个接口，可以存储大量的二进制数据。Blob 对象可以通过构造函数进行创建，也可以通过其他 API 生成，例如通过 FormData 对象获取上传的文件。 而 ArrayBuffer 是 JavaScript 中的一个对象类型，用于表示一个通用的、固定长度的二进制数据缓冲区。我们可以通过 <code>ArrayBuffer</code> 来操作和处理文件的二进制数据。 <strong>代码如下：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">FileInput</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [fileContent, setFileContent] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 读取文件内容到ArrayBuffer</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">readFileToArrayBuffer</span>(<span class="params">file</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 注册文件读取完成后的回调函数</span></span><br><span class="line">      reader.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> arrayBuffer = event.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">        <span class="title function_">resolve</span>(arrayBuffer);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 读取文件内容到ArrayBuffer</span></span><br><span class="line">      reader.<span class="title function_">readAsArrayBuffer</span>(file);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将ArrayBuffer转为十六进制字符串</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">arrayBufferToHexString</span>(<span class="params">arrayBuffer</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> uint8Array = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(arrayBuffer);</span><br><span class="line">    <span class="keyword">let</span> hexString = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; uint8Array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> hex = uint8Array[i].<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">      hexString += hex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hexString;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理文件选择事件</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleFileChange</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> file = event.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>];  <span class="comment">// 获取选中的文件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (file) &#123;</span><br><span class="line">      <span class="title function_">readFileToArrayBuffer</span>(file)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">arrayBuffer</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> hexString = <span class="title function_">arrayBufferToHexString</span>(arrayBuffer);</span><br><span class="line">          <span class="title function_">setFileContent</span>(hexString);</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;文件读取失败:&#x27;</span>, error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">setFileContent</span>(<span class="string">&#x27;请选择一个文件&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;handleFileChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>文件内容：<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">pre</span>&gt;</span>&#123;fileContent&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">FileInput</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码里，我们创建了一个名为 <code>FileInput</code> 的函数式组件。该组件包含一个文件选择框和一个用于显示文件内容的 <code>&lt;pre&gt;</code> 元素。当用户选择文件时，通过 <code>FileReader</code> 将文件内容读取为 <code>ArrayBuffer</code>，然后将 <code>ArrayBuffer</code> 转换为十六进制字符串，并将结果显示在页面上。</p><h3 id="使用-FileReader-进行文件读取"><a href="#使用-FileReader-进行文件读取" class="headerlink" title="使用 FileReader 进行文件读取"></a>使用 FileReader 进行文件读取</h3><p><code>FileReader</code> 是前端浏览器提供的一个 API，用于读取文件内容。通过 FileReader，我们可以通过异步方式读取文件，并将文件内容转换为可用的数据形式，比如文本数据或二进制数据。 FileReader 提供了一些读取文件的方法，例如 <code>readAsText()、readAsArrayBuffer()</code> 等，可以根据需要选择合适的方法来读取文件内容。</p><h3 id="将文件流展示在前端页面中"><a href="#将文件流展示在前端页面中" class="headerlink" title="将文件流展示在前端页面中"></a>将文件流展示在前端页面中</h3><p>一旦我们成功地读取了文件的内容，就可以将文件流展示在前端页面上。具体的展示方式取决于文件的类型。例如，对于文本文件，可以直接将其内容显示在页面的文本框或区域中；对于图片文件，可以使用 <code>&lt;img&gt;</code> 标签展示图片；对于音视频文件，可以使用 <code>&lt;video&gt;</code> 或 <code>&lt;audio&gt;</code> 标签来播放。 通过将文件流展示在前端页面上，我们可以实现在线预览和查看文件内容的功能。</p><p>好的，这一部分就基本介绍完毕，总结一下。前端文件操作流是处理<code>大型文件</code>的一种常见方式，他可以通过数据流的方式对文件进行操作。<code>Blob</code>对象 和 <code>ArrayBuffer</code>是处理二进制数据的重要工具。而<code>FileReader</code>则是读取文件内容的的关键组件。通过这些技术，我们可以方便的在前端页面上进行操作或者文件展示。</p><h2 id="二、文件切片下载"><a href="#二、文件切片下载" class="headerlink" title="二、文件切片下载"></a>二、文件切片下载</h2><p>这一步就进入到我们今天文章主题了，先来主要的看下流程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A(开始) --&gt; B&#123;选择文件&#125;</span><br><span class="line">B -- 用户选择文件 --&gt; C[切割文件为多个切片]</span><br><span class="line">C --&gt; D&#123;上传切片&#125;</span><br><span class="line">D -- 上传完成 --&gt; E[合并切片为完整文件]</span><br><span class="line">E -- 文件合并完成 --&gt; F(上传成功)</span><br><span class="line">D -- 上传中断 --&gt; G&#123;保存上传进度&#125;</span><br><span class="line">G -- 上传恢复 --&gt; D</span><br><span class="line">G -- 取消上传 --&gt; H(上传取消)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="传统文件下载的性能问题"><a href="#传统文件下载的性能问题" class="headerlink" title="传统文件下载的性能问题"></a>传统文件下载的性能问题</h3><p>文件切片下载是一种提升文件下载效率的技术，通过将大文件分割成多个小片段（切片），并使用多个并发请求同时下载这些切片，从而加快整体下载速度。</p><p>传统的文件下载方式对于大文件来说存在性能问题。当用户请求下载一个大文件时，服务器需要将整个文件发送给客户端。这会导致以下几个问题：</p><ol><li>较长的等待时间：大文件需要较长的时间来传输到客户端，用户需要等待很长时间才能开始使用文件。</li><li>网络阻塞：由于下载过程中占用了网络带宽，其他用户可能会遇到下载速度慢的问题。</li><li>断点续传困难：如果下载过程中出现网络故障或者用户中断下载，需要重新下载整个文件，无法继续之前的下载进度。</li></ol><h3 id="利用文件切片提升下载效率"><a href="#利用文件切片提升下载效率" class="headerlink" title="利用文件切片提升下载效率"></a>利用文件切片提升下载效率</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54f4870b538d43d8a637e116932e1939~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="image.png"> 文件切片下载通过将文件分割成多个小片段，每个片段大小通常在几百KB到几MB之间。然后客户端通过多个并发请求同时下载这些片段。这样做的好处是：</p><ol><li>快速启动：客户端可以快速开始下载，因为只需要下载第一个切片即可。</li><li>并发下载：通过使用多个并发请求下载切片，可以充分利用带宽，并提高整体下载速度。</li><li>断点续传：如果下载中断，客户端只需要重新下载中断的切片，而不需要重新下载整个文件。 <strong>切片上传代码示例：</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [selectedFile, setSelectedFile] = <span class="title function_">useState</span>(<span class="literal">null</span>); </span><br><span class="line"><span class="keyword">const</span> [progress, setProgress] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"> <span class="comment">// 处理文件选择事件</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">handleFileChange</span>(<span class="params">event</span>) &#123;</span><br><span class="line">   <span class="title function_">setSelectedFile</span>(event.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>]);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 处理文件上传事件</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">handleFileUpload</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> (selectedFile) &#123;</span><br><span class="line">     <span class="comment">// 计算切片数量和每个切片的大小</span></span><br><span class="line">     <span class="keyword">const</span> fileSize = selectedFile.<span class="property">size</span>;</span><br><span class="line">     <span class="keyword">const</span> chunkSize = <span class="number">1024</span> * <span class="number">1024</span>; <span class="comment">// 设置切片大小为1MB</span></span><br><span class="line">     <span class="keyword">const</span> totalChunks = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(fileSize / chunkSize);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 创建FormData对象，并添加文件信息</span></span><br><span class="line">     <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">     formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, selectedFile);</span><br><span class="line">     formData.<span class="title function_">append</span>(<span class="string">&#x27;totalChunks&#x27;</span>, totalChunks);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 循环上传切片</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> chunkNumber = <span class="number">0</span>; chunkNumber &lt; totalChunks; chunkNumber++) &#123;</span><br><span class="line">       <span class="keyword">const</span> start = chunkNumber * chunkSize;</span><br><span class="line">       <span class="keyword">const</span> end = <span class="title class_">Math</span>.<span class="title function_">min</span>(start + chunkSize, fileSize);</span><br><span class="line">       <span class="keyword">const</span> chunk = selectedFile.<span class="title function_">slice</span>(start, end);</span><br><span class="line">       formData.<span class="title function_">append</span>(<span class="string">`chunk-<span class="subst">$&#123;chunkNumber&#125;</span>`</span>, chunk, selectedFile.<span class="property">name</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 发起文件上传请求</span></span><br><span class="line">     axios.<span class="title function_">post</span>(<span class="string">&#x27;/upload&#x27;</span>, formData, &#123;</span><br><span class="line">       <span class="attr">onUploadProgress</span>: <span class="function"><span class="params">progressEvent</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="keyword">const</span> progress = <span class="title class_">Math</span>.<span class="title function_">round</span>((progressEvent.<span class="property">loaded</span> / progressEvent.<span class="property">total</span>) * <span class="number">100</span>);</span><br><span class="line">         <span class="title function_">setProgress</span>(progress);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">       .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件上传成功:&#x27;</span>, response.<span class="property">data</span>);</span><br><span class="line">       &#125;)</span><br><span class="line">       .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;文件上传失败:&#x27;</span>, error);</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当涉及到切片上传和下载时，前端使用的技术通常是基于前端库或框架提供的文件处理功能，结合后端服务实现。</p><p>上面代码里我们提到了文件如何切片上传。</p><ul><li>当用户选择文件后，通过 <code>handleFileChange</code> 函数处理文件选择事件，将选择的文件保存在 <code>selectedFile</code> 状态中。</li><li>当用户点击上传按钮时，通过 <code>handleFileUpload</code> 函数处理文件上传事件。</li><li>在 <code>handleFileUpload</code> 函数中，计算切片数量和每个切片的大小，并创建一个 <code>FormData</code> 对象用于存储文件信息和切片数据。</li></ul><h3 id="实现客户端切片下载的方案"><a href="#实现客户端切片下载的方案" class="headerlink" title="实现客户端切片下载的方案"></a>实现客户端切片下载的方案</h3><p>实现客户端切片下载的基本方案如下：</p><ol><li>服务器端将大文件切割成多个切片，并为每个切片生成唯一的标识符。</li><li>客户端发送请求获取切片列表，同时开始下载第一个切片。</li><li>客户端在下载过程中，根据切片列表发起并发请求下载其他切片，并逐渐拼接合并下载的数据。</li><li>当所有切片都下载完成后，客户端将下载的数据合并为完整的文件。</li></ol><p><strong>代码示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">downloadFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 发起文件下载请求</span></span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;/download&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> totalSize = data.<span class="property">totalSize</span>;</span><br><span class="line">      <span class="keyword">const</span> totalChunks = data.<span class="property">totalChunks</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> downloadedChunks = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">let</span> chunks = [];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 下载每个切片</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> chunkNumber = <span class="number">0</span>; chunkNumber &lt; totalChunks; chunkNumber++) &#123;</span><br><span class="line">        <span class="title function_">fetch</span>(<span class="string">`/download/<span class="subst">$&#123;chunkNumber&#125;</span>`</span>, &#123;</span><br><span class="line">          <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">          .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">blob</span>())</span><br><span class="line">          .<span class="title function_">then</span>(<span class="function"><span class="params">chunk</span> =&gt;</span> &#123;</span><br><span class="line">            downloadedChunks++;</span><br><span class="line">            chunks.<span class="title function_">push</span>(chunk);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当所有切片都下载完成时</span></span><br><span class="line">            <span class="keyword">if</span> (downloadedChunks === totalChunks) &#123;</span><br><span class="line">              <span class="comment">// 合并切片</span></span><br><span class="line">              <span class="keyword">const</span> mergedBlob = <span class="keyword">new</span> <span class="title class_">Blob</span>(chunks);</span><br><span class="line"></span><br><span class="line">              <span class="comment">// 创建对象 URL，生成下载链接</span></span><br><span class="line">              <span class="keyword">const</span> downloadUrl = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(mergedBlob);</span><br><span class="line"></span><br><span class="line">              <span class="comment">// 创建 &lt;a&gt; 元素并设置属性</span></span><br><span class="line">              <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">              link.<span class="property">href</span> = downloadUrl;</span><br><span class="line">              link.<span class="title function_">setAttribute</span>(<span class="string">&#x27;download&#x27;</span>, <span class="string">&#x27;file.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line">              <span class="comment">// 模拟点击下载</span></span><br><span class="line">              link.<span class="title function_">click</span>();</span><br><span class="line"></span><br><span class="line">              <span class="comment">// 释放资源</span></span><br><span class="line">              <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(downloadUrl);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;文件下载失败:&#x27;</span>, error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们看下代码，首先使用<code>BLOB</code>对象创建一共对象URL，用于生成下载连接，然后创建<code>a</code>标签并且设置<code>href</code>的属性为刚刚创建的对象URL,继续设置<code>a</code>标签的<code>download</code>属性是文件名，方便点击的时候自动下载文件。</p><h3 id="显示下载进度和完成状态"><a href="#显示下载进度和完成状态" class="headerlink" title="显示下载进度和完成状态"></a>显示下载进度和完成状态</h3><p>为了显示下载进度和完成状态，可以在客户端实现以下功能：</p><ol><li>显示进度条：客户端可以通过监听每个切片的下载进度来计算整体下载进度，并实时更新进度条的显示。</li><li>显示完成状态：当所有切片都下载完成后，客户端可以显示下载完成的状态，例如显示一个完成的图标或者文本。</li></ol><p>这里我们可以继续接着<code>切片上传代码示例</code>里的继续写。</p><p><strong>代码示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理文件下载事件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleFileDownload</span>(<span class="params"></span>) &#123;</span><br><span class="line">  axios.<span class="title function_">get</span>(<span class="string">&#x27;/download&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span>,</span><br><span class="line">    <span class="attr">onDownloadProgress</span>: <span class="function"><span class="params">progressEvent</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> progress = <span class="title class_">Math</span>.<span class="title function_">round</span>((progressEvent.<span class="property">loaded</span> / progressEvent.<span class="property">total</span>) * <span class="number">100</span>);</span><br><span class="line">      <span class="title function_">setProgress</span>(progress);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 创建一个临时的URL对象用于下载</span></span><br><span class="line">      <span class="keyword">const</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(<span class="keyword">new</span> <span class="title class_">Blob</span>([response.<span class="property">data</span>]));</span><br><span class="line">      <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">      link.<span class="property">href</span> = url;</span><br><span class="line">      link.<span class="title function_">setAttribute</span>(<span class="string">&#x27;download&#x27;</span>, <span class="string">&#x27;file.txt&#x27;</span>);</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(link);</span><br><span class="line">      link.<span class="title function_">click</span>();</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(link);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;文件下载失败:&#x27;</span>, error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;button onClick=&#123;handleFileDownload&#125;&gt;下载文件&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>进度：&#123;progress&#125;%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>当用户点击下载按钮时，通过 <code>handleFileDownload</code> 函数处理文件下载事件。</li><li>在 <code>handleFileDownload</code> 函数中，使用 <code>axios</code> 库发起文件下载请求，并设置 <code>responseType: &#39;blob&#39;</code> 表示返回二进制数据。</li><li>通过监听 <code>onDownloadProgress</code> 属性获取下载进度，并更新进度条的显示。</li><li>下载完成后，创建一个临时的 URL 对象用于下载，并通过动态创建 <code>&lt;a&gt;</code> 元素模拟点击下载。</li></ul><h2 id="三、大文件上传的问题与解决方案"><a href="#三、大文件上传的问题与解决方案" class="headerlink" title="三、大文件上传的问题与解决方案"></a>三、大文件上传的问题与解决方案</h2><h3 id="传统的文件上传方式存在的问题"><a href="#传统的文件上传方式存在的问题" class="headerlink" title="传统的文件上传方式存在的问题"></a>传统的文件上传方式存在的问题</h3><ul><li>大文件上传耗时长，容易导致请求超时。</li><li>占用服务器和网络带宽资源，可能影响其他用户的访问速度。</li><li>如果上传中断，需要重新上传整个文件，效率低下。</li><li>难以实现上传进度的显示和控制。</li></ul><h3 id="前端文件切片上传的优势"><a href="#前端文件切片上传的优势" class="headerlink" title="前端文件切片上传的优势"></a>前端文件切片上传的优势</h3><ul><li>将大文件分割为更小的文件切片，分多次上传，提高上传效率和稳定性。</li><li>提供上传进度的监控和展示，提高用户体验。</li><li>充分利用浏览器的并发上传能力，减轻服务器负担。</li><li>实现断点续传功能，避免重复上传已上传的部分。</li></ul><h3 id="实现前端切片上传的方法"><a href="#实现前端切片上传的方法" class="headerlink" title="实现前端切片上传的方法"></a>实现前端切片上传的方法</h3><ol><li><ul><li>使用 JavaScript 的 <code>File API</code> 获取文件对象，并使用 <code>Blob.prototype.slice()</code> 方法将文件切割为多个切片。</li><li>使用 <code>FormData</code> 对象将切片数据通过 AJAX 或 Fetch API 发送到服务器。</li><li>在后端服务器上接收切片并保存到临时存储中，等待后续合并。</li><li>在客户端通过监听上传进度事件，在进度条或提示中展示上传进度。 <strong>代码示例</strong></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [file, setFile] = <span class="title function_">useState</span>(<span class="literal">null</span>);  <span class="comment">//用来存放我本地上传的文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chunkSize = <span class="number">1024</span> * <span class="number">1024</span>; <span class="comment">// 1MB 切片大小</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">upload</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!file) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;请选择要上传的文件！&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> chunkSize = <span class="number">1024</span> * <span class="number">1024</span>; <span class="comment">// 1MB</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> end = <span class="title class_">Math</span>.<span class="title function_">min</span>(chunkSize, file.<span class="property">size</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (start &lt; file.<span class="property">size</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> chunk = file.<span class="title function_">slice</span>(start, end);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 创建FormData对象</span></span><br><span class="line">      <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">      formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, chunk);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 发送切片到服务器</span></span><br><span class="line">      <span class="title function_">fetch</span>(<span class="string">&#x27;上传接口xxxx&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">body</span>: formData</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">        <span class="comment">// 处理响应结果</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">        <span class="comment">// 处理错误</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      start = end;</span><br><span class="line">      end = <span class="title class_">Math</span>.<span class="title function_">min</span>(start + chunkSize, file.<span class="property">size</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line"> <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;handleFileChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;upload&#125;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面的代码中，创建了一个名为<code>Upload</code>的函数组件。它使用了 React 的<code>useState</code>钩子来管理选中的文件。</p><p>通过<code>onChange</code>事件监听文件输入框的变化，并在<code>handleFileChange</code>函数中获取选择的文件，并更新<code>file</code>状态。</p><p>点击“上传”按钮时，调用<code>upload</code>函数。它与之前的示例代码类似，将文件切割为多个大小相等的切片，并使用<code>FormData</code>对象和<code>fetch</code>函数发送切片数据到服务器。</p><h3 id="实现断点续传的技术：记录和恢复上传状态"><a href="#实现断点续传的技术：记录和恢复上传状态" class="headerlink" title="实现断点续传的技术：记录和恢复上传状态"></a>实现断点续传的技术：记录和恢复上传状态</h3><ul><li>在前端，可以使用 <code>localStorage</code> 或 <code>sessionStorage</code> 来存储已上传的切片信息，包括已上传的切片索引、切片大小等。</li><li>每次上传前，先检查本地存储中是否存在已上传的切片信息，若存在，则从断点处继续上传。</li><li>在后端，可以使用一个临时文件夹或数据库来记录已接收到的切片信息，包括已上传的切片索引、切片大小等。</li><li>在上传完成前，保存上传状态，以便在上传中断后能够恢复上传进度。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useRef, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Upload</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [file, setFile] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [uploadedChunks, setUploadedChunks] = <span class="title function_">useState</span>([]);</span><br><span class="line">  <span class="keyword">const</span> [uploading, setUploading] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> uploadRequestRef = <span class="title function_">useRef</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleFileChange</span> = (<span class="params">event</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> selectedFile = event.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="title function_">setFile</span>(selectedFile);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">uploadChunk</span> = (<span class="params">chunk</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 创建FormData对象</span></span><br><span class="line">    <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, chunk);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送切片到服务器</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fetch</span>(<span class="string">&#x27;your-upload-url&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">      <span class="attr">body</span>: formData</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">      <span class="comment">// 处理响应结果</span></span><br><span class="line">      <span class="keyword">return</span> data;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">upload</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!file) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;请选择要上传的文件！&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> chunkSize = <span class="number">1024</span> * <span class="number">1024</span>; <span class="comment">// 1MB</span></span><br><span class="line">    <span class="keyword">const</span> totalChunks = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(file.<span class="property">size</span> / chunkSize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> end = <span class="title class_">Math</span>.<span class="title function_">min</span>(chunkSize, file.<span class="property">size</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setUploading</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; totalChunks; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> chunk = file.<span class="title function_">slice</span>(start, end);</span><br><span class="line">      <span class="keyword">const</span> uploadedChunkIndex = uploadedChunks.<span class="title function_">indexOf</span>(i);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (uploadedChunkIndex === -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">uploadChunk</span>(chunk);</span><br><span class="line">          <span class="title function_">setUploadedChunks</span>(<span class="function">(<span class="params">prevChunks</span>) =&gt;</span> [...prevChunks, i]);</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 保存已上传的切片信息到本地存储</span></span><br><span class="line">          <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;uploadedChunks&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(uploadedChunks));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">          <span class="comment">// 处理错误</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      start = end;</span><br><span class="line">      end = <span class="title class_">Math</span>.<span class="title function_">min</span>(start + chunkSize, file.<span class="property">size</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setUploading</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上传完毕，清除本地存储的切片信息</span></span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;uploadedChunks&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> storedUploadedChunks = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;uploadedChunks&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (storedUploadedChunks) &#123;</span><br><span class="line">      <span class="title function_">setUploadedChunks</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(storedUploadedChunks));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;handleFileChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;upload&#125;</span> <span class="attr">disabled</span>=<span class="string">&#123;uploading&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;uploading ? &#x27;上传中...&#x27; : &#x27;上传&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先，使用<code>useState</code>钩子创建了一个<code>uploadedChunks</code>状态来保存已上传的切片索引数组。初始值为空数组。</p><p>然后，我们使用<code>useRef</code>钩子创建了一个<code>uploadRequestRef</code>引用，用于存储当前的上传请求。</p><p>在<code>handleFileChange</code>函数中，我们更新了<code>file</code>状态以选择要上传的文件。</p><p>在<code>uploadChunk</code>函数中，我们发送切片到服务器，并返回一个<code>Promise</code>对象来处理响应结果。</p><p>在<code>upload</code>函数中，我们添加了断点续传的逻辑。首先，我们获取切片的总数，并设置<code>uploading</code>状态为<code>true</code>来禁用上传按钮。</p><p>然后，我们使用<code>for</code>循环遍历所有切片。对于每个切片，我们检查<code>uploadedChunks</code>数组中是否已经包含该索引，如果不包含，则进行上传操作。</p><p>在上传切片之后，我们将已上传的切片索引添加到<code>uploadedChunks</code>数组，并使用<code>localStorage</code>保存已上传的切片信息。</p><p>最后，在上传完毕后，我们将<code>uploading</code>状态设为<code>false</code>，并清除本地存储的切片信息。</p><blockquote><p>在实现大文件上传时要考虑服务器端的处理能力和存储空间，以及安全性问题。同时，为了保障断点续传的准确性，应该尽量避免并发上传相同文件的情况，可以采用文件唯一标识符或用户会话标识符进行区分。</p></blockquote><h2 id="四、优化用户体验：切片下载与上传的应用场景"><a href="#四、优化用户体验：切片下载与上传的应用场景" class="headerlink" title="四、优化用户体验：切片下载与上传的应用场景"></a>四、优化用户体验：切片下载与上传的应用场景</h2><h3 id="后台管理系统中的文件下载和上传："><a href="#后台管理系统中的文件下载和上传：" class="headerlink" title="后台管理系统中的文件下载和上传："></a>后台管理系统中的文件下载和上传：</h3><ul><li>文件下载：在后台管理系统中，用户可能需要下载大型文件，如报表、日志文件、数据库备份等。通过将文件切片下载，可以提高下载速度和稳定性，同时允许用户中断下载并从中断处继续下载。</li><li>文件上传：后台管理系统中，用户可能需要上传大型文件，如数据导入、文件备份等。使用切片上传可以提高上传效率，分批上传文件切片，并显示上传进度，使用户能够了解上传的状态。</li></ul><h3 id="图片-x2F-视频上传和预览："><a href="#图片-x2F-视频上传和预览：" class="headerlink" title="图片&#x2F;视频上传和预览："></a>图片&#x2F;视频上传和预览：</h3><ul><li>图片上传和预览：在图片上传场景中，用户可以选择多张图片进行上传。通过切片上传，可以加快图片上传速度，并实时显示上传进度。同时，在上传完成后，可以提供预览功能，让用户可以立即查看上传的图片。</li><li>视频上传和预览：对于较大的视频文件，切片上传可以确保上传过程可靠且高效。同时，可以实现上传进度的实时展示。上传完成后，通过切片下载技术，用户可以流畅地观看视频，无需等待整个文件下载完成。</li></ul><h3 id="云存储和云盘应用中的文件操作："><a href="#云存储和云盘应用中的文件操作：" class="headerlink" title="云存储和云盘应用中的文件操作："></a>云存储和云盘应用中的文件操作：</h3><ul><li><p>文件分块上传：云存储和云盘应用通常需要处理大量文件的上传。通过切片上传可以提高上传速度和稳定性，并允许用户中断并继续上传。</p></li><li><p>文件分块下载：当用户需要下载云存储或云盘中的大型文件时，可以使用切片下载技术，加快下载速度并提供中断恢复功能。</p></li><li><p>文件预览和在线编辑：通过将文件切片并进行预览，在线编辑，可以提供更好的用户体验。用户可以在不需完全下载文件的情况下，直接预览和编辑文件。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题整理</title>
      <link href="/post/8fe9c4e1.html"/>
      <url>/post/8fe9c4e1.html</url>
      
        <content type="html"><![CDATA[<h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul><li><a href="#1-%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96">1. 函数柯里化</a></li><li><a href="#2-get%E5%92%8Cpost%E7%9A%84%E5%B7%AE%E5%88%AB">2. get和post的差别</a></li><li><a href="#%E4%B8%8D%E7%86%9F-3-request-payload-%E5%92%8C-form-data%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB">@不熟 3. request payload 和 form data之间的区别</a></li><li><a href="#4-httphttps%E5%8D%8F%E8%AE%AE%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D">4. HTTP、HTTPs协议详细介绍</a><ul><li><a href="#1-http%E5%8D%8F%E8%AE%AE%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF">1. HTTP协议详细信息</a></li><li><a href="#2-http%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%89%B9%E7%82%B9">2. HTTP协议的特点</a></li><li><a href="#3-http%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B">3. HTTP工作流程</a></li><li><a href="#4-http%E5%8D%8F%E8%AE%AE%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F%E5%85%B18%E7%A7%8D">4. HTTP协议请求方式(共8种)</a></li><li><a href="#5http%E5%8D%8F%E8%AE%AE%E7%8A%B6%E6%80%81%E7%A0%81">5.HTTP协议状态码</a></li><li><a href="#6https">6.HTTPS</a></li></ul></li><li><a href="#5v8%E5%BC%95%E6%93%8E%E7%9A%84ast%E6%98%AF%E4%BB%80%E4%B9%88">5.v8引擎的AST是什么</a></li><li><a href="#6bfc">6.BFC</a></li><li><a href="#7%E6%96%87%E6%A1%A3%E6%B5%81">7.文档流</a><ul><li><a href="#%E6%96%87%E6%A1%A3%E6%B5%81%E6%A0%87%E5%87%86%E6%B5%81%E6%99%AE%E9%80%9A%E6%B5%81">文档流(标准流、普通流)</a></li><li><a href="#%E6%B5%AE%E5%8A%A8%E6%B5%81">浮动流</a></li><li><a href="#%E5%AE%9A%E4%BD%8D%E6%B5%81">定位流</a></li></ul></li><li><a href="#8%E5%B8%83%E5%B1%80%E6%96%B9%E6%A1%88">8.布局方案</a></li><li><a href="#9%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BB%8E%E5%8F%91%E5%87%BA%E8%AF%B7%E6%B1%82%E5%88%B0%E6%8E%A5%E5%8F%97%E5%93%8D%E5%BA%94%E4%B8%AD%E9%97%B4%E8%BF%87%E7%A8%8B">9.浏览器从发出请求到接受响应,中间过程</a></li><li><a href="#10%E5%89%8D%E7%AB%AF%E5%AD%98%E5%82%A8">10.前端存储</a><ul><li><a href="#%E4%BC%98%E5%8A%BF">优势</a></li><li><a href="#%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F">存储方式</a><ul><li><a href="#%E5%AD%98%E5%82%A8%E7%B1%BB">存储类</a><ul><li><a href="#12-web-storagelocalstoragesessionstorage">1、2. Web Storage(localStorage、sessionStorage)</a></li><li><a href="#3cookie">3.cookie</a></li><li><a href="#4-indexdb">4. IndexDB</a></li><li><a href="#5-web-sql">5. Web SQL</a></li></ul></li><li><a href="#%E7%BC%93%E5%AD%98%E7%B1%BB">缓存类</a><ul><li><a href="#1-cache-storage">1. Cache Storage</a></li><li><a href="#2-application-cache">2. Application Cache</a></li></ul></li></ul></li></ul></li><li><a href="#11vite%E5%92%8Cwebpack%E7%9A%84%E5%8C%BA%E5%88%AB">11.vite和webpack的区别</a></li><li><a href="#12%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E5%AD%98%E5%82%A8--localstorage">12.状态管理存储 , localstorage</a></li><li><a href="#%E4%B8%8D%E7%86%9F-13h5%E6%96%B0%E7%89%B9%E6%96%B0web-workerwebsocket">@不熟 13.H5新特新:Web Worker、WebSocket</a></li><li><a href="#14vue-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E7%90%86%E8%A7%A3">14.Vue 生命周期的理解</a><ul><li><a href="#vue2">vue2</a></li><li><a href="#vue3%E9%80%89%E9%A1%B9%E5%BC%8F">vue3选项式</a></li><li><a href="#vue3%E7%BB%84%E5%90%88%E5%BC%8F">vue3组合式</a></li></ul></li><li><a href="#15%E8%B0%88%E4%B8%80%E8%B0%88%E5%AF%B9-mvvm-%E7%9A%84%E7%90%86%E8%A7%A3">15.谈一谈对 MVVM 的理解？</a></li><li><a href="#16vue-%E5%AE%9E%E7%8E%B0%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E7%9A%84%E5%8E%9F%E7%90%86">16.Vue 实现双向数据绑定的原理？</a><ul><li><a href="#vue2-1">vue2</a></li><li><a href="#vue3">vue3</a></li></ul></li><li><a href="#17vue2x-%E4%B8%AD%E5%A6%82%E4%BD%95%E6%A3%80%E6%B5%8B%E6%95%B0%E7%BB%84%E7%9A%84%E5%8F%98%E5%8C%96">17.Vue2.x 中如何检测数组的变化？</a></li><li><a href="#%E4%B8%8D%E7%86%9F-18vue2x-%E5%92%8C-vuex3x-%E6%B8%B2%E6%9F%93%E5%99%A8%E7%9A%84-diff-%E7%AE%97%E6%B3%95%E5%88%86%E5%88%AB%E8%AF%B4%E4%B8%80%E4%B8%8B">不熟@ 18.vue2.x 和 vuex3.x 渲染器的 diff 算法分别说一下？</a><ul><li><a href="#vue2-2">vue2</a></li><li><a href="#vue3-1">vue3</a></li></ul></li><li><a href="#19vue-%E7%9A%84%E8%B7%AF%E7%94%B1%E5%AE%9E%E7%8E%B0">19.Vue 的路由实现</a><ul><li><a href="#hashhistory%E8%B7%AF%E7%94%B1">HashHistory路由</a></li><li><a href="#history%E8%B7%AF%E7%94%B1">history路由</a></li><li><a href="#%E4%B8%A4%E7%A7%8D%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB">两种路由模式的区别</a></li><li><a href="#%E4%B8%A4%E7%A7%8D%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F%E8%B7%B3%E8%BD%ACapi%E7%9A%84%E5%8C%BA%E5%88%AB">两种路由模式跳转API的区别</a></li></ul></li><li><a href="#20vuex%E5%92%8Cpina%E7%9A%84%E5%8C%BA%E5%88%AB">20.vuex和pina的区别?</a><ul><li><a href="#vuex">vuex</a></li><li><a href="#pinia">pinia</a></li><li><a href="#vuex%E4%B8%8Epinia%E7%9A%84%E5%8C%BA%E5%88%AB">vuex与pinia的区别</a></li></ul></li><li><a href="#21nexttick-%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88%E4%BB%96%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88">21.<code>nextTick</code> 的作用是什么？他的实现原理是什么？</a></li><li><a href="#22%E7%83%AD%E6%9B%B4%E6%96%B0">22.热更新</a></li><li><a href="#23%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93ssr">23.服务端渲染(SSR)</a><ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93">什么是服务端渲染</a></li><li><a href="#%E4%BC%98%E7%82%B9">优点</a></li><li><a href="#%E7%BC%BA%E7%82%B9">缺点</a></li><li><a href="#%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%B8%B2%E6%9F%93%E7%9A%84%E6%96%B9%E5%BC%8F">服务器端渲染的方式</a></li><li><a href="#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">应用场景</a></li></ul></li><li><a href="#24react-hooks">24.react-hooks</a><ul><li><a href="#1-usestate">1. useState()</a></li><li><a href="#2-usereducer">2. useReducer()</a></li><li><a href="#3-usecontext">3. useContext()</a></li><li><a href="#4-useeffect">4. useEffect()</a></li><li><a href="#5-usememo">5. useMemo()</a></li><li><a href="#6-usecallback">6. useCallBack()</a></li><li><a href="#7-useref">7. useRef()</a></li><li><a href="#8-%E8%87%AA%E5%AE%9A%E4%B9%89hooks">8. 自定义hooks</a></li><li><a href="#9-react%E8%B7%AF%E7%94%B1hooks">9. React路由Hooks</a></li></ul></li><li><a href="#25redux">25.redux</a></li><li><a href="#26callapplybind%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%8C%BA%E5%88%AB">26.call、apply、bind的作用和区别</a><ul><li><a href="#%E5%85%B1%E5%90%8C%E7%82%B9">共同点</a></li><li><a href="#%E4%B8%8D%E5%90%8C%E7%82%B9">不同点</a></li><li><a href="#call%E6%96%B9%E6%B3%95">call()方法</a></li><li><a href="#apply%E6%96%B9%E6%B3%95">apply()方法</a></li><li><a href="#bind%E6%96%B9%E6%B3%95">bind()方法</a></li></ul></li><li><a href="#27this%E6%8C%87%E5%90%91">27.this指向</a><ul><li><a href="#%E6%A6%82%E5%BF%B5">概念</a></li><li><a href="#this%E7%9A%84%E6%8C%87%E5%90%91">this的指向</a></li></ul></li><li><a href="#28%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6">28.垃圾回收机制</a><ul><li><a href="#%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4%E6%B3%95">标记清除法</a></li></ul></li><li><a href="#29eventloop%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF">29.EventLoop(事件循环)</a></li><li><a href="#30%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%92%8C%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F">30.内存溢出和内存泄漏</a><ul><li><a href="#%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2">内存泄露</a></li><li><a href="#%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA">内存溢出</a></li></ul></li></ul><h1 id="1-函数柯里化"><a href="#1-函数柯里化" class="headerlink" title="1. 函数柯里化"></a>1. 函数柯里化</h1><ul><li>使用：固定部分参数，返回接收剩余参数的函数，</li><li>目的：建一个针对性更强的函数</li><li>核心思想：把多参数传入的函数，拆成一个个的单参数的函数，内部再返回调用下一个单（或部分）参数的函数，依次处理剩余参数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 柯里化前</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">log</span> = (<span class="params">date, project, message</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;date&#125;</span> <span class="subst">$&#123;project&#125;</span> <span class="subst">$&#123;message&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出2022-07-29 xxx后台管理系统 mm接口异常</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">log</span>(<span class="string">&#x27;2022-07-29&#x27;</span>, <span class="string">&#x27;xxx后台管理系统&#x27;</span>, <span class="string">&#x27;mm接口异常&#x27;</span>)) </span><br><span class="line"></span><br><span class="line"><span class="comment">//柯里化后</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">log</span> = (<span class="params">date</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">projectName</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;date&#125;</span> <span class="subst">$&#123;projectName&#125;</span> <span class="subst">$&#123;message&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//那个参数固定，则传入同一个参数，只改要变的参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">log</span>(<span class="string">&#x27;2022-07-29&#x27;</span>)(<span class="string">&#x27;A项目&#x27;</span>)(<span class="string">&#x27;接口报错&#x27;</span>)); </span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-get和post的差别"><a href="#2-get和post的差别" class="headerlink" title="2. get和post的差别"></a>2. get和post的差别</h1><ul><li>参数：get通过拼接url进行参数传递，参数可见；post通过请求头传递参数，参数不可见</li><li>数据携带量：get请求携带的数据不超过2~4k，(浏览器不同，携带量不同，但相差不大)；post请求携带量根据配置文件设定，无上限</li><li>后退页面的反应： 页面后退，get请求无影响，post请求需要重新提交请求</li><li>缓存性：get请求可以缓存，post请求不可缓存</li><li>传输速度：get比post更快。(get产生一个TCP数据包；post产生两个TCP数据包)</li><li>安全性：原则上post更安全，因为post的数据在url上不可见</li></ul><h1 id="不熟-3-request-payload-和-form-data之间的区别"><a href="#不熟-3-request-payload-和-form-data之间的区别" class="headerlink" title="@不熟 3. request payload 和 form data之间的区别"></a>@不熟 3. request payload 和 form data之间的区别</h1><ul><li>FormData和Payload是浏览器传输给接口的两种格式，这两种方式浏览器是通过Content-Type来进行区分的。</li><li>Content-Type是指 HTTP 请求发送信息至服务器时的内容编码类型</li><li>RequestPayload是(HTTP请求体模式)，FormData是(表单请求体模式)</li></ul><h1 id="4-HTTP、HTTPs协议详细介绍"><a href="#4-HTTP、HTTPs协议详细介绍" class="headerlink" title="4. HTTP、HTTPs协议详细介绍"></a>4. HTTP、HTTPs协议详细介绍</h1><h3 id="1-HTTP协议详细信息"><a href="#1-HTTP协议详细信息" class="headerlink" title="1. HTTP协议详细信息"></a>1. HTTP协议详细信息</h3><ul><li>HTTP(超文本传输协议)，是一种详细规定了浏览器和万维网服务器之间相互通信的规则，通过因特网传送万维网文档的数据传输协议</li><li>HTTP是基于TCP&#x2F;IP的应用层协议</li><li>HTTP不仅能应用于网页浏览，只要通信双方都遵守HTTP协议，都能使用HTTP协议</li></ul><h3 id="2-HTTP协议的特点"><a href="#2-HTTP协议的特点" class="headerlink" title="2. HTTP协议的特点"></a>2. HTTP协议的特点</h3><ul><li>简单快速：只需传送请求方法和路径</li><li>灵活：允许传输任意类型数据对象</li><li>无状态：指协议对于事件处理没有记忆能力，缺少状态意味着如果后续处理需要前面的信息,则它必须重传,这样可能导致每次连接传送的数据量增大。</li><li>支持B&#x2F;S、C&#x2F;S模式</li></ul><h3 id="3-HTTP工作流程"><a href="#3-HTTP工作流程" class="headerlink" title="3. HTTP工作流程"></a>3. HTTP工作流程</h3><ul><li>浏览器与服务器建立连接</li><li>浏览器向服务器发送请求</li><li>服务器接收请求，</li><li>向浏览器返回响应</li><li>浏览器接收到响应，渲染页面</li><li>断开与服务器的连接</li></ul><h3 id="4-HTTP协议请求方式-共8种"><a href="#4-HTTP协议请求方式-共8种" class="headerlink" title="4. HTTP协议请求方式(共8种)"></a>4. HTTP协议请求方式(共8种)</h3><blockquote><p>HTTP 1.0 定义了三种(get、post、head)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">get:获取,一般用于查询数据,在处理敏感数据时不用，或者参数做加密处理。请求参数拼接在url里</span><br><span class="line"></span><br><span class="line">post:一般用于修改数据,数据发送到服务器以创建或更新资源，侧重于更新数据。请求参数在请求body中</span><br><span class="line"></span><br><span class="line">head:head方法与get方法相同，但没有响应体，仅传输状态行和标题部分。这对于恢复相应头部编写的元数据非常有用，而无需传输整个内容。</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>HTTP 1.1 新增了6种(put、delete、pacth、options、trace、connect)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">put:一般用于新增数据,数据发送到服务器以创建或更新资源，侧重于创建数据</span><br><span class="line"></span><br><span class="line">delete:一般用于删除数据,用来删除指定的资源，它会删除URI给出的目标资源的所有当前内容</span><br><span class="line"></span><br><span class="line">pacth:用于资源的部分内容的更新；会在资源不存在时去创建它(有则修改，无则添加)</span><br><span class="line"></span><br><span class="line">options:用来描述了目标资源的通信选项，返回服务器针对特定资源所支持的HTTP请求方法，也可以利用向web服务器发送`*`的请求来测试服务器的功能性</span><br><span class="line"></span><br><span class="line">trace:用于沿着目标资源的路径执行消息环回测试；它回应收到的请求，以便客户可以看到中间服务器进行了哪些（假设任何）进度或增量。</span><br><span class="line"></span><br><span class="line">connect:用来建立到给定URI标识的服务器的隧道；它通过简单的TCP / IP隧道更改请求连接，通常是使用解码的HTTP代理来进行SSL编码的通信（HTTPS）</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-HTTP协议状态码"><a href="#5-HTTP协议状态码" class="headerlink" title="5.HTTP协议状态码"></a>5.HTTP协议状态码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">100~199: 提供信息。</span><br><span class="line"></span><br><span class="line">200~299: 请求被成功提交。</span><br><span class="line"></span><br><span class="line">300~399: 客户端被重定向到其他资源。</span><br><span class="line"></span><br><span class="line">400~499: 请求包含某种错误。</span><br><span class="line"></span><br><span class="line">500~599: 服务器执行请求时遇到错误。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-HTTPS"><a href="#6-HTTPS" class="headerlink" title="6.HTTPS"></a>6.HTTPS</h3><ul><li>与http的区别：安全性比http高，是HTTP 的安全版</li><li>主要作用：建立一个信息安全通道，来确保数据的传输，确保网站的真实性</li><li>优点：确保数据发送到正确的客户端和服务器，确保数据的完整性，大幅度增加了中间人攻击的成本</li><li>缺点：增大了与服务器握手时间(大约增加了50%)，SSL证书需要收费</li></ul><h1 id="5-v8引擎的AST是什么"><a href="#5-v8引擎的AST是什么" class="headerlink" title="5.v8引擎的AST是什么"></a>5.v8引擎的AST是什么</h1><ul><li>V8引擎是使用AST(抽象语法树)来解析和转换js代码的</li><li>AST是解析和转换JavaScript代码的树状结构表示，它提供了一种便捷的方式来分析、修改和转换代码。</li></ul><h1 id="6-BFC"><a href="#6-BFC" class="headerlink" title="6.BFC"></a>6.BFC</h1><ul><li>BFC是块级格式化上下文，可以把BFC看成一个容器，容器内的元素不会影响到外部元素</li><li>BFC的特性</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. BFC是块级元素，在垂直方向上依次排列</span><br><span class="line">2. BFC是独立容器，内部元素不会影响到外部元素</span><br><span class="line">3. 同一个BFC里面的两个盒子，外边距会发生重叠，并取最大外边距</span><br><span class="line">4. 计算BFC高度时，浮动元素也要参与计算</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>创建BFC</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. overflow:hidden      隐藏的内容</span><br><span class="line">2. display:flex         转变为弹性盒子，变现为块级元素</span><br><span class="line">3. position:abssolute   绝对定位</span><br><span class="line">4. position:fixed       固定定位</span><br><span class="line">5. display:inline-flex  转变为弹性盒子，变现为行内块元素</span><br><span class="line">6. display:inline-block 转变为行内块元素</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>BFC的作用：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 解决父元素未设置高度，子元素浮动造成父元素高度塌陷的问题</span><br><span class="line">2. 解决子元素外边距错误的加到父元素上的问题</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="7-文档流"><a href="#7-文档流" class="headerlink" title="7.文档流"></a>7.文档流</h1><p>CSS 有三种基本的定位机制：普通流、浮动流、定位流。</p><h3 id="文档流-标准流、普通流"><a href="#文档流-标准流、普通流" class="headerlink" title="文档流(标准流、普通流)"></a>文档流(标准流、普通流)</h3><ul><li>html的默认排版方式</li><li>特点：块级元素上下排列，行内块元素、行内元素左右排列</li></ul><h3 id="浮动流"><a href="#浮动流" class="headerlink" title="浮动流"></a>浮动流</h3><ul><li>脱离标准流的排版方式，使用float：none&#x2F;left&#x2F;right实现</li><li>特点：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 浮动后的元素只有居左、居右、无三种属性，</span><br><span class="line">2. 浮动后的元素可以设置宽高</span><br><span class="line">3. 元素只在父元素宽高范围内浮动</span><br><span class="line">4. 浮动后的元素不可使用margin：0 auto;</span><br><span class="line">5. 元素浮动后，后面的同级元素会占据他原本的位置</span><br><span class="line">6. 如果两个浮动的元素的宽之和小于父元素宽，左右排列</span><br><span class="line">7. 如果两个浮动的元素的宽之和大于父元素宽，上下排列</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="定位流"><a href="#定位流" class="headerlink" title="定位流"></a>定位流</h3><ul><li>定位分为相对定位、绝对定位、固定定位、静态定位(文档流默认定位)</li><li>相对定位不脱离文档流，绝对定位、固定定位会脱离文档流</li><li>z-index属性是专门控制定位流元素的覆盖关系</li></ul><h1 id="8-布局方案"><a href="#8-布局方案" class="headerlink" title="8.布局方案"></a>8.布局方案</h1><ol><li>居中布局(水平居中、垂直居中、水平垂直居中)</li><li>双飞翼布局(侧边两栏宽度固定，中间栏宽度自适应)</li><li>圣杯布局(侧边两栏宽度固定，中间栏宽度自适应)</li><li>栅格布局</li></ol><h1 id="9-浏览器从发出请求到接受响应-中间过程"><a href="#9-浏览器从发出请求到接受响应-中间过程" class="headerlink" title="9.浏览器从发出请求到接受响应,中间过程"></a>9.浏览器从发出请求到接受响应,中间过程</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1. 用户输入url，生成http请求</span><br><span class="line"></span><br><span class="line">2. 解析域名，得到IP地址。(根据url域名从本地hosts文件查找是否有映射IP，如果查找不到，则将域名发送给电脑所配置的DNS进行域名解析，得到IP地址)</span><br><span class="line"></span><br><span class="line">3. 建立TCP连接(三次握手)</span><br><span class="line"></span><br><span class="line">4. 向服务器发送HTTP请求</span><br><span class="line"></span><br><span class="line">5. 服务器收到请求</span><br><span class="line"></span><br><span class="line">6. servlet处理请求</span><br><span class="line"></span><br><span class="line">7. 将响应结果封装成 HTTP 响应的格式，发送给浏览器，关闭TCP连接，请求响应完成</span><br><span class="line"></span><br><span class="line">8. 浏览器收到响应数据，解析并渲染响应页面</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="10-前端存储"><a href="#10-前端存储" class="headerlink" title="10.前端存储"></a>10.前端存储</h1><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ol><li>方便网页加载，避免了在发送请求收到响应前的空白期</li><li>减少向服务器的请求次数，加快渲染速度</li><li>在网络不佳或无网络时，也可以离线浏览网页</li></ol><h3 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h3><p>分为存储类(cookie、localStroage、sessionStroage)、缓存类(Cache Storage、Application Cache)</p><h4 id="存储类"><a href="#存储类" class="headerlink" title="存储类"></a>存储类</h4><h5 id="1、2-Web-Storage-localStorage、sessionStorage"><a href="#1、2-Web-Storage-localStorage、sessionStorage" class="headerlink" title="1、2. Web Storage(localStorage、sessionStorage)"></a>1、2. Web Storage(localStorage、sessionStorage)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">  <span class="title class_">HTML5</span>提出的存储方式，容量5M</span><br><span class="line"></span><br><span class="line">  优点：</span><br><span class="line">    <span class="number">1.</span> 克服了cookie的限制，同时存储一些要严格控制在客户端，不需要发送给服务器的数据</span><br><span class="line">    <span class="number">2.</span> 提供了除cookie之外的存储会话途径</span><br><span class="line">    <span class="number">3.</span> 存储容量大，跨会话存储数据</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">``</span><span class="string">``</span>js</span><br><span class="line">  <span class="variable language_">localStorage</span>：</span><br><span class="line">    <span class="number">1.</span> 永久存储，除非自动删除</span><br><span class="line">    <span class="number">2.</span> 保存在客户端，不与服务器进行交互通信</span><br><span class="line">    <span class="number">3.</span> 只能存储字符串类型，复杂数据类型会转化为json字符串保存</span><br><span class="line">    <span class="number">4.</span> 应用场景：适合长期保存在本地的数据</span><br><span class="line">    <span class="number">5.</span> 操作<span class="variable language_">localStorage</span></span><br><span class="line">      <span class="comment">//设置localStorage,有则修改，无则添加</span></span><br><span class="line">      <span class="comment">//将键值对存储在localStorage中</span></span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取localStorage</span></span><br><span class="line">      <span class="keyword">var</span> value = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//删除localStorage</span></span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//清空localStorage</span></span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">``</span><span class="string">``</span>js</span><br><span class="line">  <span class="variable language_">sessionStorage</span>：</span><br><span class="line">    <span class="number">1.</span> 当前会话下有效，关闭浏览器，数据清除</span><br><span class="line">    <span class="number">2.</span> 保存在客户端，不与服务器进行交互通信</span><br><span class="line">    <span class="number">3.</span> 只能存储字符串类型，复杂数据类型会转化为json字符串保存</span><br><span class="line">    <span class="number">4.</span> 应用场景：敏感账号、一次性登录</span><br><span class="line">    <span class="number">5.</span> 操作<span class="variable language_">sessionStorage</span></span><br><span class="line">      <span class="comment">//设置localStorage,有则修改，无则添加</span></span><br><span class="line">      <span class="comment">//将键值对存储在localStorage中</span></span><br><span class="line">      <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取localStorage</span></span><br><span class="line">      <span class="keyword">var</span> value = <span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//删除localStorage</span></span><br><span class="line">      <span class="variable language_">sessionStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//清空localStorage</span></span><br><span class="line">      <span class="variable language_">sessionStorage</span>.<span class="title function_">clear</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-cookie"><a href="#3-cookie" class="headerlink" title="3.cookie"></a>3.cookie</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">  基于<span class="variable constant_">HTTP</span>协议的存储方式，浏览器普遍支持，容量4k</span><br><span class="line">  限制性：需要设置过期时间，过期自动清除，如果不设置，浏览器关闭就清除</span><br><span class="line">  优点：</span><br><span class="line">    <span class="number">1.</span> 可以控制过期时间，有一定的安全保障</span><br><span class="line">    <span class="number">2.</span> 可进行扩展，可跨域共享</span><br><span class="line">    <span class="number">3.</span> 通过加密与安全传输技术(<span class="variable constant_">SSL</span>)，可降低cookie被破解的风险</span><br><span class="line">    <span class="number">4.</span> 有较高的兼容性</span><br><span class="line">  缺点：</span><br><span class="line">    <span class="number">1.</span> 有数量和长度限制，每个cookie长度不能超过4kb，超过部分会被截掉</span><br><span class="line">    <span class="number">2.</span> 请求头上的数据容易被拦截攻击</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">``</span><span class="string">``</span>js</span><br><span class="line">  <span class="comment">//操作cookie</span></span><br><span class="line">    <span class="comment">//获取cookie：</span></span><br><span class="line">      <span class="comment">//获取所有cookie</span></span><br><span class="line">        <span class="keyword">var</span> cookies = <span class="variable language_">document</span>.<span class="property">cookie</span>;</span><br><span class="line">        <span class="comment">//返回的是一个字符串，形如&quot;cookie1=value1; cookie2=value2&quot;</span></span><br><span class="line">        <span class="comment">//使用splice(;)方法将字符串截并存储在数组中，方便提取数据</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//修改cookie：有则修改，无则添加</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;name=value; expires=expiration_date; path=path; domain=domain; secure&quot;</span>;</span><br><span class="line">    <span class="comment">//name是Cookie的名称，value是Cookie的值。</span></span><br><span class="line">    <span class="comment">//expires是失效日期，格式为&quot;Mon, 28 Jun 2023 13:24:25 GMT&quot;。</span></span><br><span class="line">    <span class="comment">//path是可访问该Cookie的路径，默认是当前文件路径。</span></span><br><span class="line">    <span class="comment">//domain是可访问Cookie的域名，默认是当前域名。</span></span><br><span class="line">    <span class="comment">//secure指定Cookie只在使用HTTPS连接的情况下才发送。</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除cookie：</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">cookie</span>=<span class="string">&quot;要删除的键名=随便; expires=一个过去时间的GMT格式&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">``</span><span class="string">``</span>js</span><br><span class="line">  <span class="variable language_">sessionStorage</span>、<span class="variable language_">localStorage</span>与cookie的区别</span><br><span class="line"></span><br><span class="line">  <span class="number">1.</span> 存储空间更大</span><br><span class="line"></span><br><span class="line">  <span class="number">2.</span> 节省网络流量</span><br><span class="line"></span><br><span class="line">  <span class="number">3.</span> 安全性更高，不用担心被截取</span><br><span class="line"></span><br><span class="line">  <span class="number">4.</span> 三者都是只能储存字符串，如果用<span class="title class_">WebStorage</span>(<span class="variable language_">sessionStorage</span>、<span class="variable language_">localStorage</span>)存储对象，会出现 [<span class="title class_">Object</span> <span class="title class_">Object</span>], 可以用 <span class="title class_">JSON</span>.<span class="property">stringify</span> 与 <span class="title class_">JSON</span>.<span class="property">parse</span>方法来解决这个问题。</span><br><span class="line"></span><br><span class="line">  <span class="number">5.</span> <span class="variable language_">sessionStorage</span>、<span class="variable language_">localStorage</span>以(key,value)的形式存储数据，cookie以键<span class="number">1</span>=值<span class="number">1</span>的形式存储数据</span><br><span class="line"></span><br><span class="line">  <span class="number">6.</span> <span class="variable language_">sessionStorage</span>、<span class="variable language_">localStorage</span>是作为<span class="variable language_">window</span>对象的属性存在，可以直接通过<span class="variable language_">window</span>.<span class="property">sessionstorage</span>、<span class="variable language_">window</span>.<span class="property">sessionstorage</span>来访问</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="4-IndexDB"><a href="#4-IndexDB" class="headerlink" title="4. IndexDB"></a>4. IndexDB</h5><h5 id="5-Web-SQL"><a href="#5-Web-SQL" class="headerlink" title="5. Web SQL"></a>5. Web SQL</h5><h4 id="缓存类"><a href="#缓存类" class="headerlink" title="缓存类"></a>缓存类</h4><h5 id="1-Cache-Storage"><a href="#1-Cache-Storage" class="headerlink" title="1. Cache Storage"></a>1. Cache Storage</h5><h5 id="2-Application-Cache"><a href="#2-Application-Cache" class="headerlink" title="2. Application Cache"></a>2. Application Cache</h5><h1 id="11-vite和webpack的区别"><a href="#11-vite和webpack的区别" class="headerlink" title="11.vite和webpack的区别"></a>11.vite和webpack的区别</h1><ul><li>Vite和Webpack都是现代化的前端构建工具，用于打包、编译、压缩和优化前端代码。</li><li>主要目的是将多个源文件（例如JavaScript，CSS和HTML文件）打包成更少的文件，以便在浏览器中加载更快，同时提供许多其他功能。</li><li>相同点</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 都可以处理各种静态资源，例如<span class="variable constant_">HTML</span>、<span class="variable constant_">CSS</span>、<span class="title class_">JavaScript</span>、图片和字体等</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 都支持模块化开发，可以使用<span class="variable constant_">ES</span> <span class="title class_">Modules</span>、<span class="title class_">CommonJS</span>、<span class="variable constant_">AMD</span>等模块规范</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 都支持开发模式和生产模式，可以对代码进行压缩、混淆和优化等处理</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 都支持插件机制，可以扩展和定制构建流程</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 都可以处理热模块替换(<span class="variable constant_">HMR</span>)，在开发过程中快速更新修改的代码</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>不同点</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 构建方式不同</span><br><span class="line">  <span class="title class_">Webpack</span>采用静态依赖关系，需要在配置文件中声明入口文件和输出文件，并通过loader和plugin进行配置。<span class="title class_">Webpack</span>的构建方式比较复杂</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Vite</span>采用动态导入方式，通过本地服务器实现快速构建和启动。<span class="title class_">Vite</span>的构建方式比较简单，无需配置多个入口文件和输出文件，同时可以自动识别模块依赖关系</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 速度不同</span><br><span class="line">  <span class="title class_">Webpack</span>在处理大型项目时，构建速度可能会变慢。这是因为<span class="title class_">Webpack</span>在进行打包时，需要处理所有的模块，包括未使用的模块。这使得<span class="title class_">Webpack</span>的构建速度变慢</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Vite</span>采用了按需编译方式，只会编译当前页面的相关模块，而不会处理未使用的模块。这使得<span class="title class_">Vite</span>的构建速度更快，可以快速启动项目和进行热更新</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 适用范围不同</span><br><span class="line">  <span class="title class_">Webpack</span>适用于大型复杂的<span class="title class_">Web</span>应用程序，可以处理各种类型的静态资源，并提供了强大的插件机制，可以满足各种复杂的构建需求</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Vite</span>适用于中小型<span class="title class_">Web</span>应用程序，以及需要快速启动和热更新的开发场景。<span class="title class_">Vite</span>提供了快速构建和启动的能力，可以让开发者更加专注于业务逻辑的开发</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>总结</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>如果需要构建大型项目或对模块化支持有较高要求，那么<span class="title class_">Webpack</span>是比较好的选择</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>而如果是在开发模式下需要快速迭代，并且对性能有要求，那么<span class="title class_">Vite</span>则是一个很好的选择</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="12-状态管理存储-localstorage"><a href="#12-状态管理存储-localstorage" class="headerlink" title="12.状态管理存储 , localstorage"></a>12.状态管理存储 , localstorage</h1><h1 id="不熟-13-H5新特新-Web-Worker、WebSocket"><a href="#不熟-13-H5新特新-Web-Worker、WebSocket" class="headerlink" title="@不熟 13.H5新特新:Web Worker、WebSocket"></a>@不熟 13.H5新特新:Web Worker、WebSocket</h1><ul><li>Web Worker</li><li>WebSocket</li></ul><h1 id="14-Vue-生命周期的理解"><a href="#14-Vue-生命周期的理解" class="headerlink" title="14.Vue 生命周期的理解"></a>14.Vue 生命周期的理解</h1><h3 id="vue2"><a href="#vue2" class="headerlink" title="vue2"></a>vue2</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="title function_">beforeCreate</span>()</span><br><span class="line">实例完全被创建之前，会执行这个函数</span><br><span class="line"><span class="title function_">beforeCreate</span>()执行时，data和methods中的数据还没有被初始化</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="title function_">created</span>() </span><br><span class="line">在created中，data和methods都已经被初始化好了</span><br><span class="line">如果要调用methods中的方法，或者操作data中的数据，最早只能在created中操作</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> <span class="title function_">beforeMount</span>()</span><br><span class="line">模板已经在内存中编译完成，但是尚未把模板渲染到页面中</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> <span class="title function_">mounted</span>()</span><br><span class="line">内存中的模板已经真实的挂载到页面中，用户已经可以看到渲染好的页面</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> <span class="title function_">beforeUpdate</span>()</span><br><span class="line">当执行beforeUpdate的时候，页面中的显示的数据还是旧的，但data数据是最新的，页面尚未和最新的数据保持同步</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> <span class="title function_">updated</span>()</span><br><span class="line">updated事件执行的时候，页面和data数据已经保持同步了，都是最新的</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> <span class="title function_">beforeDestroy</span>() </span><br><span class="line">实例销毁前调用vm.$destroy()时触发，实例被销毁的前夕</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span> <span class="title function_">destroyed</span>()</span><br><span class="line">实例销毁完毕，该钩子被调用后，对应<span class="title class_">Vue</span>实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。（以后页面就无法动态更新数据了。也就是说无法数据驱动视图。）</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>vue2常用的生命钩子</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="title function_">mounted</span>(执行一些初始化操作):发送ajax请求、启动定时器、绑定自定义事件、订阅消息</span><br><span class="line"><span class="number">2.</span> <span class="title function_">beforeDestroy</span>(执行一些收尾工作)：清除定时器、解绑自定义事件、取消订阅消息</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>关于销毁vue实例</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 销毁后借助<span class="title class_">Vue</span>开发者工具看不到任何信息。</span><br><span class="line"><span class="number">2.</span> 销毁后自定义事件会失效，但原生<span class="variable constant_">DOM</span>事件依然有效。</span><br><span class="line"><span class="number">3.</span> 一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="vue3选项式"><a href="#vue3选项式" class="headerlink" title="vue3选项式"></a>vue3选项式</h3><ul><li>vue3选项API，生命周期钩子是被暴露Vue实例上的选项，只需要调用这个方法并为这个生命周期钩子编写代码。</li><li>vue3选项式API生命周期与vue2大致相同，beforeDestroy()、destroyed()改为beforeUnmount()、unmounted(),实际上作用和用法是一样的</li></ul><h3 id="vue3组合式"><a href="#vue3组合式" class="headerlink" title="vue3组合式"></a>vue3组合式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> steup 创建实例前</span><br><span class="line"><span class="number">2.</span> onBeforeMount 挂载<span class="variable constant_">DOM</span>前</span><br><span class="line"><span class="number">3.</span> onMounted 挂载<span class="variable constant_">DOM</span>后</span><br><span class="line"><span class="number">4.</span> onBeforeUpdate 更新组件前</span><br><span class="line"><span class="number">5.</span> onUpdate 更新组件后</span><br><span class="line"><span class="number">6.</span> onBeforeUnmount 卸载销毁前</span><br><span class="line"><span class="number">7.</span> onUnmounted 卸载销毁后 </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>总结</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 与vue2、vue选项式想比，去掉了两个生命周期<span class="title function_">API</span>(beforeCreate、created)，添加了setup</span><br><span class="line"><span class="number">2.</span> 方法名发生变化，名称前多了on，中间使用驼峰式命名</span><br><span class="line"><span class="number">3.</span> 卸载组件的生命周期变化：onBeforeUnmount 、onUnmounted</span><br><span class="line"><span class="number">4.</span> 同一个生命周期可以触发多次</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="15-谈一谈对-MVVM-的理解？"><a href="#15-谈一谈对-MVVM-的理解？" class="headerlink" title="15.谈一谈对 MVVM 的理解？"></a>15.谈一谈对 MVVM 的理解？</h1><ul><li>MVVM是 Model-View-ViewModel 的缩写</li></ul><blockquote><p>Model：数据模型<br>View：ui组件<br>ViewModel：一个同步View 和 Model的对象，连接Model和View</p></blockquote><ul><li>在MVVM架构下，viewmodel通过双向数据绑定把model与view连接起来，model与view没有直接联系，</li><li>model与view之间的交是相互的，因此view数据的变化会同步到model中，model数据的变化也会立即反应到view上</li><li>model和view之间的同步工作是完全自动的，无需人为操作</li></ul><h1 id="16-Vue-实现双向数据绑定的原理？"><a href="#16-Vue-实现双向数据绑定的原理？" class="headerlink" title="16.Vue 实现双向数据绑定的原理？"></a>16.Vue 实现双向数据绑定的原理？</h1><h3 id="vue2-1"><a href="#vue2-1" class="headerlink" title="vue2"></a>vue2</h3><ul><li>在组件创建时，vue会对对组件的data中的每个属性进行代理</li><li>当组件中任何一个属性发生变化时，vue会通过Object.defineProperty()方法重新定义该属性的setter方法，从而在属性被重新赋值时触发对应的wather更新对应的DOM节点</li></ul><h3 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h3><ul><li>Vue3的双向数据绑定底层使用了Proxy API来进行代理。</li><li>在组件创建时，Vue3会对组件的data中的每个属性进行代理，使用了Proxy中的handler中的set方法，当组件中的任何一个属性发生变化时，就会触发set方法，从而更新对应的DOM节点。</li></ul><h1 id="17-Vue2-x-中如何检测数组的变化？"><a href="#17-Vue2-x-中如何检测数组的变化？" class="headerlink" title="17.Vue2.x 中如何检测数组的变化？"></a>17.Vue2.x 中如何检测数组的变化？</h1><ul><li>通过vue重写后的7个数组方法(push，pop，shift，unshift，sort，splice，reverse)检测数组的变化</li><li>vue将data中的数组，进行了原型链重写。通过原型链指向了重新定义后的数组方法，当调用数组api时，可以通知依赖更新。如果数组中包含引用类型，会对数组内的引用类型再次监控</li></ul><h1 id="不熟-18-vue2-x-和-vuex3-x-渲染器的-diff-算法分别说一下？"><a href="#不熟-18-vue2-x-和-vuex3-x-渲染器的-diff-算法分别说一下？" class="headerlink" title="不熟@ 18.vue2.x 和 vuex3.x 渲染器的 diff 算法分别说一下？"></a>不熟@ 18.vue2.x 和 vuex3.x 渲染器的 diff 算法分别说一下？</h1><h3 id="vue2-2"><a href="#vue2-2" class="headerlink" title="vue2"></a>vue2</h3><h3 id="vue3-1"><a href="#vue3-1" class="headerlink" title="vue3"></a>vue3</h3><h1 id="19-Vue-的路由实现"><a href="#19-Vue-的路由实现" class="headerlink" title="19.Vue 的路由实现"></a>19.Vue 的路由实现</h1><ul><li>路由的原理： 通过改变URL，在不重新请求页面的情况下，更新页面视图</li><li>有两种：HashHistory路由、history路由</li></ul><h3 id="HashHistory路由"><a href="#HashHistory路由" class="headerlink" title="HashHistory路由"></a>HashHistory路由</h3><ul><li>vue默认使用hash路由</li><li>hash(‘#’)的作用是加载url中指示的网页的位置</li><li>HashHistory路由的特点</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 路由地址会有#</span><br><span class="line"><span class="number">2.</span> <span class="string">`#`</span>后面的内容不会传给服务器，也就是说不会重新刷新页面，路由切换也不会重新加载页面</span><br><span class="line"><span class="number">3.</span> 每次改变<span class="title function_">hash</span>(<span class="variable language_">window</span>.<span class="property">localtion</span>.<span class="property">hash</span>),都会在浏览器增加一个历史记录</span><br><span class="line">  举例：</span><br><span class="line">  <span class="attr">http</span>:<span class="comment">//localhost:8080/#/a </span></span><br><span class="line">  <span class="comment">//变为 如下地址，浏览器访问历史中会增加一个记录</span></span><br><span class="line">  <span class="attr">http</span>:<span class="comment">//localhost:8080/#/b </span></span><br><span class="line"><span class="number">4.</span> 可以为hash的改变添加监听事件<span class="string">`window.addEventListener(&quot;hashchange&quot;,funcRef,false)`</span>　　</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>HashHistory路由的两个方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> hashHistory.<span class="title function_">push</span>() 将路由添加到浏览器访问历史的栈顶,之前的路由还存在，可以返回之前路由</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> hashHistory.<span class="title function_">replice</span>()  将路由替换掉当前路由，当前路由会成为最新路由,之前的路由会被覆盖，无法返回之前路由</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="history路由"><a href="#history路由" class="headerlink" title="history路由"></a>history路由</h3><ul><li><code>HIstory interface</code>是浏览器历史记录栈提供的接口，通过back()、forward()、go()等方法，可以读取浏览器历史记录栈的信息，进行各种跳转操作</li><li>history路由原理</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">利用History interface在H5中新增方法pushState()、replaceState(),对浏览器历史记录栈进行修改</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>特点</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> history路由模式，实现单页面的url中没有#,当用户改变路由时，会向服务器发送请求</span><br><span class="line"><span class="number">2.</span> 为了避免这种情况，所以history路由实现方式需要服务器的支持，需要把所有的路由都定向到根页面</span><br><span class="line"><span class="number">3.</span> 在<span class="title class_">HTML5</span> <span class="title class_">History</span> 的构造函数中监听使用<span class="title function_">popState</span>(<span class="variable language_">window</span>.<span class="property">onpopstate</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>history路由的两个方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// stateObject:当浏览器跳转到新的状态时，将触发Popstate事件，该事件将携带这个stateObject参数的副本</span></span><br><span class="line"><span class="comment">// title:所添加记录的标题</span></span><br><span class="line"><span class="comment">// url:所添加记录的url</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 和hashHistory.push()功能相似，将路由添加到浏览器访问历史的栈顶,之前的路由还存在，可以返回之前路由</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">pushState</span>(stateObject,title,url) </span><br><span class="line"></span><br><span class="line"><span class="comment">//和hashHistory.replace()功能相似，将路由替换掉当前路由，当前路由会成为最新路由,之前的路由会被覆盖，无法返回之前路由</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">history</span>,<span class="title function_">replaceState</span>(stateObject,title,url)  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="两种路由模式的区别"><a href="#两种路由模式的区别" class="headerlink" title="两种路由模式的区别"></a>两种路由模式的区别</h3><ol><li>history模式设置的新的URL可以是与当前URL同源的任意URL<br>hash模式只可修改#后边的部分，故只可设置与当前文档同文档的URL</li><li>history模式通过stateObject可以添加任意类型的数据到记录中<br>hash模式只可添加短字符串</li><li>history模式可额外设置title属性后供后续使用<br>hash模式没有该功能</li><li>history模式会将URL修改得就和正常请求后端的URL一样，如后端没有配置对应的路由处理，则会返回404错误<br>hash模式只改变#后面的内容，跳转路由不刷新页面，故不会向后端发送请求</li></ol><h3 id="两种路由模式跳转API的区别"><a href="#两种路由模式跳转API的区别" class="headerlink" title="两种路由模式跳转API的区别"></a>两种路由模式跳转API的区别</h3><p>API</p><p>hash模式</p><p>history模式</p><p>push</p><p>hashHistory.push()</p><p>window.history.pushState()</p><p>replice</p><p>hashHistory.replice()</p><p>window.history,replaceState()</p><p>go</p><p>window.history.go</p><p>window.history.go</p><p>back</p><p>window.history.go(-1)</p><p>window.history.go(-1)</p><p>forward</p><p>window.history.go(1)</p><p>window.history.go(1)</p><h1 id="20-vuex和pina的区别"><a href="#20-vuex和pina的区别" class="headerlink" title="20.vuex和pina的区别?"></a>20.vuex和pina的区别?</h1><h3 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h3><ul><li>核心属性：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="attr">state</span>:单一状态树，用来存储所有的共享数据</span><br><span class="line">   <span class="comment">//调用方法：</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.全局数据名称</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="attr">getters</span>:状态获取，相当于<span class="string">`state`</span>的计算属性,具有返回值的方法</span><br><span class="line">   <span class="comment">//调用方法：</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.方法名</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> <span class="attr">mutation</span>:触发同步事件，用于修改state中存储的数据</span><br><span class="line">   <span class="comment">//建议通过mutation操作state中的数据，虽然操作复杂，但可以集中监控state里所有数据的变化</span></span><br><span class="line">   <span class="comment">//直接操作state，state里的数据是无法监控的</span></span><br><span class="line">   <span class="comment">//Mutation中不可以执行异步操作，如需异步，在Action中处理</span></span><br><span class="line">   <span class="comment">//调用方法：</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;方法名&#x27;</span>,值)</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> <span class="attr">actions</span>:触发异步事件，用于处理异步任务的，比如网络请求等</span><br><span class="line">   <span class="comment">//调用方法：</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;方法名&#x27;</span>,值)</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> <span class="attr">module</span>:将vuex进行模块拆分</span><br><span class="line">   <span class="comment">//模块化vuex，可以让每一个模块拥有自己的state、mutation、action、getters,使得结构非常清晰，方便管理</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>总结</li></ul><ol><li>修改state状态必须通过mutations</li><li>mutations只能执行同步代码，类似ajax、定时器之类的代码不能在mutations中执行</li><li>执行异步代码，要通过actions，然后将数据提交给mutations才可以完成</li><li>state的状态即共享数据可以在组件中引用</li><li>组件中可以调用action</li></ol><h3 id="pinia"><a href="#pinia" class="headerlink" title="pinia"></a>pinia</h3><ul><li>核心属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> state：用来储存全局的数据</span><br><span class="line">   <span class="comment">//访问state：</span></span><br><span class="line">   <span class="keyword">const</span> store=<span class="title function_">useStore</span>()</span><br><span class="line">   store.变量名</span><br><span class="line">   <span class="comment">//重置state：</span></span><br><span class="line">   <span class="keyword">const</span> store=<span class="title function_">useStore</span>()</span><br><span class="line">   store.$reset()</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> getter：监视计算状态的变化，有缓存功能</span><br><span class="line">   <span class="comment">//Getter 等同于 store 的 state 的计算值</span></span><br><span class="line">   <span class="comment">//调用方法</span></span><br><span class="line">   <span class="keyword">const</span> store = <span class="title function_">useStore</span>()</span><br><span class="line">   store.方法名</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> action：修改state内的全局状态数据</span><br><span class="line">   <span class="comment">//调用方法</span></span><br><span class="line">   <span class="keyword">const</span> store = <span class="title function_">useStore</span>()</span><br><span class="line">   store.方法名</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="vuex与pinia的区别"><a href="#vuex与pinia的区别" class="headerlink" title="vuex与pinia的区别"></a>vuex与pinia的区别</h3><ul><li>Vuex和Pinia都是Vue.js的状态管理库</li><li>区别</li></ul><blockquote><ol><li>vuex是vue.js官方提供的状态管理库<code>&lt;br&gt;</code><br>pinia是基于vue3且使用TS编写的轻量级状态管理库</li><li>vuex提供了更完整、更复杂的接口和功能集，如模块、插件等<code>&lt;br&gt;</code><br>pinia只提供了片段式组装store等核心需求</li><li>vuex相对稳定，文档和社区支持完善<code>&lt;br&gt;</code><br>pinia侧重于TS风格的开发方式，未来可能会提供更好的维护性和易读性</li></ol></blockquote><h1 id="21-nextTick-的作用是什么？他的实现原理是什么？"><a href="#21-nextTick-的作用是什么？他的实现原理是什么？" class="headerlink" title="21.nextTick 的作用是什么？他的实现原理是什么？"></a>21.<code>nextTick</code> 的作用是什么？他的实现原理是什么？</h1><ul><li>vue中DOM更新是异步的</li><li>vue实现响应式不是数据发生变化后，DOM立即变化，而是按一定的策略进行DOM更新的</li><li>作用</li></ul><blockquote><p>用于下次DOM更新循环结束后执行回调，在修改数据之后使用 <code>nextTick</code>，则可以在回调中获取更新后的DOM</p></blockquote><ul><li>应用场景</li></ul><blockquote><ol><li>在Vue生命周期的created()钩子函数进行的DOM操作一定要放在Vue.nextTick()的回调函数中<code>&lt;br&gt;</code><br>原因:在created()钩子函数执行的时候DOM 其实并未进行任何渲染，而此时进行DOM操作无异于徒劳，所以此处一定要将DOM操作的 js 代码放进Vue.nextTick()的回调函数中。与之对应的就是mounted()钩子函数，因为该钩子函数执行时所有的DOM挂载和渲染都已完成，此时在该钩子函数中进行任何DOM操作都不会有问题</li><li>在数据变化后要执行的某个操作，而这个操作需要使用随数据改变而改变的DOM结构的时候，这个操作都应该放进Vue.nextTick()的回调函数中。<code>&lt;br&gt;</code></li><li>需要在视图更新后，基于新的视图进行操作</li></ol></blockquote><ul><li>实现原理</li></ul><blockquote><p><code>nextTick</code>主要是使用了宏任务、微任务，定义了一个异步方法，多次调用 <code>nextTick</code>会将方法存入队列中，通过这个异步方法情况队列</p></blockquote><h1 id="22-热更新"><a href="#22-热更新" class="headerlink" title="22.热更新"></a>22.热更新</h1><ul><li>当代码发生变化时，页面会根据更新后的代码发生变化，无需重新加载页面</li></ul><h1 id="23-服务端渲染-SSR"><a href="#23-服务端渲染-SSR" class="headerlink" title="23.服务端渲染(SSR)"></a>23.服务端渲染(SSR)</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="variable constant_">SSR</span>（server side render）服务端渲染</span><br><span class="line"><span class="number">2.</span> <span class="variable constant_">CSR</span>（client side render）客户端渲染</span><br><span class="line"><span class="number">3.</span> <span class="variable constant_">SPA</span>（single page application）单页面应用</span><br><span class="line"><span class="number">4.</span> <span class="variable constant_">SEO</span>（search engine optimization）搜索引擎优化</span><br><span class="line"><span class="number">5.</span> <span class="variable constant_">SSG</span>（<span class="keyword">static</span> side generate）预渲染</span><br><span class="line"><span class="number">6.</span> <span class="variable constant_">AJAX</span>（<span class="title class_">Asynchronous</span> <span class="title class_">Javascript</span> <span class="title class_">And</span> <span class="variable constant_">XML</span>）在不重新加载整个网页的情况下，对网页的局部数据进行更新</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="什么是服务端渲染"><a href="#什么是服务端渲染" class="headerlink" title="什么是服务端渲染"></a>什么是服务端渲染</h3><blockquote><p>服务器端完成页面的DOM结果拼接，然后发送到浏览器，为其绑定状态和事件，成为完全可交互的过程</p></blockquote><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><blockquote><ol><li>前端耗时少，因为后端拼接完html，前端只需直接渲染出来</li><li>有利于SEO，因为在后端有完整的html页面，有利于爬虫爬取信息，更利于SEO</li><li>降低占用客户端资源，因为解析模板的工作完全交给后端，客户端只需解析标准的html页面即可，对客户端的资源占用更少，尤其是移动端，更省电</li><li>后端生成静态化文件，可以降低数据查询浪费的时间，对于数据变化不大的页面非常高效</li></ol></blockquote><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><blockquote><ol><li>不利于前后端分离，开发效率低</li><li>占用服务器端资源</li></ol></blockquote><h3 id="服务器端渲染的方式"><a href="#服务器端渲染的方式" class="headerlink" title="服务器端渲染的方式"></a>服务器端渲染的方式</h3><blockquote><ol><li>JSP（JavaServer Pages）</li><li>express + ejs</li><li>express + react</li><li>vue + nuxt</li></ol></blockquote><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>适用于客户端渲染的项目</li></ul><blockquote><ol><li>企业内部项目，管理平台这类不需要SEO的项目，使用客户端渲染能能够提高开发效率，减少服务器资源占用；</li><li>强交互项目：对于交互比较多，数据不是很固定的项目，使用客户端渲染，能够让用户更临近于原生APP体验；</li></ol></blockquote><ul><li>适用于服务端渲染的项目</li></ul><blockquote><ol><li>官网、博客网站、营销类网站：这些网站对SEO和首屏渲染速度更加注重，所以服务端渲染会是较好的选择；</li></ol></blockquote><h1 id="24-react-hooks"><a href="#24-react-hooks" class="headerlink" title="24.react-hooks"></a>24.react-hooks</h1><ul><li>什么是hooks</li></ul><blockquote><p>hooks意思是钩子，react hooks就是一堆钩子函数</p></blockquote><ul><li>作用</li></ul><blockquote><p>对函数型进行增强，让函数组件可以存储状态，可以用有处理副作用的能力，让开发可以在不使用类组件的i情况下，实现相同功能</p></blockquote><ul><li>副作用</li></ul><blockquote><ol><li>代码中只要不是把数据转换成视图的代码他就属于副作用</li><li>副作用代码：发送ajax请求，获取dom，添加点击事件</li><li>在类型组件中，一般使用生命周期函数去处理副作用，而在这些函数型组件中，我们就要使用hooks去处理这些函数</li></ol></blockquote><ul><li>常见的react hooks</li></ul><h3 id="1-useState"><a href="#1-useState" class="headerlink" title="1. useState()"></a>1. useState()</h3><blockquote><ul><li>作用：用于函数组件引入状态</li><li>useState()方法内部是使用闭包保存状态数据的</li><li>使用细节</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 接收唯一的参数即状态初始值。初始值可以是任意数据类型</span><br><span class="line"><span class="number">2.</span> 返回值为数组。数组中存储状态值和更改状态值的方法。方法名称约定以set开头。后面加上状态名称 </span><br><span class="line"><span class="number">3.</span> 方法可以被多次调用，用以保存不同的状态值</span><br><span class="line"><span class="number">4.</span> 参数可以是一个函数，函数返回什么，初始值就是什么，函数只会被调用一次，用在初始值是动态值的情况</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h3 id="2-useReducer"><a href="#2-useReducer" class="headerlink" title="2. useReducer()"></a>2. useReducer()</h3><blockquote><ul><li>作用：让函数组件保存状态</li></ul><blockquote><ul><li>使用方式和rudux的reducer相似,状态都被保存在一个特殊的地方</li><li>使用细节</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">第一个参数就是reducer函数，我们创建reducer函数去进行对数据的处理，</span><br><span class="line">第二个参数为状态的初始值</span><br><span class="line"></span><br><span class="line">函数的返回值返回一个数组，数组里面有两个值一个是存储的状态，第二个是触发action的dispatch方法</span><br><span class="line"></span><br><span class="line">自己创建的reducer函数接受两个值，一个是存储的状态另外一个就是触发的action</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote></blockquote><h3 id="3-useContext"><a href="#3-useContext" class="headerlink" title="3. useContext()"></a>3. useContext()</h3><blockquote><ul><li>作用：在跨组件层级获取数据时简化代码</li></ul></blockquote><h3 id="4-useEffect"><a href="#4-useEffect" class="headerlink" title="4. useEffect()"></a>4. useEffect()</h3><blockquote><ul><li>作用：让函数型组件拥有处理副作用的能力。类似生命周期函数</li></ul></blockquote><h3 id="5-useMemo"><a href="#5-useMemo" class="headerlink" title="5. useMemo()"></a>5. useMemo()</h3><blockquote><ul><li>作用：类似Vue中的计算属性，可以检测某个值得变化，根据变化值计算新值</li><li>useMemo会缓存计算结果。如果检测值没有发生变化，即使组件重新渲染，也不会重新计算</li><li>有助于避免在每个渲染上进行昂贵的计算</li></ul></blockquote><h3 id="6-useCallBack"><a href="#6-useCallBack" class="headerlink" title="6. useCallBack()"></a>6. useCallBack()</h3><blockquote><ul><li>作用：性能优化，缓存函数，使组件重新渲染时得到相同的函数实例</li><li>使用场景：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">当子组件通知父组件的时候，子组件内部状态没有发生改变但是还是进行了重新渲染，memo虽然解决</span><br><span class="line">子组件内部状态没有变阻止子组件重新渲染问题，但是当父组件状态改变，组件发生了重新渲染，</span><br><span class="line">新渲染过后每一次生成的改变状态的函数的实例都变了，导致传递给子组件的方法中的实例变了，</span><br><span class="line">传入的函数实例改变，子组件就会认为组件内部的状态发生了改变，他就会导致重新渲染。解决这</span><br><span class="line">问题的方法就是让传给子组件的函数实例都是同一个这里就要用到<span class="title function_">useCallBack</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h3 id="7-useRef"><a href="#7-useRef" class="headerlink" title="7. useRef()"></a>7. useRef()</h3><blockquote><ul><li>作用：获取dom元素对象,保存数据（跨组件周期）</li></ul></blockquote><h3 id="8-自定义hooks"><a href="#8-自定义hooks" class="headerlink" title="8. 自定义hooks"></a>8. 自定义hooks</h3><blockquote><ul><li>自定义hook是标准的封装和共享逻辑的方式</li><li>自定义hook是一个函数，其名称以use开头</li><li>自定义hook其实就是逻辑和内置Hook的组合</li></ul></blockquote><h3 id="9-React路由Hooks"><a href="#9-React路由Hooks" class="headerlink" title="9. React路由Hooks"></a>9. React路由Hooks</h3><ul><li>包含了四个钩子函数</li></ul><blockquote><p>useHistory()<br>useLocation()<br>useRouteMatch()<br>useParams()</p></blockquote><ul><li>作用：获取相关的路由信息</li></ul><h1 id="25-redux"><a href="#25-redux" class="headerlink" title="25.redux"></a>25.redux</h1><ol><li>相当于vue中的vuex</li><li>redux 是一个独立专门用于做状态管理的 JS 库(不是 react 插件库)</li><li>它可以用在 react, angular, vue 等项目中, 但基本与 react 配合使用</li><li>作用: 集中式管理 react 应用中多个组件共享的状态</li><li>核心概念</li></ol><blockquote><ul><li>Store</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 在 redux 里面，只有一个<span class="title class_">Store</span>，整个应用需要管理的数据都在这个<span class="title class_">Store</span>里面。</span><br><span class="line"><span class="number">2.</span> 不能直接改变<span class="title class_">Store</span>的数据，只能通过返回一个新的<span class="title class_">Store</span>去更改它。</span><br><span class="line"><span class="number">3.</span> redux提供了一个<span class="title function_">createStore</span>()方法来创建state</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>action</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">视图层发起的一个操作,通过action改变store内的数据</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Reducer</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">作用：调用action里的方法</span><br><span class="line">在redux里面，store.<span class="title function_">dispatch</span>()是 <span class="title class_">View</span>发出 <span class="title class_">Action</span> 的唯一方法</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h1 id="26-call、apply、bind的作用和区别"><a href="#26-call、apply、bind的作用和区别" class="headerlink" title="26.call、apply、bind的作用和区别"></a>26.call、apply、bind的作用和区别</h1><h3 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h3><ul><li>都可以改变函数内部的this指向</li></ul><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><ol><li>call和apply会调用函数，并且改变函数内部this指向。</li><li>call和apply传递的参数不一样，call传递参数arg1,arg2…形式apply必须数组形式[arg]</li><li>bind不回调用函数，可以改变函数内部this指向。</li></ol><h3 id="call-方法"><a href="#call-方法" class="headerlink" title="call()方法"></a>call()方法</h3><ol><li>改变函数内部this指向,同时调用该函数</li><li>语法：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fun.<span class="title function_">call</span>(thisArg,arg1,arg2,...)</span><br><span class="line"><span class="comment">//thisArg为想要指向的对象，arg1,arg2为参数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>应用场景：实现继承</li></ol><h3 id="apply-方法"><a href="#apply-方法" class="headerlink" title="apply()方法"></a>apply()方法</h3><ol><li>改变函数内部this指向,同时调用该函数</li><li>语法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">un.<span class="title function_">apply</span>(thisArg,[argsArray])</span><br><span class="line"><span class="comment">//thisArg:在fun函数允许时指定的this值</span></span><br><span class="line"><span class="comment">//argsArray:传递的值，参数必须放在数组里面</span></span><br><span class="line"><span class="comment">//返回值就是函数的返回值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>应用场景：求数组中最大值</li></ol><h3 id="bind-方法"><a href="#bind-方法" class="headerlink" title="bind()方法"></a>bind()方法</h3><ol><li>改变函数内部this指向,不会调用该函数</li><li>语法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fun.<span class="title function_">bind</span>(thisArg,arg1,arg2,...)</span><br><span class="line"><span class="comment">//thisArg:在fun函数运行时指定的this值</span></span><br><span class="line"><span class="comment">//arg1,arg2:传递的其他参数</span></span><br><span class="line"><span class="comment">//返回由指定的this值和初始化参数改造的原函数拷贝</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>应用场景：有的函数我们不需要立即调用，但是又需要改变这个函数的this指向，此时用bind再合适不过了</li></ol><h1 id="27-this指向"><a href="#27-this指向" class="headerlink" title="27.this指向"></a>27.this指向</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p>在js中，this是一个指针型变量，它动态指向当前函数的运行环境<br>在不同的场景中调用同一个函数，this的指向也可能会发生变化，<br>永远指向其所在函数的真实调用者；如果没有调用者，就指向全局对象window</p></blockquote><h3 id="this的指向"><a href="#this的指向" class="headerlink" title="this的指向"></a>this的指向</h3><ol><li>普通函数：</li></ol><ul><li>严格模式下，必须要写调用该函数的对象，有则this指向该对象，无则undefined</li><li>非严格模式下，this指向调用该函数的对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//在严格模式下，对代码的的调用必须严格的写出被调用的函数的对象，不可以有省略或者说简写。</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="string">&quot;use strict&quot;</span>  <span class="comment">//使用严格模式</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">fn</span>()；  <span class="comment">//输出undefined</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">fn</span>()； <span class="comment">//输出window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//非严格模式下，通过test()和window.test()调用函数对象，this都指向window。</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">fn</span>()；  <span class="comment">//输出window</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">fn</span>()； <span class="comment">//输出window</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>箭头函数：箭头函数的this指向于函数作用域所用的对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 创建箭头函数时，就已经确定了它的 <span class="variable language_">this</span> 指向。</span><br><span class="line"><span class="number">2.</span> 箭头函数内的 <span class="variable language_">this</span> 指向外层的 <span class="variable language_">this</span>。所以要知道箭头函数的 <span class="variable language_">this</span> 就得先知道外层 <span class="variable language_">this</span> 的指向</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>在全局作用域下，this始终指向全局对象window，无论是否是严格模式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局作用域下的this指向</span></span><br><span class="line"><span class="comment">//console.log()完整的写法是window.console.log(),window可以省略</span></span><br><span class="line"><span class="comment">//window调用了console.log()方法，所以此时this指向window</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">//输出window</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>对象中的函数：</li></ol><ul><li>普通函数：this指向对象</li><li>箭头函数：this指向window</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="function">()=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>),</span><br><span class="line">  <span class="title function_">fn</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">a</span>()  <span class="comment">//输出window</span></span><br><span class="line">obj.<span class="title function_">fn</span>() <span class="comment">//输出&#123;a: ƒ, fn: ƒ&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>构造函数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 当使用 <span class="keyword">new</span> 关键字调用构造函数时，函数中的 <span class="variable language_">this</span> 指向实例新对象</span><br><span class="line"><span class="number">2.</span> 直接调用，<span class="variable language_">this</span>指向调用者</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6"><li>事件绑定中的this</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 行内绑定,<span class="variable language_">this</span>指向<span class="variable language_">window</span></span><br><span class="line"><span class="number">2.</span> 动态绑定与事件监听,<span class="variable language_">this</span>指向节点对象</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="7"><li>改变this指向的方法:call()、apply()、bind()</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//call()方法，改变this同时调用函数</span></span><br><span class="line">函数名称.<span class="title function_">call</span>(obj,arg1,arg2…argN);</span><br><span class="line"></span><br><span class="line"><span class="comment">//apply()方法，参数二是一个数组，改变this同时调用函数</span></span><br><span class="line">函数名称.<span class="title function_">apply</span>(obj,[arg1,arg2…,argN]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//bind()方法，和call类似，改变this，但不会调用函数</span></span><br><span class="line">函数名称..<span class="title function_">bind</span>(obj);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="28-垃圾回收机制"><a href="#28-垃圾回收机制" class="headerlink" title="28.垃圾回收机制"></a>28.垃圾回收机制</h1><ul><li>什么是垃圾</li></ul><blockquote><ol><li>没有引用的对象或变量</li><li>无法访问到的对象(多个对象相互引用成环)</li></ol></blockquote><ul><li>垃圾回收机制</li></ul><blockquote><p>间歇的不定期的寻找那些不再使用的对象或变量，并释放掉他们占用的内存<br>目的：防止内存泄漏，减小浏览器内存压力</p></blockquote><ul><li>检测垃圾的方式：标记清除法、引用计数法</li></ul><h3 id="标记清除法"><a href="#标记清除法" class="headerlink" title="标记清除法"></a>标记清除法</h3><p>当函数执行开始，给函数内的变量打上“进入环境”的标记，当函数执行结束后，不再被引用的变量标记为“离开环境”,将这些标记为“离开环境”的变量删除</p><h1 id="29-EventLoop-事件循环"><a href="#29-EventLoop-事件循环" class="headerlink" title="29.EventLoop(事件循环)"></a>29.EventLoop(事件循环)</h1><blockquote><ol><li>同步任务 &gt; nextTick &gt; 其他微任务 &gt; 宏任务</li><li>宏任务：I&#x2F;O、定时器、事件绑定、ajax</li><li>微任务：Promise的then、catch、finally和process的nextTick</li><li>Promise的then等方法是微任务，而Promise中的代码是同步任务</li></ol></blockquote><h1 id="30-内存溢出和内存泄漏"><a href="#30-内存溢出和内存泄漏" class="headerlink" title="30.内存溢出和内存泄漏"></a>30.内存溢出和内存泄漏</h1><h3 id="内存泄露"><a href="#内存泄露" class="headerlink" title="内存泄露"></a>内存泄露</h3><blockquote><ul><li>用动态储存分配函数内存空间，在使用完毕后未释放，导致一直占据该内存单元,直到程序结束。</li><li>常见的内存泄漏：闭包、计时器、回调、事件监听</li><li>无用的变量占据了有用的内存</li></ul></blockquote><h3 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出"></a>内存溢出</h3><blockquote><ul><li>不顾堆栈分配的局部数据块大小,向数据块中写入过多数据，导致数据越界,结果覆盖了别的数据。常在递归中发生。</li><li>内存溢出一般是内存泄漏造成的，会造成浏览器内存不足，崩溃掉</li></ul></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客部署github</title>
      <link href="/post/b2004f8f.html"/>
      <url>/post/b2004f8f.html</url>
      
        <content type="html"><![CDATA[<h1 id="基于-Hexo-从零开始搭建个人博客（二）"><a href="#基于-Hexo-从零开始搭建个人博客（二）" class="headerlink" title="基于 Hexo 从零开始搭建个人博客（二）"></a>基于 Hexo 从零开始搭建个人博客（二）</h1><h2 id="将静态博客挂载到-GitHub-Pages"><a href="#将静态博客挂载到-GitHub-Pages" class="headerlink" title="将静态博客挂载到 GitHub Pages"></a><a href="#%E5%B0%86%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%8C%82%E8%BD%BD%E5%88%B0-GitHub-Pages" title="将静态博客挂载到 GitHub Pages"></a>将静态博客挂载到 GitHub Pages</h2><p>上一篇文章中，我们已经完成了对 GitHub 账户的注册以及 Github Pages 的创建，并且为 GitHub 配置了 SSH key, 我们将博客部署到 GitHub Pages 上即可。</p><h3 id="安装-hexo-deployer-git"><a href="#安装-hexo-deployer-git" class="headerlink" title="安装 hexo-deployer-git"></a><a href="#%E5%AE%89%E8%A3%85-hexo-deployer-git" title="安装 hexo-deployer-git"></a>安装 hexo-deployer-git</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改-config-yml-文件"><a href="#修改-config-yml-文件" class="headerlink" title="修改 _config.yml 文件"></a><a href="#%E4%BF%AE%E6%94%B9-config-yml-%E6%96%87%E4%BB%B6" title="修改 _config.yml 文件"></a>修改 _config.yml 文件</h3><p>在<code>blog-demo</code>目录下的<code>_config.yml</code>，就是整个<code>Hexo框架</code>的配置文件了。可以在里面修改大部分的配置。详细可参考官方的<a href="https://hexo.io/zh-cn/docs/configuration">配置描述</a>。</p><p>修改最后一行的配置，将repository修改为你自己的github项目地址即可。</p><blockquote><p>请检查自己的默认分支是不是<code>master</code>。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:tzy13755126023/tzy13755126023.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="部署项目到-GitHub"><a href="#部署项目到-GitHub" class="headerlink" title="部署项目到 GitHub"></a><a href="#%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E5%88%B0-GitHub" title="部署项目到 GitHub"></a>部署项目到 GitHub</h3><p>修改好配置后，运行如下命令，将代码部署到 GitHub。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>hexo clean：删除之前生成的文件，若未生成过静态文件，可忽略此命令。</li><li>hexo generate：生成静态文章，可以用<code>hexo g</code>缩写</li><li>hexo deploy：部署文章，可以用<code>hexo d</code>缩写</li></ul><p><img src="https://bu.dusays.com/2022/05/26/628e5ef06d42a.jpg" alt="null"></p><blockquote><p>注意：deploy时可能要你输入 username 和 password。</p></blockquote><p>如果出现<code>Deploy done</code>，则说明部署成功了。</p><p><img src="https://bu.dusays.com/2022/05/26/628e5f017030e.jpg" alt="null"></p><p>打开浏览器访问：<a href="https://tzy13755126023.github.io/">https://tzy13755126023.github.io</a> ，这时候我们就可以看到博客内容了。</p><p><img src="https://bu.dusays.com/2022/05/26/628e5f7360e9c.webp" alt="null"></p><blockquote><p>如果出现了本地 css 样式正常，部署到 github 上样式错乱，请移步 <a href="https://fe32.top/articles/hexo1612/">Hexo + Butterfly 一些常见问题</a> 一文，其中提到过关于 本地样式正常，部署后就样式错乱的问题。</p></blockquote><h2 id="设置个人域名"><a href="#设置个人域名" class="headerlink" title="设置个人域名"></a><a href="#%E8%AE%BE%E7%BD%AE%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D" title="设置个人域名"></a>设置个人域名</h2><p>现在你的个人网站的地址是 <code>yourname.github.io</code>。如果觉得不够定制化，可以购买一个专属域名。</p><blockquote><p>这一步不是必要的，如果目前还不想买域名可以先跳过。</p></blockquote><p>腾讯云、阿里云等都是不错的选择，博主选择的阿里云的<code>.com</code>。购买域名后，实名认证进入阿里云控制台，点云解析进去，找到你刚买的域名，点进去添加两条解析记录，记录值 请填写<code>&lt;用户名&gt;.github.io</code>，如下图所示：</p><p><img src="https://bu.dusays.com/2022/05/26/628e6464cee7b.jpg" alt="null"></p><p>以我的域名<code>fe32.top</code>为例，进行如下说明：</p><p>主机记录</p><p>解释</p><p>www</p><p>解析后的域名为 <a href="http://www.fe32.top/">www.fe32.top</a></p><p>@</p><p>直接解析主域名 yafine-blog.cn</p><p>*</p><p>泛解析，匹配其他所有域名 *.yafine-blog.cn</p><p>mail</p><p>将域名解析为 mail.yafine-blog.cn，通常用于解析邮箱服务器</p><p>二级域名</p><p>如 abc.yafine-blog.cn，填写 abc</p><p>手机网站</p><p>如 m.yafine-blog.cn，填写 m</p><p>显性URL</p><p>不支持泛解析（泛解析：将所有子域名解析到同一地址）</p><blockquote><p>将域名指向云服务器，请选择「A」； 将域名指向另一个域名，请选择「CNAME」； 建立邮箱请选择「MX」，根据邮箱服务商提供的 MX 记录填写。</p></blockquote><p>记录类型</p><p>解释</p><p>A</p><p>用来指定域名的 IPv4 地址（如 8.8.8.8），如果需要将域名指向一个 IP 地址，就需要添加 A 记录。</p><p>CNAME</p><p>如果需要将域名指向另一个域名，再由另一个域名提供 IP 地址，就需要添加 CNAME 记录。</p><p>MX</p><p>如果需要设置邮箱，让邮箱能收到邮件，就需要添加 MX 记录。</p><p>TXT</p><p>在这里可以填写任何东西，长度限制 255。绝大多数的 TXT 记录是用来做 SPF 记录（反垃圾邮件）</p><p>NS</p><p>域名服务器记录，如果需要将子域名交给其他 DNS 服务商解析，就需要添加 NS 记录。</p><p>AAAA</p><p>用来指定主机名（或域名）对应的 IPv6 地址（例如：ff06:0:0:0:0:0:0:c3）记录。</p><p>SRV</p><p>记录了哪台计算机提供了哪个服务。格式为：服务的名字、点、协议的类型，例如：_xmpp-server_tcp。</p><p>显性 URL</p><p>从一个地址 301 重定向到另一个地址的时候，就需要添加显性 URL 记录（注：DNSPod 目前只支持 301 重定向）。</p><p>隐性 URL</p><p>类似于显性 URL，区别在于隐性 URL 不会改变地址栏的域名。</p><blockquote><p>这时候你的项目根目录应该会出现一个名为<code>CNAME</code>的文件。如果没有的话，打开博客<code>/source</code>目录，我的是<code>G:/hexo-blog/blog-demo/source</code>，新建<code>CNAME</code>文件，注意没有后缀。然后在里面写上你的域名(例如：fe32.top)，保存。最后运行<code>hexo g</code>、<code>hexo d</code>上传到<code>github</code>。这样到最后当你在地址栏输入<code>xxx.github.io</code>时，才会自动跳转到你的域名。</p></blockquote><p>打开你的<code>github</code>博客项目，点击<code>settings</code>，点击<code>Pages</code>，拉到下面<code>Custom domain</code>处，填上你自己的域名 ，保存。</p><p><img src="https://bu.dusays.com/2022/05/26/628e66b35afc6.webp" alt="null"></p><p>部署成功后，再打开你的浏览器，输入你自己的专属域名，即可看到你的博客网站！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ts概述</title>
      <link href="/post/e75fe64f.html"/>
      <url>/post/e75fe64f.html</url>
      
        <content type="html"><![CDATA[<h1 id="来吧，一起对-TypeScript-扫盲吧！"><a href="#来吧，一起对-TypeScript-扫盲吧！" class="headerlink" title="来吧，一起对 TypeScript 扫盲吧！"></a>来吧，一起对 TypeScript 扫盲吧！</h1><p>对于前端小伙伴来说，TypeScript 肯定都不陌生，但本人之前一直对 TypeScript 了解的不多，这次决定全面学习一下 TypeScript 并总结成博客文章</p><p>废话不多说，咱直接就开始吧 👊</p><h3 id="TypeScript-概览"><a href="#TypeScript-概览" class="headerlink" title="TypeScript 概览"></a>TypeScript 概览</h3><ol><li><p><strong>TypeScript 是什么？</strong></p><p>简单理解就是 TypeScript 是增加了类型约束的 JavaScript，并且可以被编译成原生 JavaScript。</p></li><li><p><strong>为什么需要 TypeScript？</strong></p><p>a. 与弱类型的 JS 结合，在编译期间增强类型检查，提前发现可能的缺陷</p><p>b. 通过强类型约束可以放心地进行多人协作开发，保证项目的可维护性</p><p>c. 与代码编辑器集成，提供自动补全、引用跳转等实用功能，提升开发效率</p></li></ol><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>下面来看看 TypeScript 的基本用法</p><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><h5 id="简单类型介绍"><a href="#简单类型介绍" class="headerlink" title="简单类型介绍"></a>简单类型介绍</h5><p>对于简单类型呢，就是 string、number、boolean、undefined 和 null，比较基础:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">num</span>: <span class="built_in">number</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">isAfternoon</span>: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">result</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">variable</span>: <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="自动推断类型"><a href="#自动推断类型" class="headerlink" title="自动推断类型"></a>自动推断类型</h5><p>在某些场景，ts 是可以自己推断出类型的，比如:</p><ul><li>初始化赋值的时候</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myName = <span class="string">&#x27;Daniel Yang&#x27;</span>;</span><br><span class="line"></span><br><span class="line">myName = <span class="number">123</span>; <span class="comment">// 让我们看看将数字类型赋值给 myName 会发生什么？</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>duang~ ts 发出了报错:</code>👇</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c3ed5af315e94c5a95b4eb9ee3ffd7f1~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="demo.png"></p><ul><li>对函数的返回值</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hi, My name is <span class="subst">$&#123;name&#125;</span>.`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ts 会自动推断出返回值类型:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f2e079b1994b4b60b849916d7b52e991~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="demo.png"></p><ul><li>存在比较明显的上下文推断</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 map 方法中 ts 能推断出遍历元素的类型:</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d2f9ab26f35e408abf01af85410a80e3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="demo.png"></p><p>在这些场景下由于 ts 能推断出具体类型，所以是可以省略类型注释的，还能减少代码的长度😬</p><h5 id="特别的类型"><a href="#特别的类型" class="headerlink" title="特别的类型"></a>特别的类型</h5><p>下面介绍一些特别的类型</p><p><strong>1. any</strong></p><p>在 ts 里 有一个很特殊的 <code>any</code> 类型，对于不知道具体类型 或者就是不想写类型的情况，可以使用 <code>any</code> 来声明</p><p>不过这样会导致 ts 对该变量禁用检查，丢失掉 ts 该有的作用，所以需要避免过度使用 <code>any</code></p><p><strong>2. unknown</strong></p><p><code>unknown</code> 代表着任意的值，它和 <code>any</code> 非常像，但由于对 unknown 进行任意操作都是不合法的，所以它比直接使用 <code>any</code> 更安全</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fnWithAny</span>(<span class="params">a: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    a.<span class="title function_">b</span>(); <span class="comment">// ✅ it&#x27;s OK.</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fnWithUnknown</span>(<span class="params">a: <span class="built_in">unknown</span></span>) &#123;</span><br><span class="line">    a.<span class="title function_">b</span>(); <span class="comment">// ❌ error: a is of type &#x27;unknown&#x27;.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3. never</strong></p><p><code>never</code> 意味着永远不会发生，就像那年秋天，咳咳，扯远了。。。🤷‍♂️</p><p>对于抛出异常会提前终止执行的函数来说，适合对其返回类型声明为 never：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fail</span>(<span class="params"></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;oops&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看起来好像没啥用🤐</p><p>但其实 <code>never</code> 非常适合用于防止对联合类型有遗漏使用的情况，例如:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Shape</span> = <span class="string">&#x27;circle&#x27;</span> | <span class="string">&#x27;square&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">shape</span>: <span class="title class_">Shape</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (shape) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;circle&#x27;</span>:</span><br><span class="line">        <span class="comment">// some logic</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;square&#x27;</span>:</span><br><span class="line">        <span class="comment">// some logic</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>: <span class="comment">// 按照正常逻辑是走不到 default 分支的</span></span><br><span class="line">        <span class="keyword">const</span> <span class="attr">val</span>: <span class="built_in">never</span> = shape; <span class="comment">// 此时 shape 为 never 类型</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>有意思的地方来了</code>，如果有一天大家对 Shape 增加了新类型 <code>star</code>，但是忘记去新增 switch 的 case 分支，此时 default 分支里 ts 会报错导致代码编译不通过，将这个遗漏 case 分支的隐患暴露出来！</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb500b6faa734bdcb48fc598a77290c0~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="demo.png"> <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/692e531d3e424c68b6f0d55d539230f7~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="demo.png"></p><p>绝 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/473e2fc69da448afa2b08cc31f9960a3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="image.png"></p><p><strong>4. void</strong></p><p><code>void</code> 意味着函数没有返回值或不返回任何明确的值：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">noop1</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;noop&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">noop2</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Just nothing.&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="复杂类型"><a href="#复杂类型" class="headerlink" title="复杂类型"></a>复杂类型</h4><p>接下来咱们来看下如何在 ts 里给复杂对象添加类型声明</p><p>首先来认识一下 <code>type</code> 和 <code>interface</code> 关键字</p><h5 id="1-type-类型别名"><a href="#1-type-类型别名" class="headerlink" title="1. type 类型别名"></a>1. type 类型别名</h5><p>在 ts 里，我们可以使用 <code>type</code> 关键词来给任意类型添加命名，这样可以方便引用和复用:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加 Point 的类型别名</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Point</span> = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printCoord</span>(<span class="params">pt: Point</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;coordinate&#x27;s x and y is: &quot;</span>, pt.<span class="property">x</span>, pt.<span class="property">y</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同时我们可以使用 <code>&amp;</code> 符号将多个 type 进行<strong>组合</strong>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Animal</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">eat</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DogAction</span> = &#123;</span><br><span class="line">    <span class="attr">bark</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    <span class="attr">walk</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Dog</span> = <span class="title class_">Animal</span> &amp; <span class="title class_">DogAction</span>; <span class="comment">// 组合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">dog</span>: <span class="title class_">Dog</span>;</span><br><span class="line">dog.<span class="title function_">walk</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-interface-接口类型"><a href="#2-interface-接口类型" class="headerlink" title="2. interface 接口类型"></a>2. interface 接口类型</h5><p><code>interface</code> 是另一种用来声明对象类型的方式:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printCoord</span>(<span class="params">pt: Point</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;coordinate&#x27;s x and y is: &quot;</span>, pt.<span class="property">x</span>, pt.<span class="property">y</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以使用 <code>extends</code> 关键字对 interface 进行<strong>继承</strong>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">eat</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123; <span class="comment">// 继承</span></span><br><span class="line">    <span class="attr">bark</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    <span class="attr">walk</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">dog</span>: <span class="title class_">Dog</span>;</span><br><span class="line">dog.<span class="title function_">walk</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>既然有两种类型声明的方式，那么问题来了，<code>type</code> 和 <code>interface</code> 有啥区别呢？🤔</p><h5 id="type-和-interface-的区别"><a href="#type-和-interface-的区别" class="headerlink" title="type 和 interface 的区别"></a>type 和 interface 的区别</h5><p><code>type</code> 和 <code>interface</code> 主要有以下几个区别:</p><ol><li><p>interface 只能声明对象类型，但 type 除了对象类型以外，还可以声明简单类型和 union 联合类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象类型</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">desc</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Info</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">desc</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type 还可以声明简单类型和联合类型</span></span><br><span class="line"><span class="keyword">type</span> name = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> value = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>interface 的重复声明可以合并，然而 type 不能重复声明:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// interface 可以重复声明，声明的属性会进行合并</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    <span class="attr">desc</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Info</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Info</span> = &#123; <span class="comment">// ❌ Error: type 不能重复声明</span></span><br><span class="line">    <span class="attr">desc</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>type 和 interface 实现类型扩展的方式不同</p><p>type 通过 <code>&amp;</code> 符号进行类型合并，而 interface 通过 <code>extends</code> 关键词实现继承</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> B <span class="keyword">extends</span> A &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">🤗 <span class="comment">// interface B =&gt; &#123; a: string; b: number; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B = A &amp; &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">🤗 <span class="comment">// type B =&gt; &#123; a: string; b: number; &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h5 id="3-对象"><a href="#3-对象" class="headerlink" title="3. 对象"></a>3. 对象</h5><p>讲完了类型声明的方式，我们来看看在 ts 里如何对对象进行类型声明，如下所示👇:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">desc</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同时我们可以用 <code>?</code> 和 <code>readonly</code> 修饰符来修饰对象属性:</p><ul><li><p><code>?</code> 是可选修饰符，意味着该属性可以不赋值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Info</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    phone?: <span class="built_in">string</span>; <span class="comment">// phone =&gt; string | undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>readonly</code> 是只读修饰符，表示该属性初始化后不能再次修改</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Info</span> = &#123;</span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">info</span>: <span class="title class_">Info</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Daniel&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">info.<span class="property">name</span> = <span class="string">&#x27;Tom&#x27;</span>; <span class="comment">// ❌ Error: Cannot assign to &#x27;name&#x27; because it is a read-only property.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>在使用可选属性前需要检查属性是否存在，否则 ts 会产生报错提示:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printName</span>(<span class="params">obj: &#123; first: <span class="built_in">string</span>, last?: <span class="built_in">string</span> &#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">last</span>.<span class="title function_">toUpperCase</span>()); <span class="comment">// ❌ Error: &#x27;obj.last&#x27; is possibly &#x27;undefined&#x27;.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="property">last</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">last</span>.<span class="title function_">toUpperCase</span>()); <span class="comment">// ✅ OK.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">last</span>?.<span class="title function_">toUpperCase</span>()); <span class="comment">// 或者使用 JS 的 ?. 语法糖 ✅</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于 <code>readonly</code> 来说虽然不会真的改变属性的性质，但会在编译期的类型检查期间禁止属性的重新写入:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">obj: &#123; <span class="keyword">readonly</span> message: <span class="built_in">string</span> &#125;</span>) &#123;</span><br><span class="line">    obj.<span class="property">message</span> = <span class="string">&#x27;hello&#x27;</span>; <span class="comment">// ❌ Error: Cannot assign to &#x27;message&#x27; because it is a read-only property.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>readonly</code> 修饰符与 <code>const</code> 声明挺类似的，它并不意味着属性的值完全不能修改，而是指不能再重新更新属性的引用:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PersonalInfo</span> = &#123;</span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">baseInfo</span>: &#123; <span class="comment">// baseInfo 是一个对象</span></span><br><span class="line">        <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">        <span class="attr">gender</span>: <span class="built_in">string</span>;</span><br><span class="line">        <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPersonalInfo</span>(<span class="params">person: PersonalInfo</span>) &#123;</span><br><span class="line">    person.<span class="property">baseInfo</span>.<span class="property">age</span> ++; <span class="comment">// ✅ 可以更新它的属性值</span></span><br><span class="line"></span><br><span class="line">    person.<span class="property">baseInfo</span> = &#123; <span class="comment">// ❌ 但不能更新它的引用</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Yang&#x27;</span>,</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="4-数组"><a href="#4-数组" class="headerlink" title="4. 数组"></a>4. 数组</h5><p>对数组来说，它的类型声明有两种方式，以字符串数组为例:</p><ul><li><code>string[]</code></li><li><code>Array&lt;string&gt;</code></li></ul><p>这两种写法的结果没有区别，只是第二种是泛型 <code>U&lt;T&gt;</code> 的写法，我们稍后再详细介绍泛型😌</p><p>与对象属性一样，我们也可以将数组声明为只读数组，同样有两种方式:</p><ul><li><code>ReadonlyArray&lt;string&gt;</code></li><li><code>readonly string[]</code></li></ul><p>这样使得数组内容不可更改:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">arr</span>: <span class="keyword">readonly</span> <span class="built_in">string</span>[] = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>];</span><br><span class="line"></span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">&#x27;orange&#x27;</span>; <span class="comment">// ❌ Error: Index signature in type &#x27;readonly string[]&#x27; only permits reading.</span></span><br><span class="line">arr1.<span class="title function_">push</span>(<span class="string">&#x27;orange&#x27;</span>); <span class="comment">// ❌ Error: Property &#x27;push&#x27; does not exist on type &#x27;readonly string[]&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="5-函数"><a href="#5-函数" class="headerlink" title="5. 函数"></a>5. 函数</h5><p>对函数来说，需要声明类型的地方有 <code>函数参数</code> 和 <code>函数返回值</code>，例如:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getMax</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`The max is <span class="subst">$&#123;<span class="built_in">Math</span>.max(a, b)&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同样地，我们也可以声明可选参数和只读参数:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fixed</span>(<span class="params">n: <span class="built_in">number</span>, digit?: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (digit !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n.<span class="title function_">toFixed</span>(digit);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n.<span class="title function_">toFixed</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">obj: &#123; <span class="keyword">readonly</span> a: <span class="built_in">number</span> &#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj.a is: &#x27;</span>, obj.<span class="property">a</span>);</span><br><span class="line"></span><br><span class="line">    obj.<span class="property">a</span> ++; <span class="comment">// ❌ Error: Cannot assign to &#x27;a&#x27; because it is a read-only property.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="常用类型"><a href="#常用类型" class="headerlink" title="常用类型"></a>常用类型</h4><p>接下来介绍几种常用的类型</p><h5 id="union-联合类型"><a href="#union-联合类型" class="headerlink" title="union 联合类型"></a>union 联合类型</h5><p>联合类型是将两个以上的类型组合起来的形式，表示某个值可以是其中任意一个类型:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printId</span>(<span class="params">id: <span class="built_in">number</span> | <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Your ID is: &#x27;</span>, id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">printId</span>(<span class="number">101</span>); <span class="comment">// ✅ OK.</span></span><br><span class="line"><span class="title function_">printId</span>(<span class="string">&#x27;202&#x27;</span>); <span class="comment">// ✅ OK.</span></span><br><span class="line"><span class="title function_">printId</span>(&#123; <span class="attr">id</span>: <span class="number">303</span> &#125;); <span class="comment">// ❌ Error: Argument of type &#x27;&#123; id: number; &#125;&#x27; is not assignable to parameter of type &#x27;string | number&#x27;.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>除了类型联合外，咱们还可以联合具体的值，这样在代码编辑器里还能方便地增加提示:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printText</span>(<span class="params">s: <span class="built_in">string</span>, alignment: <span class="string">&#x27;left&#x27;</span> | <span class="string">&#x27;right&#x27;</span> | <span class="string">&#x27;center&#x27;</span></span>) &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/91178b1d452d444a8da56f5e78c2feaa~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="demo.png"></p><p>💣 需要注意的是，在 ts 里使用联合类型时，只有当某个属性是所有类型所共有的才可以直接用</p><p>比如某个联合类型是 <code>string | number</code>，如果直接使用只存在于 <code>string</code> 类型上的属性和方法是会喜提报错的 🙃:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">val: <span class="built_in">string</span> | <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> val.<span class="property">split</span> === <span class="string">&#x27;function&#x27;</span>) &#123; <span class="comment">// ❌ Error: Property &#x27;split&#x27; does not exist on type &#x27;number&#x27;.</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(val.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>咱就是说在使用某一类型特有的属性之前，需要通过明确的类型判断让 ts 知道变量具体的类型，这样就能正常使用类型所对应的属性和方法了</p><p>偶总结了下 &#x3D;&gt; 至少有以下 <strong>几种方式</strong> 可以用来更明确地判断变量的类型:</p><ol><li><p>使用 <code>typeof</code> 操作符</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">padLeft</span>(<span class="params">padding: <span class="built_in">number</span> | <span class="built_in">string</span>, input: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">&#x27;number&#x27;</span>) &#123; <span class="comment">// 使用 typeof 明确变量的类型</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.<span class="title function_">repeat</span>(padding) + input;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;padding&#125;</span><span class="subst">$&#123;input&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使用 <code>in</code> 操作符</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Fish</span> = &#123; <span class="attr">swim</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Bird</span> = &#123; <span class="attr">fly</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">move</span>(<span class="params">animal: Fish | Bird</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;swim&#x27;</span> <span class="keyword">in</span> animal) &#123; <span class="comment">// 检查 swim 是否存在于 animal 原型链上，即是否为 Fish 类型</span></span><br><span class="line">        animal.<span class="title function_">swim</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        animal.<span class="title function_">fly</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使用 <code>instanceof</code> 操作符</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">logValue</span>(<span class="params">x: <span class="built_in">Date</span> | <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="title class_">Date</span>) &#123; <span class="comment">// 是否为 Date 类型实例</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="title function_">toUTCString</span>());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使用自定义类型预测方法</p><p>除了使用 JS 本身的语言能力来做，咱也可以自定义一些类型判断方法</p><p>比如我们需要判断一个变量究竟是 <code>Fish</code> 类型还是 <code>Bird</code> 类型，可以这样写:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isFish</span>(<span class="params">pet: Fish | Bird</span>): pet is <span class="title class_">Fish</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (pet <span class="keyword">as</span> <span class="title class_">Fish</span>).<span class="property">swim</span> !== <span class="literal">undefined</span>; <span class="comment">// 验证下 pet 变量上是否存在 swim 属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后放在条件判断里就好了:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_">isFish</span>(pet)) &#123;</span><br><span class="line">    pet.<span class="title function_">swim</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    pet.<span class="title function_">fly</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h5 id="enum-枚举"><a href="#enum-枚举" class="headerlink" title="enum 枚举"></a>enum 枚举</h5><p>enum 枚举是 ts 在 js 语法之外新增的特性，它允许咱们定义一组命名常量，比如:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">NumericDirection</span> &#123;</span><br><span class="line">    <span class="title class_">Up</span>, <span class="comment">// 默认从 0 开始，后面的变量如果没有赋值则继续加 1</span></span><br><span class="line">    <span class="title class_">Down</span>, <span class="comment">// 1</span></span><br><span class="line">    <span class="title class_">Left</span>, <span class="comment">// 2</span></span><br><span class="line">    <span class="title class_">Right</span>, <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">StringDirection</span> &#123;</span><br><span class="line">    <span class="variable constant_">UP</span> = <span class="string">&#x27;UP&#x27;</span>,</span><br><span class="line">    <span class="title class_">Down</span> = <span class="string">&#x27;Down&#x27;</span>,</span><br><span class="line">    <span class="title class_">Left</span> = <span class="string">&#x27;Left&#x27;</span>,</span><br><span class="line">    <span class="title class_">Right</span> = <span class="string">&#x27;Right&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简单来说就是:</p><ul><li><p>数字类型的枚举默认值为 0，后面的成员如果没有赋值则继续累加 1</p></li><li><p>字符类型的枚举必须要赋值</p></li></ul><p>枚举成员也可以是混合类型，例如这样:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">MixedType</span> &#123;</span><br><span class="line">    A, <span class="comment">// 0</span></span><br><span class="line">    <span class="attr">B</span>: <span class="string">&#x27;B&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>比较有意思的是枚举其实是真实的对象，所以在代码里可以作为值直接使用:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Response</span> &#123;</span><br><span class="line">    <span class="variable constant_">NO</span>, <span class="comment">// 0</span></span><br><span class="line">    <span class="variable constant_">YES</span>, <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为类型的值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleResponse</span>(<span class="params"><span class="keyword">type</span>: Response, message: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line"><span class="title function_">handleResponse</span>(<span class="title class_">Response</span>.<span class="property">YES</span>, <span class="string">&#x27;success&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传递给函数参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">n: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="title class_">Response</span>.<span class="property">YES</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(<span class="title class_">Response</span>.<span class="property">NO</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果是这样，那问题又来了: <code>ts 的枚举和 js 的对象有什么区别呢?</code> 👻</p><p>emm… 枚举与对象主要有两点不同:</p><ul><li><p>数字类型的枚举会生成 <code>反向映射</code>，可以通过枚举的值获取到对应的键 key:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">NumericEnum</span> &#123;</span><br><span class="line">    <span class="variable constant_">LEFT</span> = <span class="number">1</span>,</span><br><span class="line">    <span class="variable constant_">RIGHT</span> = <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">NumericEnum</span>[<span class="title class_">NumericEnum</span>.<span class="property">LEFT</span>]; <span class="comment">// &#x27;LEFT&#x27;</span></span><br><span class="line"><span class="title class_">NumericEnum</span>[<span class="number">1</span>]; <span class="comment">// &#x27;LEFT&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 让我们打印下 NumericEnum 的 key</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">NumericEnum</span>)) <span class="variable language_">console</span>.<span class="title function_">log</span>(key)</span><br><span class="line"><span class="comment">// &#x27;1&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;2&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;LEFT&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;RIGHT&#x27;</span></span><br><span class="line"><span class="comment">// 。。。不是很明白为什么要这样设计？🤷‍♂️</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>枚举成员是只读类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">NumericEnum</span>[<span class="string">&#x27;LEFT&#x27;</span>] = <span class="number">3</span>; <span class="comment">// ❌ Error: Cannot assign to &#x27;LEFT&#x27; because it is a read-only property.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h5 id="Tuple-元组"><a href="#Tuple-元组" class="headerlink" title="Tuple 元组"></a>Tuple 元组</h5><p>介绍完枚举，我们来认识下 Tuple 元组</p><p>这名字听起来很高大上，但其实。。。它就是数组而已</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e582020c1d7f4015b5f4d1f610e471a9~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="image.png"></p><p>不过在元组里可以混合着不同类型，比如: <code>pair: [string, number]</code> 这样子，它就属于元组</p><p>由于元组一般是知道元素数量和对应的类型，所以 ts 可以对元组的下标访问是否越界和具体元素的操作是否合法做检查:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">pair: [<span class="built_in">string</span>, <span class="built_in">number</span>]</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;first value is: &#x27;</span>, pair[<span class="number">0</span>]); <span class="comment">// ✅ It&#x27;s OK.</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;third value is: &#x27;</span>, pair[<span class="number">2</span>]); <span class="comment">// ❌ Error: Tuple type &#x27;[string, number]&#x27; of length &#x27;2&#x27; has no element at index &#x27;2&#x27;.</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(pair[<span class="number">1</span>].<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)); <span class="comment">// ❌ Error: Property &#x27;split&#x27; does not exist on type &#x27;number&#x27;.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为什么说是一般呢，因为元组里可以有可选元素和扩展元素，它们会造成元组的实际长度不确定</p><ul><li><p>可选元素：咱可以在元素类型后面增加 ? 表示其为可选元素，需要注意可选元素只能出现在队尾&#96;&#96;&#96;typescript<br>type TupleArray &#x3D; [number, string, boolean?];<br>const arr1: TupleArray &#x3D; [1, ‘2’]; &#x2F;&#x2F; ✅ OK.<br>const arr2: TupleArray &#x3D; [1, ‘2’, true]; &#x2F;&#x2F; ✅ OK.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li><li><p>扩展元素：和 js 语法一样，咱可以用在类型前添加 … 表示它是一个扩展元素:&#96;&#96;&#96;typescript<br>type StringNumberBooleans &#x3D; [string, number, …boolean[]]; &#x2F;&#x2F; 表示前两个元素分别是字符和数字类型，剩下的元素都是布尔类型<br>type StringBooleansNumber &#x3D; [string, …boolean[], number]; &#x2F;&#x2F; 表示第一个和最后一个元素分别是字符和数字类型，中间的元素都是布尔类型<br>type BooleansStringNumber &#x3D; […boolean[], string, number]; &#x2F;&#x2F;  表示最后两个元素分别是字符和数字类型，前面的元素都是布尔类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e2a2cefdd90c4112a3d07060de28a849~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="image.png"></p><h3 id="进阶用法"><a href="#进阶用法" class="headerlink" title="进阶用法"></a>进阶用法</h3><blockquote><p>恭喜你，能看到这里的人都是大佬，下面让我们来学一些 ts 的进阶用法😎</p></blockquote><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><h5 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h5><p>如果某个函数能够以不同的参数数量和参数类型来调用，那在 ts 里该如何对该函数进行类型声明呢？</p><p>答案是 &#x3D;&gt; 我们可以 <strong>定义多个函数签名</strong></p><p>比如我们要写一个展示日期的方法，该方法可以接收一个<code>数字类型的时间戳参数</code> 或 <code>具体年、月、日三个参数</code>，那么可以这样写函数的类型声明:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数签名</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">makeDate</span>(<span class="params">timestamp: <span class="built_in">number</span></span>): <span class="title class_">Date</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">makeDate</span>(<span class="params">year: <span class="built_in">number</span>, month: <span class="built_in">number</span>, day: <span class="built_in">number</span></span>): <span class="title class_">Date</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">makeDate</span>(<span class="params">yOrTimestamp: <span class="built_in">number</span>, month?: <span class="built_in">number</span>, day?: <span class="built_in">number</span></span>): <span class="title class_">Date</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (month !== <span class="literal">undefined</span> &amp;&amp; day !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(yOrTimestamp, month, day);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(yOrTimestamp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数调用</span></span><br><span class="line"><span class="keyword">const</span> d1 = <span class="title function_">makeDate</span>(<span class="number">123456789</span>); <span class="comment">// ✅ OK.</span></span><br><span class="line"><span class="keyword">const</span> d2 = <span class="title function_">makeDate</span>(<span class="number">2023</span>, <span class="number">7</span>, <span class="number">30</span>); <span class="comment">// ✅ OK.</span></span><br><span class="line"><span class="keyword">const</span> d3 = <span class="title function_">makeDate</span>(<span class="number">2016</span>, <span class="number">10</span>); <span class="comment">// ❌ Error: No overload expects 2 arguments, but overloads do exist that expect either 1 or 3 arguments.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>⚠️不过需要强调的是，<strong>如果能用 union 联合类型声明的，就不要用重载来声明</strong>，否则会把简单问题复杂化</p><p>比如我们需要写一个返回字符串或数组长度的方法，假设使用重载来进行类型声明:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数签名</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">len</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">len</span>(<span class="params">arr: <span class="built_in">any</span>[]</span>): <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">len</span>(<span class="params">x: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在普通调用下没有问题:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">len</span>(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">// ✅ OK.</span></span><br><span class="line"><span class="title function_">len</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// ✅ OK.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但如果像下面这样调用，ts 就会报错:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">len</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() &gt; <span class="number">0.5</span> ? <span class="string">&#x27;hello&#x27;</span> : [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// ❌ Error: </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因为此时参数类型在编译时没法确定，不能单独匹配任意一个函数签名:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cf287af4e2804c3a8bf8b68339a06fd6~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="demo.png"></p><p>但冷静下来想一想 🤔，在这种参数数量和返回值类型都相同的情况下，直接使用 union 联合类型不香吗:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">len</span>(<span class="params">x: <span class="built_in">string</span> | <span class="built_in">any</span>[]</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">len</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() &gt; <span class="number">0.5</span> ? <span class="string">&#x27;hello&#x27;</span> : [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// ✅ OK.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>完美解决 (o゜▽゜)o☆[BINGO!]</code></p><h5 id="函数泛型"><a href="#函数泛型" class="headerlink" title="函数泛型"></a>函数泛型</h5><p>接下来我们来了解下 ts 里一个比较重要的概念: <code>泛型</code></p><p>泛型是用来描述同一类型在多个值之间的关联性🌟</p><p>比如某个方法需要返回数组参数的第一个元素，虽然可以像这样写类型声明:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getFirstElement</span>(<span class="params">arr: <span class="built_in">any</span>[]</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但这样会导致方法的返回值是 <code>any</code> 类型，有点简单粗暴，表达不了返回值和参数数组的关系</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff8f10ac19c844e891b64951bfe422ff~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="demo.png"></p><p>如果返回值的类型能明确地与数组的元素类型关联上就好了😌</p><p>此时我们就可以使用 <strong>泛型</strong> 来满足这个需求，如下:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> getFirstElement&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arr</span>: <span class="title class_">Type</span>[]): <span class="title class_">Type</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>See? ! 通过在函数签名处添加一个类型参数 <code>Type</code> 并用在参数列表和返回值声明里，我们就在它们俩之间建立了联系</p><p>现在当我们调用函数时，返回值的类型将会与数组元素的类型一致:</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/127148b460f743e9a251ab3f798d776b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="demo.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1988eda0e34a4834bad6f10ec164b93e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="demo.png"></p><p>Great！🥳</p><p>同时我们还可以使用 <code>extends</code> 关键字 <strong>对泛型增加限制</strong></p><p>比如我们需要实现一个 <code>在两元素中返回 length 属性最大的那个元素</code> 方法:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> getLonger&lt;<span class="title class_">Type</span> <span class="keyword">extends</span> &#123; <span class="attr">length</span>: <span class="built_in">number</span> &#125;&gt;(<span class="attr">a</span>: <span class="title class_">Type</span>, <span class="attr">b</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a.<span class="property">length</span> &gt; b.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样就限制了该泛型必须具有 number 类型的 length 属性:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getLonger</span>(<span class="number">10</span>, <span class="number">20</span>); <span class="comment">// ❌ Error: Argument of type &#x27;number&#x27; is not assignable to parameter of type &#x27;&#123; length: number; &#125;&#x27;.</span></span><br><span class="line"><span class="title function_">getLonger</span>([<span class="number">10</span>], [<span class="number">20</span>]); <span class="comment">// ✅ OK.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><h5 id="索引签名-index-signature"><a href="#索引签名-index-signature" class="headerlink" title="索引签名 index signature"></a>索引签名 index signature</h5><p>在实际项目中会存在这样一种情况: 咱不知道一个类型里所有的属性值，但巧的是咱知道属性 key 和对应值的类型</p><p>此时就可以用索引签名来进行类型声明</p><p>比如可以这样声明一个下标是数字、值是字符串的对象:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">StringArray</span> &#123;</span><br><span class="line">    [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">myArray</span>: <span class="title class_">StringArray</span> = <span class="title function_">getStringArray</span>();</span><br><span class="line">myArrsy[<span class="number">0</span>]; <span class="comment">// type: string;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>But 只有 <code>string</code>、<code>number</code> 和 <code>symbol</code> 可以用作对象 key 的类型，这也符合 JS 语言中对象 key 类型的范围</p><p>如果对象的属性有不同类型，我们可以用 union 联合类型来声明值的类型:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">NumberOrStringDic</span> &#123;</span><br><span class="line">    [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">number</span> | <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>; <span class="comment">// ✅ It&#x27;s OK.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后，我们也可以给索引签名增加 readonly 前缀来防止属性被重新赋值:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ReadonlyStringArray</span> &#123;</span><br><span class="line">    <span class="keyword">readonly</span> [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">myArray</span>: <span class="title class_">ReadonlyStringArray</span> = <span class="title function_">getReadonlyStringArray</span>();</span><br><span class="line">myArray[<span class="number">0</span>] = <span class="string">&#x27;Daniel&#x27;</span>; <span class="comment">// ❌ Error: Index signature in type &#x27;ReadonlyStringArray&#x27; only permits reading.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="对象泛型"><a href="#对象泛型" class="headerlink" title="对象泛型"></a>对象泛型</h5><p>与函数一样，对象也存在泛型声明 🤪</p><p>假设有这样一个对象 Box，它有一个包含任意类型的 content 属性，讲道理我们可以这样声明:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Box</span> &#123;</span><br><span class="line">    <span class="attr">content</span>: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这没有问题，但使用 <code>any</code> 会导致 ts 对 <code>content</code> 属性移除了类型检查，比如:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">box</span>: <span class="title class_">Box</span> = &#123;</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;string type&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">box.<span class="title function_">content</span>(); <span class="comment">// 字符串不能直接作为方法调用，但此时 ts 没有及时给出报错🙁</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这种情况下我们就可以对 Box 对象进行泛型声明</p><p>可以这样理解下面的声明: <code>Box 的 Type 就是 content 属性的类型</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Box</span>&lt;<span class="title class_">Type</span>&gt; &#123;</span><br><span class="line">    <span class="attr">content</span>: <span class="title class_">Type</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后重点是 <strong>我们在引用 Box 类型的时候需要给出 Type 的具体类型</strong>，例如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">box</span>: <span class="title class_">Box</span>&lt;<span class="built_in">string</span>&gt; = &#123;</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;string value&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样 ts 会明确知道 <code>box.content</code> 是 <code>string</code> 类型，从对 <code>box.content</code> 的调用做出准确的检查: 🤗</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b2219a5e2dd748c0a6a04d4c3099cc7c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="demo.png"></p><p>另外我们还可以用 <code>type</code> 来声明泛型:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Box</span>&lt;<span class="title class_">Type</span>&gt; = &#123;</span><br><span class="line">    <span class="attr">content</span>: <span class="title class_">Type</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同时因为 <code>type</code> 不仅可以声明对象类型，我们还能用 <code>type</code> 来声明一些泛型的辅助类型，例如:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">OrNull</span>&lt;T&gt; = T | <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OneOrMany</span>&lt;T&gt; = T | T[];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OneOrManyOrNull</span>&lt;T&gt; = <span class="title class_">OrNull</span>&lt;<span class="title class_">OneOrMany</span>&lt;T&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OneOrManyOrNullStrings</span> = <span class="title class_">OneOrManyOrNull</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e40aa3122fe4205b6a0b2f8bea651dc~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="image.png"></p><h4 id="实用工具类型"><a href="#实用工具类型" class="headerlink" title="实用工具类型"></a>实用工具类型</h4><p>文章的最后咱们来认识一些实用的工具类型吧 🔨</p><h5 id="1-Partial"><a href="#1-Partial" class="headerlink" title="1. Partial"></a>1. Partial<Type></h5><p>返回一个与 Type 属性相同但全被设为可选的新类型:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">desc</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">optionalTodo</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">Todo</span>&gt;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   &#123;</span></span><br><span class="line"><span class="comment">       title?: string;</span></span><br><span class="line"><span class="comment">       desc?: string;</span></span><br><span class="line"><span class="comment">   &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-Required"><a href="#2-Required" class="headerlink" title="2. Required"></a>2. Required<Type></h5><p>与 Partial 相反，返回一个与 Type 属性相同但全被设为必填的新类型:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    name?: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">requiredInfo</span>: <span class="title class_">Required</span>&lt;<span class="title class_">Info</span>&gt;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">       name: string;</span></span><br><span class="line"><span class="comment">       age: number;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-Pick-lt-Type-Keys-gt"><a href="#3-Pick-lt-Type-Keys-gt" class="headerlink" title="3. Pick&lt;Type, Keys&gt;"></a>3. Pick&lt;Type, Keys&gt;</h5><p>从 Type 里挑出指定的 Keys 来构造一个新类型:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">desc</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">completed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoPreview</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">Todo</span>, <span class="string">&#x27;title&#x27;</span> | <span class="string">&#x27;completed&#x27;</span>&gt;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">       title: string;</span></span><br><span class="line"><span class="comment">       completed: boolean;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="4-Omit-lt-Type-Keys-gt"><a href="#4-Omit-lt-Type-Keys-gt" class="headerlink" title="4. Omit&lt;Type, Keys&gt;"></a>4. Omit&lt;Type, Keys&gt;</h5><p>与 Pick 相反，从 Type 里移除掉指定的 Keys 来构造一个新类型:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">desc</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">completed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoPreview</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">Todo</span>, <span class="string">&#x27;desc&#x27;</span> | <span class="string">&#x27;completed&#x27;</span>&gt;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">       title: string;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="5-Extract-lt-UnionType-ExtractedMembers-gt"><a href="#5-Extract-lt-UnionType-ExtractedMembers-gt" class="headerlink" title="5. Extract&lt;UnionType, ExtractedMembers&gt;"></a>5. Extract&lt;UnionType, ExtractedMembers&gt;</h5><p>取 UnionType 和 ExtractedMembers 的交集来构造一个新类型:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">Extract</span>&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;f&#x27;</span>&gt;; <span class="comment">// T0: &#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Extract</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | (<span class="function">() =&gt;</span> <span class="built_in">void</span>), <span class="title class_">Function</span>&gt;; <span class="comment">// T1: () =&gt; void</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="6-Exclude-lt-UnionType-ExcludedMembers-gt"><a href="#6-Exclude-lt-UnionType-ExcludedMembers-gt" class="headerlink" title="6. Exclude&lt;UnionType, ExcludedMembers&gt;"></a>6. Exclude&lt;UnionType, ExcludedMembers&gt;</h5><p>从 UnionType 里移除掉 ExtractedMembers 存在的类型来构造一个新类型:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">Exclude</span>&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&gt;; <span class="comment">// T0: &#x27;b&#x27; | &#x27;c&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Exclude</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | (<span class="function">() =&gt;</span> <span class="built_in">void</span>), <span class="title class_">Function</span>&gt;; <span class="comment">// T1: string | number</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="7-NonNullable"><a href="#7-NonNullable" class="headerlink" title="7. NonNullable"></a>7. NonNullable<Type></h5><p>从 Type 里移除掉 <code>undefined</code> 和 <code>null</code> 来构造一个新类型:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">NonNullable</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | <span class="literal">undefined</span> | <span class="literal">null</span>&gt;; <span class="comment">// T0: string | number</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ul><li><a href="https://link.juejin.cn/?target=https://www.typescriptlang.org/docs/handbook/intro.html" title="https://www.typescriptlang.org/docs/handbook/intro.html">TypeScript Handbook</a></li><li><a href="https://link.juejin.cn/?target=https://www.zhihu.com/question/354601204/answer/888551021" title="https://www.zhihu.com/question/354601204/answer/888551021">TypeScript 中的 never 类型具体有什么用？</a></li><li><a href="https://link.juejin.cn/?target=https://blog.csdn.net/qq_42501092/article/details/125799761" title="https://blog.csdn.net/qq_42501092/article/details/125799761">TypeScript 中的枚举和普通对象的区别</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微信第三方平台代开发小程序</title>
      <link href="/post/1c54e301.html"/>
      <url>/post/1c54e301.html</url>
      
        <content type="html"><![CDATA[<h1 id="【业务方案】微信小程序第三方平台代开发小程序"><a href="#【业务方案】微信小程序第三方平台代开发小程序" class="headerlink" title="【业务方案】微信小程序第三方平台代开发小程序"></a>【业务方案】微信小程序第三方平台代开发小程序</h1><p>一、写在前面</p><p> 前段时间，我在工作中遇到了微信第三方平台代开发小程序的需求。然后我发现网上相关资料并不多，并且这套方案也没有真正意义上流行起来。为了让后续同行少走弯路，我特此记录一下整个业务流程遇到的问题和相关的文档。</p><h3 id="二、微信公众平台是什么？"><a href="#二、微信公众平台是什么？" class="headerlink" title="二、微信公众平台是什么？"></a>二、微信公众平台是什么？</h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/37ac80f052184c6490f3993831774018~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="image.png"> 目的：管理微信小程序、公众号开发和发布等工作。<br>网址：<a href="https://link.juejin.cn/?target=https://mp.weixin.qq.com/" title="https://mp.weixin.qq.com/">mp.weixin.qq.com&#x2F;</a><br>登录方式：扫码</p><h3 id="三、微信开放平台是什么？"><a href="#三、微信开放平台是什么？" class="headerlink" title="三、微信开放平台是什么？"></a>三、微信开放平台是什么？</h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/21406601466a4ac28ae6f95c1e8be9d3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="image.png"></p><p>目的：管理移动app、网站h5、公众号和第三方平台使用微信生态的平台。<br>网址：<a href="https://link.juejin.cn/?target=https://open.weixin.qq.com/" title="https://open.weixin.qq.com/">open.weixin.qq.com&#x2F;</a><br>登录方式：输入账号密码</p><h3 id="四、微信开放平台和第三方平台什么区别？"><a href="#四、微信开放平台和第三方平台什么区别？" class="headerlink" title="四、微信开放平台和第三方平台什么区别？"></a>四、微信开放平台和第三方平台什么区别？</h3><p> 微信开放平台（WeChat Open Platform）是指微信为第三方开发者提供的一套开放接口和服务，允许开发者在微信生态系统中构建自己的应用和服务。它包括微信公众平台、微信小程序平台和企业微信开放平台等。</p><p> 微信第三方平台是指，在微信开放平台上注册并通过审核的，可以为微信公众号、小程序、企业微信提供服务的独立应用。</p><p> 第三方平台可以帮助企业或个人在微信生态中构建自己的服务能力，从而实现更多样化的应用和功能。第三方平台可以与微信公众号、小程序、企业微信进行授权关联，并使用微信开放平台提供的接口和能力，为这些服务提供增值应用和服务。</p><p> 因此，可以说微信开放平台是一个整体的概念，包含了微信公众平台、微信小程序平台和企业微信开放平台等不同的子平台。而微信第三方平台只是微信开放平台下的一个具体应用场景，是面向开发者进行服务的一个独立应用。</p><h3 id="五、第三方平台中商家和服务商的角色与关系"><a href="#五、第三方平台中商家和服务商的角色与关系" class="headerlink" title="五、第三方平台中商家和服务商的角色与关系"></a>五、第三方平台中商家和服务商的角色与关系</h3><p> 在服务商代商家运营公众号和小程序的场景中，通常会对商家的开放平台帐号和服务商的第三方平台帐号关系混淆。为了避免再出现此情况，开发者可参考下图理清相关关系。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/781bd3c78d634782a770ff9d655482cb~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="image.png"></p><h3 id="六、模板小程序和商家小程序"><a href="#六、模板小程序和商家小程序" class="headerlink" title="六、模板小程序和商家小程序"></a>六、模板小程序和商家小程序</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5b730f1ee1484a398ab030227433c190~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="image.png"></p><h2 id="七、如何基于模板小程序进行个别商家小程序的定制化开发"><a href="#七、如何基于模板小程序进行个别商家小程序的定制化开发" class="headerlink" title="七、如何基于模板小程序进行个别商家小程序的定制化开发"></a>七、如何基于模板小程序进行个别商家小程序的定制化开发</h2><p> 当服务商希望在小程序模板代码中结合某个商家小程序进行个性化的开发和调试，即可通过extAppid参数来完成。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7cc58842d77b40b4ae8ea8257d9565ee~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="image.png"></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8660416b7ec9479b9df9a431b02360d7~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="image.png"></p><h3 id="八、服务商如何代商家开发小程序"><a href="#八、服务商如何代商家开发小程序" class="headerlink" title="八、服务商如何代商家开发小程序"></a>八、服务商如何代商家开发小程序</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c7510d47a31448ff921b0332101832b5~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="image.png"></p><h3 id="九、代开发小程序普通模板库和标准模板库"><a href="#九、代开发小程序普通模板库和标准模板库" class="headerlink" title="九、代开发小程序普通模板库和标准模板库"></a>九、代开发小程序普通模板库和标准模板库</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0912951ed3324d7eb3a8176a2aa82b71~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="image.png"></p><h3 id="十、普通小程序开发VS第三方小程序开发"><a href="#十、普通小程序开发VS第三方小程序开发" class="headerlink" title="十、普通小程序开发VS第三方小程序开发"></a>十、普通小程序开发VS第三方小程序开发</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e8df52157a684b5cbcade587f401a99b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.image" alt="image.png"></p><h3 id="十一、前端打包不同版本代码的开发流程"><a href="#十一、前端打包不同版本代码的开发流程" class="headerlink" title="十一、前端打包不同版本代码的开发流程"></a>十一、前端打包不同版本代码的开发流程</h3><p> 目前前端使用的是一套代码，基于这套代码可以生成普通小程序、模板小程序和商家小程序。那么为了生成对应目的的小程序，前端侧需要进行运行不同的打包脚本。  可以通过在package.json中配置不同的打包命令，结合项目中不同的配置文件，从而达到一个命令产出不同目的的代码。</p><h3 id="十二、重要文档汇总"><a href="#十二、重要文档汇总" class="headerlink" title="十二、重要文档汇总"></a>十二、重要文档汇总</h3><ol><li><a href="https://link.juejin.cn/?target=https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/2.0/getting_started/terminology_introduce.html" title="https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/2.0/getting_started/terminology_introduce.html">基本概念介绍</a></li><li><a href="https://link.juejin.cn/?target=https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/2.0/getting_started/how_to_call_api.html" title="https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/2.0/getting_started/how_to_call_api.html">服务商如何代商家调用接口</a></li><li><a href="https://link.juejin.cn/?target=https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/2.0/product/how_to_dev.html" title="https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/2.0/product/how_to_dev.html">服务商如何代商家开发小程序</a></li><li><a href="https://link.juejin.cn/?target=https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/2.0/operation/thirdparty/template.html" title="https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/2.0/operation/thirdparty/template.html">小程序模板库管理</a></li><li><a href="https://link.juejin.cn/?target=https://developers.weixin.qq.com/miniprogram/dev/devtools/ext.html" title="https://developers.weixin.qq.com/miniprogram/dev/devtools/ext.html">小程序开发文档—工具</a></li><li><a href="https://link.juejin.cn/?target=https://developers.weixin.qq.com/miniprogram/dev/api/ext/wx.getExtConfig.html" title="https://developers.weixin.qq.com/miniprogram/dev/api/ext/wx.getExtConfig.html">第三方平台api</a></li></ol><h3 id="十三、补充说明"><a href="#十三、补充说明" class="headerlink" title="十三、补充说明"></a>十三、补充说明</h3><ol><li>当服务商的「普通小程序」在微信开放平台上被绑定为「开发小程序」时，开放小程序的版本管理被禁用了，也就无法向普通小程序一样进行上传体验版和发布了。</li><li>提交模板审核时的「场景标签」选择目前只支持“交易组件”。微信官方要求选择该场景标签，请确保基于该模板发布的小程序包含客服和售后功能，否则会审核不通过。（可以选择普通模板，普通模板不需要提交到微信审核，也就不存在选择场景标签了）</li><li>普通模板库不需要审核，同时也无法在后台提交ext.json。但是可以在后端调用接口给商家小程序提交代码时把 ext.json 的内容作为入参完成定制化参数的注入。</li><li>标准模板库需要在后台提交审核，同时审核弹窗中需要输入ext.json的内容。</li><li>第三方开发平台是没有商家小程序的AppSecret的，在获取用户的openId和unionId是无法跟普通小程序那样使用的。可以用这个接口替代完成<a href="https://link.juejin.cn/?target=https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/2.0/api/others/WeChat_login.html" title="https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/2.0/api/others/WeChat_login.html">developers.weixin.qq.com&#x2F;doc&#x2F;oplatfo…</a></li><li>第三方平台代开发小程序流程中的：提交代码至体验版、提交体验版去审核以及发布通过审核后的版本上线等等。这些操作都是没有后台界面去操作的（微信官方偷懒没弄），都需要通过接口的方式去操作。建议后端同事写好接口后导出一个POstMan的collection，后续可由前端自行操作。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>小程序开发攻略</title>
      <link href="/post/b3b17cda.html"/>
      <url>/post/b3b17cda.html</url>
      
        <content type="html"><![CDATA[<h1 id="小程序-登录"><a href="#小程序-登录" class="headerlink" title="小程序-登录"></a>小程序-登录</h1><h2 id="unionid和openid"><a href="#unionid和openid" class="headerlink" title="unionid和openid"></a>unionid和openid</h2><p>了解小程序登陆之前，我们写了解下小程序&#x2F;公众号登录涉及到两个最关键的用户标识：</p><ul><li><code>OpenId</code> 是一个用户对于一个小程序／公众号的标识，开发者可以通过这个标识识别出用户。</li><li><code>UnionId</code> 是一个用户对于同主体微信小程序／公众号／APP的标识，开发者需要在微信开放平台下绑定相同账号的主体。开发者可通过UnionId，实现多个小程序、公众号、甚至APP 之间的数据互通了。</li></ul><h2 id="关键Api"><a href="#关键Api" class="headerlink" title="关键Api"></a>关键Api</h2><ul><li><a href="https://link.juejin.cn/?target=https://developers.weixin.qq.com/miniprogram/dev/api/api-login.html"><code>wx.login</code></a> 官方提供的登录能力</li><li><a href="https://link.juejin.cn/?target=https://developers.weixin.qq.com/miniprogram/dev/api/signature.html%23wxchecksessionobject"><code>wx.checkSession</code></a> 校验用户当前的session_key是否有效</li><li><a href="https://link.juejin.cn/?target=https://developers.weixin.qq.com/miniprogram/dev/api/authorize.html"><code>wx.authorize</code></a> 提前向用户发起授权请求</li><li><a href="https://link.juejin.cn/?target=https://developers.weixin.qq.com/miniprogram/dev/api/api-login.html"><code>wx.getUserInfo</code></a> 获取用户基本信息</li></ul><h2 id="登录流程设计"><a href="#登录流程设计" class="headerlink" title="登录流程设计"></a>登录流程设计</h2><p>以下从笔者接触过的几种登录流程来做阐述:</p><h3 id="利用现有登录体系"><a href="#利用现有登录体系" class="headerlink" title="利用现有登录体系"></a>利用现有登录体系</h3><p>直接复用现有系统的登录体系，只需要在小程序端设计用户名，密码&#x2F;验证码输入页面，便可以简便的实现登录，只需要保持良好的用户体验即可。</p><h3 id="利用OpenId-创建用户体系"><a href="#利用OpenId-创建用户体系" class="headerlink" title="利用OpenId 创建用户体系"></a>利用OpenId 创建用户体系</h3><p>👆提过，<code>OpenId</code> 是一个小程序对于一个用户的标识，利用这一点我们可以轻松的实现一套基于小程序的用户体系，值得一提的是这种用户体系对用户的打扰最低，可以实现静默登录。具体步骤如下：</p><ol><li>小程序客户端通过 <code>wx.login</code> 获取 code</li><li>传递 code 向服务端，服务端拿到 code 调用微信登录凭证校验接口，微信服务器返回 <code>openid</code> 和会话密钥 <code>session_key</code> ，此时开发者服务端便可以利用 <code>openid</code> 生成用户入库，再向小程序客户端返回自定义登录态</li><li>小程序客户端缓存 （通过<code>storage</code>）自定义登录态（token），后续调用接口时携带该登录态作为用户身份标识即可</li></ol><h3 id="利用-Unionid-创建用户体系"><a href="#利用-Unionid-创建用户体系" class="headerlink" title="利用 Unionid 创建用户体系"></a>利用 Unionid 创建用户体系</h3><p>如果想实现多个小程序，公众号，已有登录系统的数据互通，可以通过获取到用户 unionid 的方式建立用户体系。因为 unionid 在同一开放平台下的所所有应用都是相同的，通过 <code>unionid</code> 建立的用户体系即可实现全平台数据的互通，更方便的接入原有的功能，那如何获取 <code>unionid</code> 呢，有以下两种方式：</p><ol><li>如果户关注了某个相同主体公众号，或曾经在某个相同主体App、公众号上进行过微信登录授权，通过 <code>wx.login</code> 可以直接获取 到 <code>unionid</code></li><li>结合 <code>wx.getUserInfo</code> 和 <code>&lt;button open-type=&quot;getUserInfo&quot;&gt;&lt;button/&gt;</code> 这两种方式引导用户主动授权，主动授权后通过返回的信息和服务端交互 (这里有一步需要服务端解密数据的过程，很简单，微信提供了示例代码) 即可拿到 <code>unionid</code> 建立用户体系， 然后由服务端返回登录态，本地记录即可实现登录，附上微信提供的最佳实践：<ul><li>调用 wx.login 获取 code，然后从微信后端换取到 session_key，用于解密 getUserInfo返回的敏感数据。</li><li>使用 wx.getSetting 获取用户的授权情况<ul><li>如果用户已经授权，直接调用 API wx.getUserInfo 获取用户最新的信息；</li><li>用户未授权，在界面中显示一个按钮提示用户登入，当用户点击并授权后就获取到用户的最新信息。</li></ul></li><li>获取到用户数据后可以进行展示或者发送给自己的后端。</li></ul></li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>需要获取 <code>unionid</code> 形式的登录体系，在以前（18年4月之前）是通过以下这种方式来实现，但后续微信做了调整（因为一进入小程序，主动弹起各种授权弹窗的这种形式，比较容易导致用户流失），调整为必须使用按钮引导用户主动授权的方式，这次调整对开发者影响较大，开发者需要注意遵守微信的规则，并及时和业务方沟通业务形式，不要存在侥幸心理，以防造成小程序不过审等情况。</li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abnf</span><br><span class="line">复制代码   wx.login(获取code) <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span>&gt; wx.getUserInfo(用户授权) <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span>&gt; 获取 unionid</span><br></pre></td></tr></table></figure><ol><li>因为小程序不存在 <code>cookie</code> 的概念， 登录态必须缓存在本地，因此强烈建议为登录态设置过期时间</li><li>值得一提的是如果需要支持风控安全校验，多平台登录等功能，可能需要加入一些公共参数，例如platform，channel，deviceParam等参数。在和服务端确定方案时，作为前端同学应该及时提出这些合理的建议，设计合理的系统。</li><li><code>openid</code> ， <code>unionid</code> 不要在接口中明文传输，这是一种危险的行为，同时也很不专业。</li></ol><h1 id="小程序-图片导出"><a href="#小程序-图片导出" class="headerlink" title="小程序-图片导出"></a>小程序-图片导出</h1><p>经常开发和使用小程序的同学对这个功能一定不陌生，这是一种常见的引流方式，一般同时会在图片中附加一个小程序二维码。</p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><ol><li>借助 <code>canvas</code> 元素，将需要导出的样式首先在 <code>canvas</code> 画布上绘制出来 （api基本和h5保持一致，但有轻微差异，使用时注意即可）</li><li>借助微信提供的 <code>canvasToTempFilePath</code> 导出图片，最后再使用 <code>saveImageToPhotosAlbum</code> （需要授权）保存图片到本地</li></ol><h2 id="如何优雅实现"><a href="#如何优雅实现" class="headerlink" title="如何优雅实现"></a>如何优雅实现</h2><p>根据上述的原理来看，实现是很简单的，只不过就是设计稿的提取，绘制即可，但是作为一个常用功能，每次都这样写一坨代码岂不是非常的难受。那小程序如何设计一个通用的方法来帮助我们导出图片呢？思路如下：</p><ol><li>绘制出需要的样式这一步是省略不掉的。但是我们可以封装一个绘制库，包含常见图形的绘制，例如矩形，圆角矩形，圆， 扇形， 三角形， 文字，图片减少绘制代码，只需要提炼出样式信息，便可以轻松的绘制，最后导出图片存入相册。笔者觉得以下这种方式绘制更为优雅清晰一些，其实也可以使用加入一个type参数来指定绘制类型，传入的一个是样式数组，实现绘制。</li><li>结合上一步的实现，如果对于同一类型的卡片有多次导出需求的场景，也可以使用自定义组件的方式，封装同一类型的卡片为一个通用组件，在需要导出图片功能的地方，引入该组件即可。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">javascript复制代码    </span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">CanvasKit</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">drawImg</span>(<span class="params">option = &#123;&#125;</span>) &#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">drawRect</span>(<span class="params">option = &#123;&#125;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">drawText</span>(<span class="params">option = &#123;&#125;</span>) &#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">exportImg</span>(<span class="params">option = &#123;&#125;</span>) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> drawer = <span class="keyword">new</span> <span class="title class_">CanvasKit</span>(<span class="string">&#x27;canvasId&#x27;</span>).<span class="title function_">drawImg</span>(styleObj1).<span class="title function_">drawText</span>(styleObj2)</span><br><span class="line">  drawer.<span class="title function_">exportImg</span>()</span><br></pre></td></tr></table></figure><h2 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>小程序中无法绘制网络图片到canvas上，需要通过downLoadFile 先下载图片到本地临时文件才可以绘制</li><li>通常需要绘制二维码到导出的图片上，有<a href="https://link.juejin.cn/?target=https://developers.weixin.qq.com/miniprogram/dev/api/qrcode.html">一种方式</a>导出二维码时，需要携带的参数必须做编码，而且有具体的长度（32可见字符）限制，可以借助服务端生成 <code>短链接</code> 的方式来解决</li></ol><h1 id="小程序-数据统计"><a href="#小程序-数据统计" class="headerlink" title="小程序-数据统计"></a>小程序-数据统计</h1><p>数据统计作为目前一种常用的分析用户行为的方式，小程序端也是必不可少的。小程序采取的曝光，点击数据埋点其实和h5原理是一样的。但是埋点作为一个和业务逻辑不相关的需求，我们如果在每一个点击事件，每一个生命周期加入各种埋点代码，则会干扰正常的业务逻辑，和使代码变的臃肿，笔者提供以下几种思路来解决数据埋点：</p><h2 id="设计一个埋点sdk"><a href="#设计一个埋点sdk" class="headerlink" title="设计一个埋点sdk"></a>设计一个埋点sdk</h2><p>小程序的代码结构是，每一个 Page 中都有一个 Page 方法，接受一个包含生命周期函数，数据的 <code>业务逻辑对象</code> 包装这层数据，借助小程序的底层逻辑实现页面的业务逻辑。通过这个我们可以想到思路，对Page进行一次包装，篡改它的生命周期和点击事件，混入埋点代码，不干扰业务逻辑，只要做一些简单的配置即可埋点，简单的代码实现如下：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sqf复制代码  </span><br><span class="line">  代码仅供理解思路</span><br><span class="line">  page = function(<span class="built_in">params</span>) &#123;</span><br><span class="line">    let <span class="built_in">keys</span> = <span class="built_in">params</span>.<span class="built_in">keys</span>()</span><br><span class="line">    <span class="built_in">keys</span>.<span class="keyword">forEach</span>(v =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (v === <span class="string">&#x27;onLoad&#x27;</span>) &#123;</span><br><span class="line">          <span class="built_in">params</span>[v] = function(options) &#123;</span><br><span class="line">            stat()   <span class="comment">//曝光埋点代码</span></span><br><span class="line">            <span class="built_in">params</span>[v].<span class="built_in">call</span>(this, options)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (v.includes(<span class="string">&#x27;click&#x27;</span>)) &#123;</span><br><span class="line">          <span class="built_in">params</span>[v] = funciton(event) &#123; </span><br><span class="line">            let data = event.dataset.config</span><br><span class="line">            stat(data)  <span class="comment">// 点击埋点</span></span><br><span class="line">            <span class="built_in">param</span>[v].<span class="built_in">call</span>(this)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这种思路不光适用于埋点，也可以用来作全局异常处理，请求的统一处理等场景。</p><h2 id="分析接口"><a href="#分析接口" class="headerlink" title="分析接口"></a>分析接口</h2><p>对于特殊的一些业务，我们可以采取 <code>接口埋点</code>，什么叫接口埋点呢？很多情况下，我们有的api并不是多处调用的，只会在某一个特定的页面调用，通过这个思路我们可以分析出，该接口被请求，则这个行为被触发了，则完全可以通过服务端日志得出埋点数据，但是这种方式局限性较大，而且属于分析结果得出过程，可能存在误差，但可以作为一种思路了解一下。</p><h2 id="微信自定义数据分析"><a href="#微信自定义数据分析" class="headerlink" title="微信自定义数据分析"></a><a href="https://link.juejin.cn/?target=https://developers.weixin.qq.com/miniprogram/analysis/index.html?t=18081011">微信自定义数据分析</a></h2><p>微信本身提供的数据分析能力，微信本身提供了常规分析和自定义分析两种数据分析方式，在小程序后台配置即可。借助<code>小程序数据助手</code>这款小程序可以很方便的查看。</p><h1 id="小程序-工程化"><a href="#小程序-工程化" class="headerlink" title="小程序-工程化"></a>小程序-工程化</h1><h2 id="工程化做什么"><a href="#工程化做什么" class="headerlink" title="工程化做什么"></a>工程化做什么</h2><p>目前的前端开发过程，工程化是必不可少的一环，那小程序工程化都需要做些什么呢，先看下目前小程序开发当中存在哪些问题需要解决：</p><ol><li>不支持 css预编译器,作为一种主流的 css解决方案，不论是 less,sass,stylus 都可以提升css效率</li><li>不支持引入npm包 （这一条，从微信公开课中听闻，微信准备支持）</li><li>不支持ES7等后续的js特性，好用的async await等特性都无法使用</li><li>不支持引入外部字体文件，只支持base64</li><li>没有 eslint 等代码检查工具</li></ol><h2 id="方案选型"><a href="#方案选型" class="headerlink" title="方案选型"></a>方案选型</h2><p>对于目前常用的工程化方案，webpack，rollup，parcel等来看，都常用与单页应用的打包和处理，而小程序天生是 “多页应用” 并且存在一些特定的配置。根据要解决的问题来看，无非是文件的编译，修改，拷贝这些处理，对于这些需求，我们想到基于流的 <code>gulp</code>非常的适合处理，并且相对于webpack配置多页应用更加简单。所以小程序工程化方案推荐使用 <code>gulp</code></p><h2 id="具体开发思路"><a href="#具体开发思路" class="headerlink" title="具体开发思路"></a>具体开发思路</h2><p>通过 gulp 的 task 实现：</p><ol><li>实时编译 less 文件至相应目录</li><li>引入支持async，await的运行时文件</li><li>编译字体文件为base64 并生成相应css文件，方便使用</li><li>依赖分析哪些地方引用了npm包，将npm包打成一个文件，拷贝至相应目录</li><li>检查代码规范</li></ol><p>上述实现起来其实并不是很难，但是这样的话就是一份纯粹的 gulp 构建脚本和 约定好的目录而已，每次都有一个新的小程序都来拷贝这份脚本来处理吗？显然不合适，那如何真正的实现 <code>小程序工程化</code> 呢？ 我们可能需要一个简单的脚手架，脚手架需要支持的功能：</p><ol><li>支持新建项目，创建Page，创建Component</li><li>支持内置构建脚本</li><li>支持发布小程序，也可以想办法接入Jenkins等工具做持续集成 (小程序持续集成后面会提) …</li></ol><h1 id="小程序架构"><a href="#小程序架构" class="headerlink" title="小程序架构"></a>小程序架构</h1><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd567f00fcc~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="architecture"></p><p>微信小程序的框架包含两部分 View 视图层、App Service逻辑层。View 层用来渲染页面结构，AppService 层用来逻辑处理、数据请求、接口调用。</p><p>它们在<strong>两个线程里</strong>运行。</p><p>它们在<strong>两个线程里</strong>运行。</p><p>它们在<strong>两个线程里</strong>运行。</p><p>视图层和逻辑层通过系统层的 JSBridage 进行通信，逻辑层把数据变化通知到视图层，触发视图层页面更新，视图层把触发的事件通知到逻辑层进行业务处理。</p><p>补充</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd57d4375f0~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="one-context"></p><p><strong>视图层使用 WebView 渲染，iOS 中使用自带 WKWebView，在 Android 使用腾讯的 x5 内核（基于 Blink）运行。</strong></p><p><strong>逻辑层使用在 iOS 中使用自带的 JSCore 运行，在 Android 中使用腾讯的 x5 内核（基于 Blink）运行。</strong></p><p><strong>开发工具使用 nw.js 同时提供了视图层和逻辑层的运行环境。</strong></p><p>在 Mac下 使用 js-beautify 对微信开发工具 @v1.02.1808080代码批量格式化：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gradle复制代码cd <span class="regexp">/Applications/</span>wechatwebdevtools.app<span class="regexp">/Contents/</span>Resources/<span class="keyword">package</span>.nw</span><br><span class="line"><span class="keyword">find</span> . -type f -name <span class="string">&#x27;*.js&#x27;</span> -not -path <span class="string">&quot;./node_modules/*&quot;</span> -not -path -exec js-beautify -r -s <span class="number">2</span> -p -f <span class="string">&#x27;&#123;&#125;&#x27;</span> \;</span><br></pre></td></tr></table></figure><p>在 <code>js/extensions/appservice/index.js</code> 中找到：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">javascript复制代码<span class="number">267</span>: <span class="keyword">function</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> d = <span class="title function_">c</span>(<span class="number">8</span>),</span><br><span class="line">      e = <span class="title function_">c</span>(<span class="number">227</span>),</span><br><span class="line">      f = <span class="title function_">c</span>(<span class="number">226</span>),</span><br><span class="line">      g = <span class="title function_">c</span>(<span class="number">228</span>),</span><br><span class="line">      h = <span class="title function_">c</span>(<span class="number">229</span>),</span><br><span class="line">      i = <span class="title function_">c</span>(<span class="number">230</span>);</span><br><span class="line">    <span class="keyword">var</span> j = <span class="variable language_">window</span>.<span class="property">__global</span>.<span class="property">navigator</span>.<span class="property">userAgent</span>,</span><br><span class="line">      k = -<span class="number">1</span> !== j.<span class="title function_">indexOf</span>(<span class="string">&#x27;game&#x27;</span>);</span><br><span class="line">    k || <span class="title function_">i</span>(), <span class="variable language_">window</span>.<span class="property">__global</span>.<span class="property">getNewWeixinJSBridge</span> = <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="attr">invoke</span>: b</span><br><span class="line">      &#125; = <span class="title function_">f</span>(a), &#123;</span><br><span class="line">        <span class="attr">publish</span>: c</span><br><span class="line">      &#125; = <span class="title function_">g</span>(a), &#123;</span><br><span class="line">        <span class="attr">subscribe</span>: d,</span><br><span class="line">        <span class="attr">triggerSubscribeEvent</span>: i</span><br><span class="line">      &#125; = <span class="title function_">h</span>(a), &#123;</span><br><span class="line">        <span class="attr">on</span>: j,</span><br><span class="line">        <span class="attr">triggerOnEvent</span>: k</span><br><span class="line">      &#125; = <span class="title function_">e</span>(a);</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">invoke</span>: b,</span><br><span class="line">        <span class="attr">publish</span>: c,</span><br><span class="line">        <span class="attr">subscribe</span>: d,</span><br><span class="line">        <span class="attr">on</span>: j,</span><br><span class="line">        <span class="keyword">get</span> <span class="title function_">__triggerOnEvent</span>() &#123;</span><br><span class="line">          <span class="keyword">return</span> k</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">get</span> <span class="title function_">__triggerSubscribeEvent</span>() &#123;</span><br><span class="line">          <span class="keyword">return</span> i</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="variable language_">window</span>.<span class="property">WeixinJSBridge</span> = <span class="variable language_">window</span>.<span class="property">__global</span>.<span class="property">WeixinJSBridge</span> = <span class="variable language_">window</span>.<span class="property">__global</span>.<span class="title function_">getNewWeixinJSBridge</span>(<span class="string">&#x27;global&#x27;</span>), <span class="variable language_">window</span>.<span class="property">__global</span>.<span class="property">WeixinJSBridgeMap</span> = &#123;</span><br><span class="line">      <span class="attr">__globalBridge</span>: <span class="variable language_">window</span>.<span class="property">WeixinJSBridge</span></span><br><span class="line">    &#125;, __devtoolsConfig.<span class="property">online</span> &amp;&amp; __devtoolsConfig.<span class="property">autoTest</span> &amp;&amp; <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">clear</span>()</span><br><span class="line">    &#125;, <span class="number">1e4</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> l = <span class="keyword">new</span> <span class="variable language_">window</span>.<span class="property">__global</span>.<span class="property">XMLHttpRequest</span>;</span><br><span class="line">      l.<span class="property">responseType</span> = <span class="string">&#x27;text&#x27;</span>, l.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">`http://<span class="subst">$&#123;<span class="variable language_">window</span>.location.host&#125;</span>/calibration/<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>`</span>, !<span class="number">0</span>), l.<span class="title function_">send</span>()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (a) &#123;&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在 <code>js/extensions/gamenaitveview/index.js</code> 中找到：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">javascript复制代码  <span class="number">299</span>: <span class="keyword">function</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(b, <span class="string">&#x27;__esModule&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">value</span>: !<span class="number">0</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> d = <span class="title function_">c</span>(<span class="number">242</span>),</span><br><span class="line">      e = <span class="title function_">c</span>(<span class="number">241</span>),</span><br><span class="line">      f = <span class="title function_">c</span>(<span class="number">243</span>),</span><br><span class="line">      g = <span class="title function_">c</span>(<span class="number">244</span>);</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">WeixinJSBridge</span> = &#123;</span><br><span class="line">      <span class="attr">on</span>: d.<span class="property">a</span>,</span><br><span class="line">      <span class="attr">invoke</span>: e.<span class="property">a</span>,</span><br><span class="line">      <span class="attr">publish</span>: f.<span class="property">a</span>,</span><br><span class="line">      <span class="attr">subscribe</span>: g.<span class="property">a</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>在 <code>js/extensions/pageframe/index.js</code>中找到：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">javascript复制代码<span class="number">317</span>: <span class="keyword">function</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">d</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">WeixinJSBridge</span> = &#123;</span><br><span class="line">        <span class="attr">on</span>: e.<span class="property">a</span>,</span><br><span class="line">        <span class="attr">invoke</span>: f.<span class="property">a</span>,</span><br><span class="line">        <span class="attr">publish</span>: g.<span class="property">a</span>,</span><br><span class="line">        <span class="attr">subscribe</span>: h.<span class="property">a</span></span><br><span class="line">      &#125;, k.<span class="property">a</span>.<span class="title function_">init</span>();</span><br><span class="line">      <span class="keyword">let</span> a = <span class="variable language_">document</span>.<span class="title function_">createEvent</span>(<span class="string">&#x27;UIEvent&#x27;</span>);</span><br><span class="line">      a.<span class="title function_">initEvent</span>(<span class="string">&#x27;WeixinJSBridgeReady&#x27;</span>, !<span class="number">1</span>, !<span class="number">1</span>), <span class="variable language_">document</span>.<span class="title function_">dispatchEvent</span>(a), i.<span class="property">a</span>.<span class="title function_">init</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(b, <span class="string">&#x27;__esModule&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">value</span>: !<span class="number">0</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> e = <span class="title function_">c</span>(<span class="number">254</span>),</span><br><span class="line">      f = <span class="title function_">c</span>(<span class="number">253</span>),</span><br><span class="line">      g = <span class="title function_">c</span>(<span class="number">255</span>),</span><br><span class="line">      h = <span class="title function_">c</span>(<span class="number">256</span>),</span><br><span class="line">      i = <span class="title function_">c</span>(<span class="number">86</span>),</span><br><span class="line">      j = <span class="title function_">c</span>(<span class="number">257</span>),</span><br><span class="line">      k = c.<span class="title function_">n</span>(j);</span><br><span class="line">    <span class="string">&#x27;complete&#x27;</span> === <span class="variable language_">document</span>.<span class="property">readyState</span> ? <span class="title function_">d</span>() : <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">d</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>我们都看到了 WeixinJSBridge 的定义。分别都有 <code>on</code>、<code>invoke</code>、<code>publish</code>、<code>subscribe</code> 这个几个关键方法。</p><p>拿 <code>invoke</code> 举例，在 <code>js/extensions/appservice/index.js</code>中发现这段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">php复制代码<span class="title function_ invoke__">f</span> (!r) p[b] = s, f.<span class="title function_ invoke__">send</span>(&#123;</span><br><span class="line">    <span class="attr">command</span>: <span class="string">&#x27;APPSERVICE_INVOKE&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">api</span>: c,</span><br><span class="line">        <span class="attr">args</span>: e,</span><br><span class="line">        <span class="attr">callbackID</span>: b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在 <code>js/extensions/pageframe/index.js</code> 中发现这段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">php复制代码g[d] = c, e.a.<span class="title function_ invoke__">send</span>(&#123;</span><br><span class="line">    <span class="attr">command</span>: <span class="string">&#x27;WEBVIEW_INVOKE&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">api</span>: a,</span><br><span class="line">        <span class="attr">args</span>: b,</span><br><span class="line">        <span class="attr">callbackID</span>: d</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>简单的分析得知：字段 <code>command</code> 用来区分行为，<code>invoke</code> 用来调用 Native 的 Api。在不同的来源要使用不同的前缀。<code>data</code> 里面包含 Api 名，参数。另外 <code>callbackID</code> 指定接受回调的方法句柄。Appservice 和 Webview 使用的通信协议是一致的。</p><p>我们不能在代码里使用 BOM 和 DOM 是因为根本没有，另一方面也不希望 JS 代码直接操作视图。</p><p>在开发工具中 <code>remote-helper.js</code> 中找到了这样的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">javascript复制代码<span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vmGlobal = &#123;</span><br><span class="line">    <span class="attr">require</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">eval</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">process</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="title function_">setTimeout</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="comment">//...省略代码</span></span><br><span class="line">        <span class="keyword">return</span> timerCount;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">clearTimeout</span>(<span class="params">id</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> timer = timers[id];</span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">            <span class="keyword">delete</span> timers[id];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setInterval</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="comment">//...省略代码</span></span><br><span class="line">        <span class="keyword">return</span> timerCount;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">clearInterval</span>(<span class="params">id</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> timer = timers[id];</span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">            <span class="keyword">delete</span> timers[id];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">console</span>: (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//...省略代码</span></span><br><span class="line">        <span class="keyword">return</span> consoleClone;</span><br><span class="line">    &#125;)()</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> jsVm = vm.<span class="title function_">createContext</span>(vmGlobal);</span><br><span class="line"><span class="comment">// 省略大量代码...</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadCode</span>(<span class="params">filePath, sourceURL, content</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ret;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> script = <span class="keyword">typeof</span> content === <span class="string">&#x27;string&#x27;</span> ? content : fs.<span class="title function_">readFileSync</span>(filePath, <span class="string">&#x27;utf-8&#x27;</span>).<span class="title function_">toString</span>();</span><br><span class="line">        ret = vm.<span class="title function_">runInContext</span>(script, jsVm, &#123;</span><br><span class="line">            <span class="attr">filename</span>: sourceURL,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="comment">// something went wrong in user code</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的分层设计显然是有意为之的，它的中间层完全控制了程序对于界面进行的操作， 同时对于传递的数据和响应时间也能做到监控。一方面程序的行为受到了极大限制， 另一方面微信可以确保他们对于小程序内容和体验有绝对的控制。</p><p>这样的结构也说明了小程序的动画和绘图 API 被设计成生成一个最终对象而不是一步一步执行的样子， 原因就是  Json 格式的数据传递和解析相比与原生 API 都是损耗不菲的，如果频繁调用很可能损耗过多性能，进而影响用户体验。</p><h2 id="下载小程序完整包"><a href="#下载小程序完整包" class="headerlink" title="下载小程序完整包"></a>下载小程序完整包</h2><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd56a0887d0~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="download"></p><h2 id="App-Service-Life-Cylce"><a href="#App-Service-Life-Cylce" class="headerlink" title="App Service - Life Cylce"></a>App Service - Life Cylce</h2><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd58981205e~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="lifecycle"></p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p><strong>1.动画需要绑定在 data 上，而绘图却不用。你觉得是为什么呢？</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">apache</span>复制代码var context = wx.createCanvasContext(&#x27;firstCanvas&#x27;)</span><br><span class="line">    </span><br><span class="line"><span class="attribute">context</span>.setStrokeStyle(<span class="string">&quot;#00ff00&quot;</span>)</span><br><span class="line"><span class="attribute">context</span>.setLineWidth(<span class="number">5</span>)</span><br><span class="line"><span class="attribute">context</span>.rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line"><span class="attribute">context</span>.stroke()</span><br><span class="line"><span class="attribute">context</span>.setStrokeStyle(<span class="string">&quot;#ff0000&quot;</span>)</span><br><span class="line"><span class="attribute">context</span>.setLineWidth(<span class="number">2</span>)</span><br><span class="line"><span class="attribute">context</span>.moveTo(<span class="number">160</span>, <span class="number">100</span>)</span><br><span class="line"><span class="attribute">context</span>.arc(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, <span class="number">0</span>, <span class="number">2</span> * Math.PI, true)</span><br><span class="line"><span class="attribute">context</span>.moveTo(<span class="number">140</span>, <span class="number">100</span>)</span><br><span class="line"><span class="attribute">context</span>.arc(<span class="number">100</span>, <span class="number">100</span>, <span class="number">40</span>, <span class="number">0</span>, Math.PI, false)</span><br><span class="line"><span class="attribute">context</span>.moveTo(<span class="number">85</span>, <span class="number">80</span>)</span><br><span class="line"><span class="attribute">context</span>.arc(<span class="number">80</span>, <span class="number">80</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">2</span> * Math.PI, true)</span><br><span class="line"><span class="attribute">context</span>.moveTo(<span class="number">125</span>, <span class="number">80</span>)</span><br><span class="line"><span class="attribute">context</span>.arc(<span class="number">120</span>, <span class="number">80</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">2</span> * Math.PI, true)</span><br><span class="line"><span class="attribute">context</span>.stroke()</span><br><span class="line"><span class="attribute">context</span>.draw()</span><br><span class="line"><span class="attribute">lisp</span>复制代码Page(&#123;</span><br><span class="line">  <span class="attribute">data</span>: &#123;</span><br><span class="line">    <span class="attribute">animationData</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attribute">onShow</span>: function()&#123;</span><br><span class="line">    <span class="attribute">var</span> animation = wx.createAnimation(&#123;</span><br><span class="line">      <span class="attribute">duration</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attribute">timingFunction</span>: &#x27;ease&#x27;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this</span>.animation = animation</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">animation</span>.scale(<span class="number">2</span>,<span class="number">2</span>).rotate(<span class="number">45</span>).step()</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">this</span>.setData(&#123;</span><br><span class="line">      <span class="attribute">animationData</span>:animation.export()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>2.小程序的 Http Rquest 请求是不是用的浏览器 Fetch API?</strong></p><p>知识点考察</p><ul><li>知道 Request 是由 Native 实现的</li><li>JSCore 是不带 Http Request、Websocket、Storage等功能的，那是 Webkit 带的</li><li>小程序的 <code>wx.request</code> 是不是遵循 fetch API 规范实现的呢？答案，显然不是。因为没有 <code>Promise</code></li></ul><h1 id="View-WXML"><a href="#View-WXML" class="headerlink" title="View - WXML"></a>View - WXML</h1><p>WXML（WeiXin Markup Language）</p><ul><li>支持数据绑定</li><li>支持逻辑算术、运算</li><li>支持模板、引用</li><li>支持添加事件（bindtap）</li></ul><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd55da9d940~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="WXML"></p><p>Wxml编译器：Wcc  把 Wxml文件 转为 JS</p><p>执行方式：Wcc index.wxml</p><p><strong>使用 Virtual DOM，进行局部更新</strong></p><h1 id="View-WXSS"><a href="#View-WXSS" class="headerlink" title="View - WXSS"></a>View - WXSS</h1><p>WXSS(WeiXin Style Sheets)</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd55df8f76a~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="WXSS"></p><p>wxss编译器：wcsc 把wxss文件转化为 js</p><p>执行方式： wcsc index.wxss</p><h2 id="支持大部分CSS特性"><a href="#支持大部分CSS特性" class="headerlink" title="支持大部分CSS特性"></a>支持大部分CSS特性</h2><p>亲测包含但不限于如下内容：</p><ul><li><p>Transition</p></li><li><p>Animation</p><ul><li>Keyframes</li></ul></li><li><p>border-radius</p></li><li><p>calc()</p></li><li><p>选择器，除了</p><p>官方文档</p><p>列出的，其实还支持</p><ul><li>element&gt;element</li><li>element+element</li><li>element element</li><li>element:first-letter</li><li>element:first-line</li><li>element:first-child</li><li>element:last-child</li><li>element~element</li><li>element:first-of-type</li><li>element:last-of-type</li><li>element:only-of-type</li><li>element:only-child</li><li>element:nth-child(n)</li><li>element:nth-last-child(n)</li><li>element:nth-of-type(n)</li><li>element:nth-last-of-type(n)</li><li>:root</li><li>element:empty</li><li>:not(element)</li></ul></li><li><p>iconfont</p></li></ul><p>建议 Css3 的特性都可以做一下尝试。</p><h2 id="尺寸单位-rpx"><a href="#尺寸单位-rpx" class="headerlink" title="尺寸单位 rpx"></a>尺寸单位 rpx</h2><p>rpx（responsive pixel）: 可以根据屏幕宽度进行自适应。规定屏幕宽为 750rpx。公式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">javascript复制代码<span class="keyword">const</span> dsWidth = <span class="number">750</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> screenHeightOfRpx = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">750</span> / env.<span class="property">screenWidth</span> * env.<span class="property">screenHeight</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> rpxToPx = <span class="keyword">function</span> (<span class="params">rpx</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> env.<span class="property">screenWidth</span> / <span class="number">750</span> * rpx</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> pxToRpx = <span class="keyword">function</span> (<span class="params">px</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">750</span> / env.<span class="property">screenWidth</span> * px</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>设备</th><th>rpx换算px (屏幕宽度&#x2F;750)</th><th>px换算rpx (750&#x2F;屏幕宽度)</th></tr></thead><tbody><tr><td>iPhone5</td><td>1rpx &#x3D; 0.42px</td><td>1px &#x3D; 2.34rpx</td></tr><tr><td>iPhone6</td><td>1rpx &#x3D; 0.5px</td><td>1px &#x3D; 2rpx</td></tr><tr><td>iPhone6 Plus</td><td>1rpx &#x3D; 0.552px</td><td>1px &#x3D; 1.81rpx</td></tr></tbody></table><p>可以了解一下 <a href="https://link.juejin.cn/?target=https://github.com/mpvue/px2rpx-loader">pr2rpx-loader </a>这个库。</p><h2 id="样式导入"><a href="#样式导入" class="headerlink" title="样式导入"></a>样式导入</h2><p>使用 <code>@import</code>语句可以导入外联样式表，<code>@import</code>后跟需要导入的外联样式表的相对路径，用 <code>;</code> 表示语句结束。</p><h2 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h2><p>静态的样式统一写到 class 中。style 接收动态的样式，在运行时会进行解析，<strong>请尽量避免将静态的样式写进 style 中，以免影响渲染速度</strong>。</p><h2 id="全局样式与局部样式"><a href="#全局样式与局部样式" class="headerlink" title="全局样式与局部样式"></a>全局样式与局部样式</h2><p>定义在 app.wxss 中的样式为全局样式，作用于每一个页面。在 page 的 wxss 文件中定义的样式为局部样式，只作用在对应的页面，并会覆盖 app.wxss 中相同的选择器。</p><h2 id="iconfont"><a href="#iconfont" class="headerlink" title="iconfont"></a>iconfont</h2><p><strong>截止20180810</strong></p><p>小程序未来有计划支持字体。参考<a href="https://link.juejin.cn/?target=http://daxue.qq.com/content/content/id/4113">微信公开课</a>。</p><p>小程序开发与平时 Web开发类似，也可以使用字体图标，但是 <code>src:url()</code> 无论本地还是远程地址都不行，base64 值则都是可以显示的。</p><p>将 ttf 文件转换成 base64。打开这个平台 <a href="https://link.juejin.cn/?target=http://transfonter.org/%E3%80%82%E7%82%B9%E5%87%BB">transfonter.org&#x2F;。点击</a> Add fonts 按钮，加载ttf格式的那个文件。将下边的 base64 encode 改为 on。点击 Convert 按钮进行转换，转换后点击 download 下载。</p><p>复制下载的压缩文件中的 stylesheet.css 的内容到 font.wxss ，并且将 icomoon 中的 style.css 除了 @font-face 所有的代码也复制到 font.wxss 并将i选择器换成 .iconfont，最后：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">applescript</span><br><span class="line">复制代码&lt;<span class="built_in">text</span> <span class="built_in">class</span>=<span class="string">&quot;iconfont icon-home&quot;</span> style=<span class="string">&quot;font-size:50px;color:red&quot;</span>&gt;&lt;/<span class="built_in">text</span>&gt;</span><br></pre></td></tr></table></figure><h1 id="View-Component"><a href="#View-Component" class="headerlink" title="View - Component"></a>View - Component</h1><p>小程序提供了一系列组件用于开发业务功能，按照功能与HTML5的标签进行对比如下：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd61f6cc3dd~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="Component"></p><p>小程序的组件基于Web Component标准</p><p>使用Polymer框架实现Web Component</p><h1 id="View-Native-Component"><a href="#View-Native-Component" class="headerlink" title="View - Native Component"></a>View - Native Component</h1><p>目前Native实现的组件有</p><ul><li><p>cavnas</p></li><li><p>video</p></li><li><p>map</p></li><li><p>textarea</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd63ae856a7~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="Native Component"></p></li></ul><p>Native组件层在 WebView 层之上。这目前带来了一些问题：</p><ul><li>Native 实现的组件会遮挡其他组件</li><li>WebView 渲染出来的视图在滚动时，Native 实现的组件需要更新位置，这会带来性能问题，在安卓机器上比较明显</li><li>小程序原生组件 <code>cover-view</code> 可以覆盖 cavnas video 等，但是也有一下弊端，比如在 cavnas 上覆盖 <code>cover-view</code>，就会发现坐标系不统一处理麻烦</li></ul><h1 id="目前小程序的问题或限制"><a href="#目前小程序的问题或限制" class="headerlink" title="目前小程序的问题或限制"></a>目前小程序的问题或限制</h1><p><strong>截止20180810</strong></p><p>包含但不限于：</p><ul><li>小程序仍然使用 WebView 渲染，并非原生渲染。（部分原生）</li><li>服务端接口返回的头无法执行，比如：Set-Cookie。</li><li>依赖浏览器环境的 JS 库不能使用。</li><li>不能使用 npm，但是可以自搭构建工具或者使用 mpvue。（未来官方有计划支持）</li><li>不能使用 ES7，可以自己用babel+webpack自搭或者使用 mpvue。</li><li>不支持使用自己的字体（未来官方计划支持）。</li><li>可以用 base64 的方式来使用 iconfont。</li><li>小程序不能发朋友圈（可以通过保存图片到本地，发图片到朋友前。二维码可以使用<a href="https://link.juejin.cn/?target=https://developers.weixin.qq.com/miniprogram/dev/api/qrcode.html">B接口</a>）。</li><li>获取<a href="https://link.juejin.cn/?target=https://developers.weixin.qq.com/miniprogram/dev/api/qrcode.html">二维码&#x2F;小程序</a>接口的限制。<ul><li>B 接口 scene 最大32个可见字符。</li><li>AC 接口总共生成的码数量限制为 100,000，请谨慎调用。</li><li>真机扫描二维码只能跳转到线上版本，所以测试环境下只可通过开发者工具的通过二维码编译进行调试。</li><li>没有发布到线上版本的小程序页面路径会导致生成二维码失败，需要先将添加了页面的小程序发布到线上版本。</li></ul></li><li>小程序推送只能使用“服务通知” 而且需要用户主动触发提交 formId，formId 只有7天有效期。（现在的做法是在每个页面都放入form并且隐藏以此获取更多的 formId。后端使用原则为：优先使用有效期最短的）</li><li>小程序大小限制 2M，分包总计不超过 8M</li><li>转发（分享）小程序不能拿到成功结果，原来可以。<a href="https://link.juejin.cn/?target=https://mp.weixin.qq.com/s?__biz=MjM5NDAwMTA2MA==&mid=2695730124&idx=1&sn=666a448b047d657350de7684798f48d3&chksm=83d74a07b4a0c311569a748f4d11a5ebcce3ba8f6bd5a4b3183a4fea0b3442634a1c71d3cdd0&scene=21%23wechat_redirect">链接</a>（小游戏造的孽）</li><li>拿到相同的 unionId 必须绑在同一个开放平台下。开放平台绑定限制：<ul><li>50个移动应用</li><li>10个网站</li><li>50个同主体公众号</li><li>5个不同主体公众号</li><li>50个同主体小程序</li><li>5个不同主体小程序</li></ul></li><li>公众号关联小程序，<a href="https://link.juejin.cn/?target=https://developers.weixin.qq.com/miniprogram/introduction/%23%E5%85%AC%E4%BC%97%E5%8F%B7%E5%85%B3%E8%81%94%E5%B0%8F%E7%A8%8B%E5%BA%8F">链接</a><ul><li>所有公众号都可以关联小程序。</li><li>一个公众号可关联10个同主体的小程序，3个不同主体的小程序。</li><li>一个小程序可关联500个公众号。</li><li>公众号一个月可新增关联小程序13次，小程序一个月可新增关联500次。</li></ul></li><li>一个公众号关联的10个同主体小程序和3个非同主体小程序可以互相跳转</li><li>品牌搜索不支持金融、医疗</li><li>小程序授权需要用户主动点击</li><li>小程序不提供测试 <strong>access_token</strong></li><li>安卓系统下，小程序授权获取用户信息之后，删除小程序再重新获取，并重新授权，得到旧签名，导致第一次授权失败</li><li>开发者工具上，授权获取用户信息之后，如果清缓存选择全部清除，则即使使用了wx.checkSession，并且在session_key有效期内，授权获取用户信息也会得到新的session_key</li></ul><h2 id="小程序HTTP2支持情况"><a href="#小程序HTTP2支持情况" class="headerlink" title="小程序HTTP2支持情况"></a>小程序HTTP2支持情况</h2><h3 id="HTTP2支持情况：模拟器与真机均不支持"><a href="#HTTP2支持情况：模拟器与真机均不支持" class="headerlink" title="HTTP2支持情况：模拟器与真机均不支持"></a>HTTP2支持情况：模拟器与真机均不支持</h3><p>为了验证小程序对HTTP的支持适配情况，我找了两个服务器做测试，一个是网上搜索到支持HTTP2的服务器，一个是我本地起的一个HTTP2服务器。测试中所有请求方法均使用 <code>wx.request</code>。</p><ol><li><p>网上支持HTTP2的服务器：<code>HTTPs://www.snel.com:443</code></p></li><li><p>在Chrome上查看该服务器为 HTTP2</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd65fbde315~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="WechatIMG11"></p></li><li><p>在模拟器上请求该接口，<code>请求头</code>的HTTP版本为HTTP1.1，模拟器不支持HTTP2</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd6aa018b35~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="WechatIMG12"></p></li><li><p>由于小程序线上环境需要在项目管理里配置请求域名，而这个域名不是我们需要的请求域名，没必要浪费一个域名位置，所以打开不验证域名，TSL 等选项请求该接口，通过抓包工具表现与模拟器相同</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd6d67dc3a6~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="WechatIMG14"></p></li></ol><h3 id="HTTP2服务器需要对小程序做兼容性适配"><a href="#HTTP2服务器需要对小程序做兼容性适配" class="headerlink" title="HTTP2服务器需要对小程序做兼容性适配"></a>HTTP2服务器需要对小程序做兼容性适配</h3><p>由上可以看出，在真机与模拟器都不支持 HTTP2，但是都是成功请求的，并且 <code>响应头</code> 里的 HTTP 版本都变成了HTTP1.1 版本，说明服务器对 HTTP1.1 做了兼容性适配。</p><ol><li><p>本地新启一个 node 服务器，返回 JSON 为请求的 HTTP 版本</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd6d94de216~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="WechatIMG16"></p></li><li><p>如果服务器只支持 HTTP2，在模拟器请求时发生了一个 <code>ALPN</code> 协议的错误。并且提醒使用适配 HTTP1</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd6dfe717d8~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="WechatIMG8"></p></li><li><p>当把服务器的 <code>allowHTTP1</code>，设置为 <code>true</code>，并在请求时处理相关相关请求参数后，模拟器能正常访问接口，并打印出对应的 HTTP 请求版本</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd70704cc04~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="WechatIMG15"></p></li></ol><h1 id="授权获取用户信息流程"><a href="#授权获取用户信息流程" class="headerlink" title="授权获取用户信息流程"></a>授权获取用户信息流程</h1><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd745ae6210~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ul><li>session_key 有有效期，有效期并没有被告知开发者，只知道用户越频繁使用小程序，session_key 有效期越长</li><li>在调用 wx.login 时会直接更新 session_key，导致旧 session_key 失效</li><li>小程序内先调用 wx.checkSession 检查登录态，并保证没有过期的 session_key 不会被更新，再调用 wx.login 获取 code。接着用户授权小程序获取用户信息，小程序拿到加密后的用户数据，把加密数据和 code 传给后端服务。后端通过 code 拿到 session_key 并解密数据，将解密后的用户信息返回给小程序</li></ul><p><strong>面试题：先授权获取用户信息再 login 会发生什么？</strong></p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd7b715d456~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd7d0e907dc~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ul><li>用户授权时，开放平台使用旧的 session_key 对用户信息进行加密。调用 wx.login 重新登录，会刷新 session_key，这时后端服务从开放平台获取到新 session_key，但是无法对老 session_key 加密过的数据解密，用户信息获取失败</li><li>在用户信息授权之前先调用 wx.checkSession 呢？wx.checkSession 检查登录态，并且保证 wx.login 不会刷新 session_key，从而让后端服务正确解密数据。但是这里存在一个问题，如果小程序较长时间不用导致 session_key 过期，则 wx.login 必定会重新生成 session_key，从而再一次导致用户信息解密失败。</li></ul><h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><p><strong>我们知道view部分是运行在webview上的，所以前端领域的大多数优化方式都有用。</strong></p><p><strong>我们知道view部分是运行在webview上的，所以前端领域的大多数优化方式都有用。</strong></p><p><strong>我们知道view部分是运行在webview上的，所以前端领域的大多数优化方式都有用。</strong></p><h2 id="加载优化"><a href="#加载优化" class="headerlink" title="加载优化"></a>加载优化</h2><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd7fd0c7cb2~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="preload"></p><p>代码包的大小是最直接影响小程序加载启动速度的因素。代码包越大不仅下载速度时间长，业务代码注入时间也会变长。所以最好的优化方式就是减少代码包的大小。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd804824c9c~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="load-time-series"></p><p>小程序加载的三个阶段的表示。</p><p><strong>优化方式</strong></p><ul><li>代码压缩。</li><li>及时清理无用代码和资源文件。</li><li>减少代码包中的图片等资源文件的大小和数量。</li><li>分包加载。</li></ul><p><strong>首屏加载的体验优化建议</strong></p><ul><li>提前请求: 异步数据请求不需要等待页面渲染完成。</li><li>利用缓存: 利用 storage API 对异步请求数据进行缓存，二次启动时先利用缓存数据渲染页面，在进行后台更新。</li><li>避免白屏：先展示页面骨架页和基础内容。</li><li>及时反馈：即时地对需要用户等待的交互操作给出反馈，避免用户以为小程序无响应。</li></ul><h3 id="使用分包加载优化"><a href="#使用分包加载优化" class="headerlink" title="使用分包加载优化"></a>使用分包加载优化</h3><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd8ac3f82ae~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="sub-package"></p><p>在构建小程序分包项目时，构建会输出一个或多个功能的分包，其中每个分包小程序必定含有一个主包，所谓的主包，即放置默认启动页面&#x2F;TabBar 页面，以及一些所有分包都需用到公共资源&#x2F;JS 脚本，而分包则是根据开发者的配置进行划分。</p><p>在小程序启动时，默认会下载主包并启动主包内页面，如果用户需要打开分包内某个页面，客户端会把对应分包下载下来，下载完成后再进行展示。</p><p>优点：</p><ul><li>对开发者而言，能使小程序有更大的代码体积，承载更多的功能与服务</li><li>对用户而言，可以更快地打开小程序，同时在不影响启动速度前提下使用更多功能</li></ul><p>限制：</p><ul><li>整个小程序所有分包大小不超过 8M</li><li>单个分包&#x2F;主包大小不能超过 2M</li></ul><p><strong>原生分包加载的配置</strong> 假设支持分包的小程序目录结构如下：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">stata复制代码├── <span class="keyword">app</span>.js</span><br><span class="line">├── <span class="keyword">app</span>.json</span><br><span class="line">├── <span class="keyword">app</span>.wxss</span><br><span class="line">├── packageA</span><br><span class="line">│   └── pages</span><br><span class="line">│       ├── <span class="keyword">cat</span></span><br><span class="line">│       └── dog</span><br><span class="line">├── packageB</span><br><span class="line">│   └── pages</span><br><span class="line">│       ├── apple</span><br><span class="line">│       └── banana</span><br><span class="line">├── pages</span><br><span class="line">│   ├── index</span><br><span class="line">│   └── logs</span><br><span class="line">└── utils</span><br></pre></td></tr></table></figure><p>开发者通过在 app.json subPackages 字段声明项目分包结构：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">prolog复制代码&#123;</span><br><span class="line">  <span class="string">&quot;pages&quot;</span>:[</span><br><span class="line">    <span class="string">&quot;pages/index&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pages/logs&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;subPackages&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;root&quot;</span>: <span class="string">&quot;packageA&quot;</span>,</span><br><span class="line">      <span class="string">&quot;pages&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;pages/cat&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pages/dog&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="string">&quot;root&quot;</span>: <span class="string">&quot;packageB&quot;</span>,</span><br><span class="line">      <span class="string">&quot;pages&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;pages/apple&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pages/banana&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分包原则</strong></p><ul><li>声明 subPackages 后，将按 subPackages 配置路径进行打包，subPackages 配置路径外的目录将被打包到 app（主包） 中</li><li>app（主包）也可以有自己的 pages（即最外层的 pages 字段</li><li>subPackage 的根目录不能是另外一个 subPackage 内的子目录</li><li>首页的 TAB 页面必须在 app（主包）内</li></ul><p><strong>引用原则</strong></p><ul><li>packageA 无法 require packageB JS 文件，但可以 require app、自己 package 内的 JS 文件</li><li>packageA 无法 import packageB 的 template，但可以 require app、自己 package 内的 template</li><li>packageA 无法使用 packageB 的资源，但可以使用 app、自己 package 内的资源</li></ul><p><strong>官方即将推出</strong> 分包预加载</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd8b2167186~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="preload-sub-package"></p><p>独立分包</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd8b7610a45~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="single-sub-package"></p><h2 id="渲染性能优化"><a href="#渲染性能优化" class="headerlink" title="渲染性能优化"></a>渲染性能优化</h2><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd8e28809dd~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="render"></p><ul><li>每次 setData 的调用都是一次进程间通信过程，通信开销与 setData 的数据量正相关。</li><li>setData 会引发视图层页面内容的更新，这一耗时操作一定时间中会阻塞用户交互。</li><li><strong>setData 是小程序开发使用最频繁，也是最容易引发性能问题的。</strong></li></ul><p><strong>避免不当使用 setData</strong></p><ul><li>使用 data 在方法间共享数据，<strong>可能增加 setData 传输的数据量。</strong>。data 应仅包括与页面渲染相关的数据。</li><li>使用 setData 传输大量数据，<strong>通讯耗时与数据正相关，页面更新延迟可能造成页面更新开销增加。</strong>仅传输页面中发生变化的数据，使用 setData 的特殊 key 实现局部更新。</li><li>短时间内频繁调用 setData，<strong>操作卡顿，交互延迟，阻塞通信，页面渲染延迟。</strong>避免不必要的 setData，对连续的setData调用进行合并。</li><li>在后台页面进行 setData，<strong>抢占前台页面的渲染资源。</strong>页面切入后台后的 setData 调用，延迟到页面重新展示时执行。</li></ul><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd57d4375f0~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="one-context"></p><p><strong>避免不当使用onPageScroll</strong></p><ul><li>只在有必要的时候监听 pageScroll 事件。不监听，则不会派发。</li><li>避免在 onPageScroll 中执行复杂逻辑</li><li>避免在 onPageScroll 中频繁调用 setData</li><li>避免滑动时频繁查询节点信息（SelectQuery）用以判断是否显示，部分场景建议使用节点布局橡胶状态监听（inersectionObserver）替代</li></ul><p><strong>使用自定义组件</strong></p><p>在需要频繁更新的场景下，自定义组件的更新只在组件内部进行，不受页面其他部分内容复杂性影响。</p><h1 id="官方小程序技术能力规划"><a href="#官方小程序技术能力规划" class="headerlink" title="官方小程序技术能力规划"></a>官方小程序技术能力规划</h1><h2 id="自定义组件2-0"><a href="#自定义组件2-0" class="headerlink" title="自定义组件2.0"></a>自定义组件2.0</h2><p>小程序的几个页面间，存在一些相同或是类似的区域，这时候可以把这些区域逻辑封装成一个自定义组件，代码就可以重用，或者对于比较独立逻辑，也可以把它封装成一个自定义组件，也就是微信去年发布的自定义组件，它让代码得到复用、减少代码量，更方便模块化，优化代码架构组织，也使得模块清晰，后期更好地维护，从而保证更好的性能。</p><p>但微信打算在原来的基础上推出的自定义组件 2.0，它将拥有更高级的性能：</p><ul><li>usingComponents 计划支持全局定义和通配符定义：这意味着不用在每个页面反复定义，可以批量导入目录下的所有自定义组件</li><li>计划支持类似 Computed 和 watch 的功能，它能使代码逻辑更清晰</li><li>计划支持 Component 构造器插件，在实例化一个自定义组件的时候，允许你在构造器的这个阶段，加入一些逻辑，方便进行一些扩展，甚至是可以扩展成 Vue 的语法</li></ul><h2 id="npm支持"><a href="#npm支持" class="headerlink" title="npm支持"></a>npm支持</h2><p>目前小程序开发的痛点是：开源组件要手动复制到项目，后续更新组件也需要手动操作。不久的将来，小程序将支持npm包管理，有了这个之后，想要引入一些开源的项目就变得很简单了，只要在项目里面声明，然后用简单的命令安装，就可以使用了。</p><h2 id="官方自定义组件"><a href="#官方自定义组件" class="headerlink" title="官方自定义组件"></a>官方自定义组件</h2><p>微信小程序团队表示，他们在考虑推出一些官方自定义组件，为什么不内置到基础库里呢？因为内置组件要提供给开发者，这个组件一定是开发者很难实现或者是无法实现的一个能力。所以他们更倾向于封装成自定义组件，想基于这些内置组件里，封装一些比较常见的、交互逻辑比较复杂的组件给大家使用，让大家更容易开发。类似弹幕组件，开发者就不用关注弹幕怎么飘，可以节省开发者的开发成本。</p><p>同时，他们也想给开发者提供一些规范和一些模板，让开发者设计出好用的自定义组件，更好地被大家去使用。</p><h2 id="添加体验评分"><a href="#添加体验评分" class="headerlink" title="添加体验评分"></a>添加体验评分</h2><p>当小程序加载太慢时，可能会导致用户的流失，而小程序的开发者可能会面临着不知道如何定位问题或不知如何解决问题的困境。</p><p>为此，小程序即将推出一个体验评分的功能，这是为了帮助开发者可以检查出小程序有一些什么体验不好的地方，也会同时给出一份优化的指引建议。</p><h2 id="原生组件同层渲染"><a href="#原生组件同层渲染" class="headerlink" title="原生组件同层渲染"></a>原生组件同层渲染</h2><p>小程序在最初的技术选型时，引入了原生组件的概念，因为原生组件可以使小程序的能力更加丰富，比如地图、音视频的能力，但是原生组件是由客户端原生渲染的，导致了原生组件的层级是最高的，开发者很容易遇到打开调试的问题，发现视频组件挡在了 vConsole 上。</p><p>为了解决这个问题，当时微信做了一个过渡的方案：cover-view。cover-view可以覆盖在原生组件之上，这一套方案解决了大部分的需求场景。比如说视频组件上很多的按钮、标题甚至还有动画的弹幕，这些都是用 cover-view 去实现的，但它还是没有完全解决原生组件的开发体验问题，因为 cover-view 有一些限制：</p><ul><li>无法与其他组件混在一起渲染</li><li>没有完整的触摸事件</li><li>cover-view 对样式的表现有差异</li><li>cover-view 对样式的支持度不够高</li></ul><p>因此微信决定将用同层渲染取代 cover-view，它能像普通组件一样使用，原生组件的层级不再是最高，而是和其他的非原生组件在同一层级渲染，可完全由 z-index 控制，可完全支持触摸事件。</p><p>微信表示，同层渲染在 iOS 平台小程序上已经开始内测，会很快开放给开发者，Android 平台已经取得突破性进展，目前正在做一轮封装的工作，开放指日可待。</p><h1 id="wepy-vs-mpvue"><a href="#wepy-vs-mpvue" class="headerlink" title="wepy vs mpvue"></a>wepy vs mpvue</h1><h2 id="数据流管理"><a href="#数据流管理" class="headerlink" title="数据流管理"></a>数据流管理</h2><p>相比传统的小程序框架，这个一直是我们作为资深开发者比较期望去解决的，在 Web 开发中，随着 Flux、Redux、Vuex 等多个数据流工具出现，我们也期望在业务复杂的小程序中使用。</p><ul><li>WePY 默认支持 Redux，在脚手架生成项目的时候可以内置</li><li>Mpvue 作为 Vue 的移植版本，当然支持 Vuex，同样在脚手架生成项目的时候可以内置</li></ul><h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><p>如果你和我们一样，经历了从无到有的小程序业务开发，建议阅读【小程序的组件化开发】章节，进行官方语法的组件库开发（从基础库 1.6.3 开始，官方提供了组件化解决方案）。</p><ul><li>WePY 类似 Vue 实现了单文件组件，最大的差别是文件后缀 .wpy，只是写法上会有差异，具体可以查看【主流框架使用案例 1：WePY】章节，学习起来有一定成本，不过也会很快适应：</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala</span><br><span class="line">复制代码<span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">wepy</span>.<span class="title">page</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>Mpvue 作为 Vue 的移植版本，支持单文件组件，template、script 和 style 都在一个 .vue 文件中，和 vue 的写法类似，所以对 Vue 开发熟悉的同学会比较适应。</li></ul><h2 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h2><p>所有的小程序开发依赖官方提供的开发者工具。开发者工具简单直观，对调试小程序很有帮助，现在也支持腾讯云（目前我们还没有使用，但是对新的一些开发者还是有帮助的），可以申请测试报告查看小程序在真实的移动设备上运行性能和运行效果，但是它本身没有类似前端工程化中的概念和工具。</p><ul><li><p>wepy 内置了构建，通过 wepy init 命令初始化项目，大致流程如下：</p></li><li><p>wepy-cli 会判断模版是在远程仓库还是在本地，如果在本地则会立即跳到第 3 步，反之继续进行。</p></li><li><p>会从远程仓库下载模版，并保存到本地。</p></li><li><p>询问开发者 Project name 等问题，依据开发者的回答，创建项目。</p></li><li><p>mpvue 沿用了 vue 中推崇的 webpack 作为构建工具，但同时提供了一些自己的插件以及配置文件的一些修改，比如：</p></li><li><p>不再需要 html-webpack-plugin</p></li><li><p>基于 webpack-dev-middleware 修改成 webpack-dev-middleware-hard-disk</p></li><li><p>最大的变化是基于 webpack-loader 修改成 mpvue-loader</p></li><li><p>但是配置方式还是类似，分环境配置文件，最终都会编译成小程序支持的目录结构和文件后缀。</p></li></ul><h2 id="综合比较"><a href="#综合比较" class="headerlink" title="综合比较"></a>综合比较</h2><table><thead><tr><th>对比\框架</th><th>微信小程序</th><th>mpvue</th><th>wepy</th></tr></thead><tbody><tr><td>语法规范</td><td>小程序开发规范</td><td>vue.js</td><td>类vue.js</td></tr><tr><td>标签集合</td><td>小程序</td><td>htm l + 小程序</td><td>小程序</td></tr><tr><td>样式规范</td><td>wxss</td><td>sass,less,postcss</td><td>sass,less,styus</td></tr><tr><td>组件化</td><td>无组件化机制</td><td>vue规范</td><td>自定义组件规范</td></tr><tr><td>多段复用</td><td>不可复用</td><td>支持h5</td><td>支持h5</td></tr><tr><td>自动构建</td><td>无自动构建</td><td>webpack</td><td>框架内置</td></tr><tr><td>上手成本</td><td>全新学习</td><td>vue 学习</td><td>vue 和 wepy</td></tr><tr><td>数据管理</td><td>不支持</td><td>vuex</td><td>redux</td></tr></tbody></table><h2 id="选型的个人看法"><a href="#选型的个人看法" class="headerlink" title="选型的个人看法"></a>选型的个人看法</h2><p>先说结论：选择 mpvue。</p><p>wepy vs mpvue。</p><p>理由：</p><p><strong>工程化</strong> 原生开发因为不带工程化，诸如NPM包（未来会引入）、ES7、图片压缩、PostCss、pug、ESLint等等不能用。如果自己要搭工程化，不如直接使用wepy或mpvue。mpvue和wepy都可以和小程序原生开发混写。<a href="#https://github.com/mpvue/examples/tree/master/echarts">参考mpvue-echart</a>，<a href="https://link.juejin.cn/?target=https://github.com/Tencent/wepy/issues/1560">参考wepy</a>。 而问题在于wepy没有引入webpack(<a href="mailto:&#119;&#x65;&#112;&#121;&#64;&#50;&#x2e;&#48;&#x2e;&#x78;">&#119;&#x65;&#112;&#121;&#64;&#50;&#x2e;&#48;&#x2e;&#x78;</a>依然没有引入)，以上说的这些东西都要造轮子（作者造或自己造）。没有引入 Webpack 是一个重大的硬伤。社区维护的成熟 Webpack 显然更稳定，轮子更多。</p><p><strong>维护</strong> wepy 也是社区维护的，是官方的？其实 wepy 的主要开发者只有作者一人，附上一个<a href="https://link.juejin.cn/?target=https://github.com/Tencent/wepy/graphs/contributors">contrubutors</a>链接。另外被官方招安了也是后来的事，再说腾讯要有精力帮着一起维护好 wepy，为什么不花精力在小程序原生开发上呢？再来看看 mpvue，是美团一个前端小组维护的。</p><p><strong>学习成本</strong> Vue 的学习曲线比较平缓。mpvue 是 Vue的子集。所以 mpvue 的学习成本会低于 wepy。尤其是之前技术栈有学过用过 Vue 的。</p><p><strong>未来规划</strong> mpvue 已经支持 web 和小程序。因为 mpvue 基于AST，所以未来可以支持支付宝小程序和快应用。他们也是有这样的规划。</p><p>请在需求池下面自己找</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a9cd96a15f056~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="mpvue-feature"></p><p><strong>坑</strong> 两者都有各自的坑。但是我觉得有一些wepy的坑是没法容忍的。比如<a href="https://link.juejin.cn/?target=https://github.com/Tencent/wepy/issues/1231">repeat组建里面用computed得到的列表全是同一套数据</a>而且1.x是没法解决的。 wepy和mpvue我都开发过完整小程序的体验下，我觉得wepy的坑更多，而且wepy有些坑碍于架构设计没办法解决。</p><h1 id="mpvue"><a href="#mpvue" class="headerlink" title="mpvue"></a>mpvue</h1><blockquote><p>Vue.js 小程序版, fork 自 vuejs&#x2F;<a href="mailto:&#118;&#117;&#x65;&#x40;&#x32;&#46;&#x34;&#46;&#x31;">&#118;&#117;&#x65;&#x40;&#x32;&#46;&#x34;&#46;&#x31;</a>，保留了 vue runtime 能力，添加了小程序平台的支持。 <code>mpvue</code> 是一个使用 <code>Vue.js</code> 开发小程序的前端框架。框架基于 <code>Vue.js</code> 核心，<code>mpvue</code> 修改了 <code>Vue.js</code> 的 runtime 和 compiler 实现，使其可以运行在小程序环境中，从而为小程序开发引入了整套 <code>Vue.js</code> 开发体验。</p></blockquote><h2 id="框架原理"><a href="#框架原理" class="headerlink" title="框架原理"></a>框架原理</h2><p><strong>两个大方向</strong></p><ul><li>通过<code>mpvue</code>提供 mp 的 runtime 适配小程序</li><li>通过<code>mpvue-loader</code>产出微信小程序所需要的文件结构和模块内容。</li></ul><p><strong>七个具体问题</strong></p><p>要了解 mpvue 原理必然要了解 Vue 原理，这是大前提。但是要讲清楚 Vue 原理需要花费大量的篇幅，不如参考<a href="https://link.juejin.cn/?target=https://github.com/answershuto/learnVue">learnVue</a>。</p><p>现在假设您对 Vue 原理有个大概的了解。</p><p>由于 Vue 使用了 Virtual DOM，所以 Virtual DOM 可以在任何支持 JavaScript 语言的平台上操作，譬如说目前 Vue 支持浏览器平台或 weex，也可以是 mp(小程序)。那么最后 Virtual DOM 如何映射到真实的 DOM 节点上呢？vue为平台做了一层适配层，浏览器平台见 <a href="https://link.juejin.cn/?target=https://github.com/Meituan-Dianping/mpvue/blob/master/src/platforms/web/runtime/node-ops.js">runtime&#x2F;node-ops.js</a>、weex平台见<a href="https://link.juejin.cn/?target=https://github.com/Meituan-Dianping/mpvue/blob/master/src/platforms/weex/runtime/node-ops.js">runtime&#x2F;node-ops.js</a>，小程序见<a href="https://link.juejin.cn/?target=https://github.com/Meituan-Dianping/mpvue/blob/master/src/platforms/mp/runtime/node-ops.js">runtime&#x2F;node-ops.js</a>。不同平台之间通过适配层对外提供相同的接口，Virtual DOM进行操作Real DOM节点的时候，只需要调用这些适配层的接口即可，而内部实现则不需要关心，它会根据平台的改变而改变。</p><p>所以思路肯定是往增加一个 mp 平台的 runtime 方向走。但问题是小程序不能操作 DOM，所以 mp 下的<code>node-ops.js</code> 里面的实现都是直接 <code>return obj</code>。</p><p>新 Virtual DOM 和旧 Virtual DOM 之间需要做一个 patch，找出 diff。patch完了之后的 diff 怎么更新视图，也就是如何给这些 DOM 加入 attr、class、style 等 DOM 属性呢？ Vue 中有 nextTick 的概念用以更新视图，mpvue这块对于小程序的 <code>setData</code> 应该怎么处理呢？</p><p>另外个问题在于小程序的 Virtual DOM 怎么生成？也就是怎么将 template 编译成<code>render function</code>。这当中还涉及到<a href="https://link.juejin.cn/?target=https://cn.vuejs.org/v2/guide/installation.html%23%E8%BF%90%E8%A1%8C%E6%97%B6-%E7%BC%96%E8%AF%91%E5%99%A8-vs-%E5%8F%AA%E5%8C%85%E5%90%AB%E8%BF%90%E8%A1%8C%E6%97%B6">运行时-编译器-vs-只包含运行时</a>，显然如果要提高性能、减少包大小、输出 wxml、mpvue 也要提供预编译的能力。因为要预输出 wxml 且没法动态改变 DOM，所以动态组件，自定义 render，和<code>&lt;script type=&quot;text/x-template&quot;&gt;</code> 字符串模版等都不支持(<a href="https://link.juejin.cn/?target=http://mpvue.com/mpvue/%23_15">参考</a>)。</p><p>另外还有一些其他问题，最后总结一下</p><ul><li>1.如何预编译生成<code>render function</code></li><li>2.如何预编译生成 wxml，wxss，wxs</li><li>3.如何 patch 出 diff</li><li>4.如何更新视图</li><li>5.如何建立小程序事件代理机制，在事件代理函数中触发与之对应的vue组件事件响应</li><li>6.如何建立vue实例与小程序 Page 实例关联</li><li>7.如何建立小程序和vue生命周期映射关系，能在小程序生命周期中触发vue生命周期</li></ul><p><strong><a href="https://link.juejin.cn/?target=">platform&#x2F;mp的目录结构</a></strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">awk复制代码.</span><br><span class="line">├── compiler <span class="regexp">//</span>解决问题<span class="number">1</span>，mpvue-template-compiler源码部分</span><br><span class="line">├── runtime <span class="regexp">//</span>解决问题<span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span></span><br><span class="line">├── util <span class="regexp">//</span>工具方法</span><br><span class="line">├── entry-compiler.js <span class="regexp">//m</span>pvue-template-compiler的入口。package.json相关命令会自动生成mpvue-template-compiler这个package。</span><br><span class="line">├── entry-runtime.js <span class="regexp">//</span>对外提供Vue对象，当然是mpvue</span><br><span class="line">└── join-code-<span class="keyword">in</span>-build.js <span class="regexp">//</span>编译出SDK时的修复</span><br></pre></td></tr></table></figure><p><strong>后面的内容逐步解答这几个问题，也就弄明白了原理</strong></p><h3 id="mpvue-loader"><a href="#mpvue-loader" class="headerlink" title="mpvue-loader"></a>mpvue-loader</h3><p><a href="https://link.juejin.cn/?target=https://github.com/mpvue/mpvue-loader">mpvue-loader</a> 是 <a href="https://link.juejin.cn/?target=https://github.com/vuejs/vue-loader">vue-loader</a> 的一个扩展延伸版，类似于超集的关系，除了<a href="https://link.juejin.cn/?target=https://github.com/vuejs/vue-loader">vue-loader</a> 本身所具备的能力之外，它还会利用<a href="https://link.juejin.cn/?target=https://github.com/Meituan-Dianping/mpvue/tree/master/packages/mpvue-template-compiler">mpvue-template-compiler</a>生成<code>render function</code>。</p><ul><li>entry</li></ul><p>它会从 <code>webpack</code> 的配置中的 entry 开始，分析依赖模块，并分别打包。在entry 中 app 属性及其内容会被打包为微信小程序所需要的 app.js／app.json／app.wxss，其余的会生成对应的页面page.js&#x2F;page.json&#x2F;page.wxml&#x2F;page.wxss，如示例的 entry 将会生成如下这些文件，文件内容下文慢慢讲来：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">stylus复制代码<span class="comment">// webpack.config.js</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: <span class="built_in">resolve</span>(<span class="string">&#x27;./src/main.js&#x27;</span>),               <span class="comment">// app 字段被识别为 app 类型</span></span><br><span class="line">        index: <span class="built_in">resolve</span>(<span class="string">&#x27;./src/pages/index/main.js&#x27;</span>),   <span class="comment">// 其余字段被识别为 page 类型</span></span><br><span class="line">        <span class="string">&#x27;news/home&#x27;</span>: <span class="built_in">resolve</span>(<span class="string">&#x27;./src/pages/news/home/index.js&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产出文件的结构</span></span><br><span class="line">.</span><br><span class="line">├── app<span class="selector-class">.js</span></span><br><span class="line">├── app<span class="selector-class">.json</span></span><br><span class="line">├──· app<span class="selector-class">.wxss</span></span><br><span class="line">├── components</span><br><span class="line">│   ├── card$<span class="number">74</span>bfae61<span class="selector-class">.wxml</span></span><br><span class="line">│   ├── index$<span class="number">023</span>eef02<span class="selector-class">.wxml</span></span><br><span class="line">│   └── news$<span class="number">0699930</span>b<span class="selector-class">.wxml</span></span><br><span class="line">├── news</span><br><span class="line">│   ├── home<span class="selector-class">.js</span></span><br><span class="line">│   ├── home<span class="selector-class">.wxml</span></span><br><span class="line">│   └── home<span class="selector-class">.wxss</span></span><br><span class="line">├── pages</span><br><span class="line">│   └── index</span><br><span class="line">│       ├── index<span class="selector-class">.js</span></span><br><span class="line">│       ├── index<span class="selector-class">.wxml</span></span><br><span class="line">│       └── index<span class="selector-class">.wxss</span></span><br><span class="line">└── static</span><br><span class="line">    ├── css</span><br><span class="line">    │   ├── app<span class="selector-class">.wxss</span></span><br><span class="line">    │   ├── index<span class="selector-class">.wxss</span></span><br><span class="line">    │   └── news</span><br><span class="line">    │       └── home<span class="selector-class">.wxss</span></span><br><span class="line">    └── js</span><br><span class="line">        ├── app<span class="selector-class">.js</span></span><br><span class="line">        ├── index<span class="selector-class">.js</span></span><br><span class="line">        ├── manifest<span class="selector-class">.js</span></span><br><span class="line">        ├── news</span><br><span class="line">        │   └── home<span class="selector-class">.js</span></span><br><span class="line">        └── vendor.js</span><br></pre></td></tr></table></figure><ul><li>wxml 每一个 <code>.vue</code> 的组件都会被生成为一个 wxml 规范的 template，然后通过 wxml 规范的 import 语法来达到一个复用，同时组件如果涉及到 props 的 data 数据，我们也会做相应的处理，举个实际的例子：</li></ul><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">handlebars复制代码<span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;my-component&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">msg</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">other-component</span> <span class="attr">:msg</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">other-component</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> otherComponent <span class="keyword">from</span> <span class="string">&#x27;./otherComponent.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123; otherComponent &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123; <span class="attr">msg</span>: <span class="string">&#x27;Hello Vue.js!&#x27;</span> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">test</span>(<span class="params"></span>) &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这样一个 Vue 的组件的模版部分会生成相应的 wxml</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">handlebars复制代码<span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">&quot;components/other-component$hash.wxml&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&quot;component$hash&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;my-component&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;handleProxy&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;_h1&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">msg</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">&quot;other-component$hash&quot;</span> <span class="attr">wx:if</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; <span class="name">$c</span>[0] &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">data</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; ..<span class="name">.$c</span>[0] &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>可能已经注意到了 other-component(:msg&#x3D;”msg”) 被转化成了  。mpvue 在运行时会从根组件开始把所有的组件实例数据合并成一个树形的数据，然后通过 setData 到 appData,<code>$c</code>是 $children 的缩写。至于那个 0 则是我们的 compiler 处理过后的一个标记，会为每一个子组件打一个特定的不重复的标记。 树形数据结构如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">awk复制代码<span class="regexp">//</span> 这儿数据结构是一个数组，index 是动态的</span><br><span class="line">&#123;</span><br><span class="line">  <span class="variable">$child</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>&#123;</span><br><span class="line">      <span class="regexp">//</span> ... root data</span><br><span class="line">      <span class="variable">$child</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;0&#x27;</span>: &#123;</span><br><span class="line">          <span class="regexp">//</span> ... data</span><br><span class="line">          msg: <span class="string">&#x27;Hello Vue.js!&#x27;</span>,</span><br><span class="line">          <span class="variable">$child</span>: &#123;</span><br><span class="line">            <span class="regexp">//</span> ...data</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>wxss</li></ul><p>这个部分的处理同 web 的处理差异不大，唯一不同在于通过配置生成 .css 为 .wxss ，其中的对于 css 的若干处理，在 postcss-mpvue-wxss 和 px2rpx-loader 这两部分的文档中又详细的介绍。</p><p>app.json／page.json 1.1.1 以上</p><p>推荐和小程序一样，将 app.json／page.json 放到页面入口处，使用 copy-webpack-plugin copy 到对应的生成位置。</p><p>1.1.1 以下</p><p>这部分内容来源于 app 和 page 的 entry 文件，通常习惯是 main.js，你需要在你的入口文件中 export default { config: {} }，这才能被我们的 loader 识别为这是一个配置，需要写成 json 文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">javascript复制代码<span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./app&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vueApp = <span class="keyword">new</span> <span class="title class_">Vue</span>(<span class="title class_">App</span>);</span><br><span class="line">vueApp.$mount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个是我们约定的额外的配置</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// 这个字段下的数据会被填充到 app.json ／ page.json</span></span><br><span class="line">    <span class="attr">config</span>: &#123;</span><br><span class="line">        <span class="attr">pages</span>: [<span class="string">&#x27;static/calendar/calendar&#x27;</span>, <span class="string">&#x27;^pages/list/list&#x27;</span>], <span class="comment">// Will be filled in webpack</span></span><br><span class="line">        <span class="attr">window</span>: &#123;</span><br><span class="line">            <span class="attr">backgroundTextStyle</span>: <span class="string">&#x27;light&#x27;</span>,</span><br><span class="line">            <span class="attr">navigationBarBackgroundColor</span>: <span class="string">&#x27;#455A73&#x27;</span>,</span><br><span class="line">            <span class="attr">navigationBarTitleText</span>: <span class="string">&#x27;美团汽车票&#x27;</span>,</span><br><span class="line">            <span class="attr">navigationBarTextStyle</span>: <span class="string">&#x27;#fff&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>同时，这个时候，我们会根据 entry 的页面数据，自动填充到 app.json 中的 pages 字段。 pages 字段也是可以自定义的，约定带有 ^ 符号开头的页面，会放到数组的最前面。</p><p>style scoped 在 vue-loader 中对 style scoped 的处理方式是给每个样式加一个 attr 来标记 module-id，然后在 css 中也给每条 rule 后添加 [module-id]，最终可以形成一个 css 的“作用域空间”。</p><p>在微信小程序中目前是不支持 attr 选择器的，所以我们做了一点改动，把 attr 上的 [module-id] 直接写到了 class 里，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">xml复制代码<span class="comment">&lt;!-- .vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        // ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- vue-loader --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span> <span class="attr">data-v-23e58823</span>&gt;</span></span><br><span class="line">        // ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span><span class="selector-attr">[data-v-23e58823]</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mpvue-loader --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container data-v-23e58823&quot;</span>&gt;</span></span><br><span class="line">        // ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span><span class="selector-class">.data-v-23e58823</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>compiler</li></ul><p>生产出的内容是：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">awk复制代码(<span class="keyword">function</span>(module, __webpack_exports__, __webpack_require__) &#123;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="regexp">//</span> mpvue-template-compiler会利用AST预编译生成一个render <span class="keyword">function</span>用以生成Virtual DOM。</span><br><span class="line">var render = <span class="keyword">function</span> () &#123;var _vm=this;var _h=_vm.<span class="variable">$createElement</span>;var _c=_vm._self._c||_h;</span><br><span class="line">  <span class="regexp">//</span> _c创建虚拟节点，参考https:<span class="regexp">//gi</span>thub.com<span class="regexp">/Meituan-Dianping/m</span>pvue<span class="regexp">/blob/m</span>aster<span class="regexp">/packages/m</span>pvue/index.js<span class="comment">#L3606</span></span><br><span class="line">  <span class="regexp">//</span> 以及https:<span class="regexp">//gi</span>thub.com<span class="regexp">/Meituan-Dianping/m</span>pvue<span class="regexp">/blob/m</span>aster<span class="regexp">/packages/m</span>pvue/index.js<span class="comment">#L3680</span></span><br><span class="line">  return _c(<span class="string">&#x27;div&#x27;</span>, &#123;</span><br><span class="line">    staticClass: <span class="string">&quot;my-component&quot;</span></span><br><span class="line">  &#125;, [_c(<span class="string">&#x27;h1&#x27;</span>, [_vm._v(_vm._s(_vm.msg))]), _vm._v(<span class="string">&quot; &quot;</span>), _c(<span class="string">&#x27;other-component&#x27;</span>, &#123;</span><br><span class="line">    attrs: &#123;</span><br><span class="line">      <span class="string">&quot;msg&quot;</span>: _vm.msg,</span><br><span class="line">      <span class="string">&quot;mpcomid&quot;</span>: <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)], <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> staticRenderFns的作用是静态渲染，在更新时不会进行patch，优化性能。而staticRenderFns是个空数组。</span><br><span class="line">var staticRenderFns = []</span><br><span class="line">render._withStripped = true</span><br><span class="line">var esExports = &#123; render: render, staticRenderFns: staticRenderFns &#125;</span><br><span class="line"><span class="regexp">/* harmony default export */</span> __webpack_exports__[<span class="string">&quot;a&quot;</span>] = (esExports);</span><br><span class="line"><span class="keyword">if</span> (false) &#123;</span><br><span class="line">  module.hot.accept()</span><br><span class="line">  <span class="keyword">if</span> (module.hot.data) &#123;</span><br><span class="line">     require(<span class="string">&quot;vue-hot-reload-api&quot;</span>).rerender(<span class="string">&quot;data-v-54ad9125&quot;</span>, esExports)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">/***/</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id="compiler"><a href="#compiler" class="headerlink" title="compiler"></a>compiler</h3><p>compiler相关，也就是template预编译这块，可以参考《<a href="https://link.juejin.cn/?target=https://github.com/answershuto/learnVue/blob/master/docs/%E8%81%8A%E8%81%8AVue%E7%9A%84template%E7%BC%96%E8%AF%91.MarkDown%23createcompiler">聊聊Vue的template编译</a>》来搞明白。原理是一样的。</p><p>mpvue自己实现了<code>export &#123; compile, compileToFunctions, compileToWxml &#125;</code>(<a href="https://link.juejin.cn/?target=https://github.com/Meituan-Dianping/mpvue/blob/master/src/platforms/mp/compiler/index.js">链接</a>)其中<code>compileToWxml</code>是用来生成wxml，具体代码<a href="https://link.juejin.cn/?target=https://github.com/mpvue/mpvue-loader/blob/master/lib/mp-compiler/index.js%23L30">在这</a>。</p><p>另外mpvue是不需要提供<a href="https://link.juejin.cn/?target=https://cn.vuejs.org/v2/guide/installation.html%23%E8%BF%90%E8%A1%8C%E6%97%B6-%E7%BC%96%E8%AF%91%E5%99%A8-vs-%E5%8F%AA%E5%8C%85%E5%90%AB%E8%BF%90%E8%A1%8C%E6%97%B6">运行时-编译器</a>的，虽然理论上是能够做到的。因为小程序不能操作DOM，即便提供了运行时-编译器也产生不了界面。</p><p>详细讲解compile过程：</p><p>1.将vue文件解析成模板对象</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk复制代码<span class="regexp">//</span> mpvue-loader<span class="regexp">/lib/</span>loader.js</span><br><span class="line">var parts = parse(content, fileName, this.sourceMap)</span><br></pre></td></tr></table></figure><p>假如vue文件源码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">xml复制代码<span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;container-bg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;home-container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">home-quotation-view</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in lists&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">:reason</span>=<span class="string">&quot;item.reason&quot;</span> <span class="attr">:stockList</span>=<span class="string">&quot;item.list&quot;</span> @<span class="attr">itemViewClicked</span>=<span class="string">&quot;itemViewClicked&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;js&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> homeQuotationView <span class="keyword">from</span> <span class="string">&#x27;@/components/homeQuotationView&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> topListApi <span class="keyword">from</span> <span class="string">&#x27;@/api/topListApi&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  data () &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">lists</span>: []</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    homeQuotationView</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> loadRankList () &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> &#123;data&#125; = <span class="keyword">await</span> topListApi.<span class="title function_">rankList</span>()</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (data) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">dateTime</span> = data.<span class="property">dt</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">lists</span> = data.<span class="property">rankList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> !!item</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    itemViewClicked (quotationItem) &#123;</span></span><br><span class="line"><span class="language-javascript">      wx.<span class="title function_">navigateTo</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>: <span class="string">`/pages/topListDetail/main?item=<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(quotationItem)&#125;</span>`</span></span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  onShow () &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="title function_">loadRankList</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;stylus&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container-bg</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span> <span class="number">100%</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span> <span class="number">100%</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span> <span class="selector-id">#F2F4FA</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.home-container</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span> <span class="number">100%</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span> <span class="number">100%</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow-x</span> hidden</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调用<code>parse(content, fileName, this.sourceMap)</code> 函数得到的结果大致如下：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">taggerscript复制代码&#123;</span><br><span class="line">  template: &#123;</span><br><span class="line">    type: &#x27;template&#x27;,</span><br><span class="line">    content: &#x27;<span class="symbol">\n</span>&lt;view class=&quot;container-bg&quot;&gt;<span class="symbol">\n</span>  &lt;view class=&quot;home-container&quot;&gt;<span class="symbol">\n</span>    &lt;home-quotation-view v-for=&quot;(item, index) in lists&quot; :key=&quot;index&quot; :reason=&quot;item.reason&quot; :stockList=&quot;item.list&quot; @itemViewClicked=&quot;itemViewClicked&quot; /&gt;<span class="symbol">\n</span>  &lt;/view&gt;<span class="symbol">\n</span>&lt;/view&gt;<span class="symbol">\n</span>&#x27;,</span><br><span class="line">    start: 10,</span><br><span class="line">    attrs: &#123;&#125;,</span><br><span class="line">    end: 251</span><br><span class="line">  &#125;,</span><br><span class="line">  script: &#123;</span><br><span class="line">    type: &#x27;script&#x27;,</span><br><span class="line">    content: &#x27;<span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span>import homeQuotationView from \&#x27;@/components/homeQuotationView\&#x27;<span class="symbol">\n</span>import topListApi from \&#x27;@/api/topListApi\&#x27;<span class="symbol">\n</span><span class="symbol">\n</span>export default &#123;<span class="symbol">\n</span>  data () &#123;<span class="symbol">\n</span>    return &#123;<span class="symbol">\n</span>      lists: []<span class="symbol">\n</span>    &#125;<span class="symbol">\n</span>  &#125;,<span class="symbol">\n</span>  components: &#123;<span class="symbol">\n</span>    homeQuotationView<span class="symbol">\n</span>  &#125;,<span class="symbol">\n</span>  methods: &#123;<span class="symbol">\n</span>    async loadRankList () &#123;<span class="symbol">\n</span>      let &#123;data&#125; = await topListApi.rankList()<span class="symbol">\n</span>      if (data) &#123;<span class="symbol">\n</span>        this.dateTime = data.dt<span class="symbol">\n</span>        this.lists = data.rankList.filter((item) =&gt; &#123;<span class="symbol">\n</span>          return !!item<span class="symbol">\n</span>        &#125;)<span class="symbol">\n</span>      &#125;<span class="symbol">\n</span>    &#125;,<span class="symbol">\n</span>    itemViewClicked (quotationItem) &#123;<span class="symbol">\n</span>      wx.navigateTo(&#123;<span class="symbol">\n</span>        url: `/pages/topListDetail/main?item=$&#123;JSON.stringify(quotationItem)&#125;`<span class="symbol">\n</span>      &#125;)<span class="symbol">\n</span>    &#125;<span class="symbol">\n</span>  &#125;,<span class="symbol">\n</span>  onShow () &#123;<span class="symbol">\n</span>    this.loadRankList()<span class="symbol">\n</span>  &#125;<span class="symbol">\n</span>&#125;<span class="symbol">\n</span>&#x27;,</span><br><span class="line">    start: 282,</span><br><span class="line">    attrs: &#123;</span><br><span class="line">      lang: &#x27;js&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    lang: &#x27;js&#x27;,</span><br><span class="line">    end: 946,</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  styles: [&#123;</span><br><span class="line">    type: &#x27;style&#x27;,</span><br><span class="line">    content: &#x27;<span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span>.container-bg<span class="symbol">\n</span>  width 100%<span class="symbol">\n</span>  height 100%<span class="symbol">\n</span>  background-color #F2F4FA<span class="symbol">\n</span><span class="symbol">\n</span>.home-container<span class="symbol">\n</span>  width 100%<span class="symbol">\n</span>  height 100%<span class="symbol">\n</span>  overflow-x hidden<span class="symbol">\n</span><span class="symbol">\n</span>&#x27;,</span><br><span class="line">    start: 985,</span><br><span class="line">    attrs: [Object],</span><br><span class="line">    lang: &#x27;stylus&#x27;,</span><br><span class="line">    scoped: true,</span><br><span class="line">    end: 1135,</span><br><span class="line">    ...</span><br><span class="line">  &#125;],</span><br><span class="line">  customBlocks: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.调用mpvue-loader&#x2F;lib&#x2F;template-compiler&#x2F;index.js导出的接口并传入上面得到的html模板：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dart复制代码<span class="keyword">var</span> templateCompilerPath = normalize.lib(<span class="string">&#x27;template-compiler/index&#x27;</span>)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">var</span> defaultLoaders = &#123;</span><br><span class="line">  html: templateCompilerPath + templateCompilerOptions,</span><br><span class="line">  css: options.extractCSS</span><br><span class="line">    ? getCSSExtractLoader()</span><br><span class="line">    : styleLoaderPath + <span class="string">&#x27;!&#x27;</span> + <span class="string">&#x27;css-loader&#x27;</span> + cssLoaderOptions,</span><br><span class="line">  js: hasBuble ? (<span class="string">&#x27;buble-loader&#x27;</span> + bubleOptions) : hasBabel ? babelLoaderOptions : <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// check if there are custom loaders specified via</span></span><br><span class="line"><span class="comment">// webpack config, otherwise use defaults</span></span><br><span class="line"><span class="keyword">var</span> loaders = <span class="built_in">Object</span>.assign(&#123;&#125;, defaultLoaders, options.loaders)</span><br></pre></td></tr></table></figure><ol><li>调用mpvue&#x2F;packages&#x2F;mpvue-template-compiler&#x2F;build.js的compile接口：</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk复制代码<span class="regexp">//</span> mpvue-loader<span class="regexp">/lib/</span>template-compiler/index.js</span><br><span class="line">var compiled = compile(html, compilerOptions)</span><br></pre></td></tr></table></figure><p>compile方法生产下面的ast(Abstract Syntax Tree)模板，render函数和staticRenderFns</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">yaml复制代码&#123;</span></span><br><span class="line">  <span class="attr">ast:</span> &#123;</span><br><span class="line">    <span class="attr">type:</span> <span class="number">1</span>,</span><br><span class="line">    <span class="attr">tag:</span> <span class="string">&#x27;view&#x27;</span>,</span><br><span class="line">    <span class="attr">attrsList:</span> [],</span><br><span class="line">    <span class="attr">attrsMap:</span> &#123;</span><br><span class="line">      <span class="attr">class:</span> <span class="string">&#x27;container-bg&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">parent:</span> <span class="string">undefined</span>,</span><br><span class="line">    <span class="attr">children:</span> [&#123;</span><br><span class="line">      <span class="attr">type:</span> <span class="number">1</span>,</span><br><span class="line">      <span class="attr">tag:</span> <span class="string">&#x27;view&#x27;</span>,</span><br><span class="line">      <span class="attr">attrsList:</span> [],</span><br><span class="line">      <span class="attr">attrsMap:</span> &#123;</span><br><span class="line">        <span class="attr">class:</span> <span class="string">&#x27;home-container&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">parent:</span> &#123;</span><br><span class="line">        <span class="attr">type:</span> <span class="number">1</span>,</span><br><span class="line">        <span class="attr">tag:</span> <span class="string">&#x27;view&#x27;</span>,</span><br><span class="line">        <span class="attr">attrsList:</span> [],</span><br><span class="line">        <span class="attr">attrsMap:</span> &#123;</span><br><span class="line">          <span class="attr">class:</span> <span class="string">&#x27;container-bg&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">parent:</span> <span class="string">undefined</span>,</span><br><span class="line">        <span class="attr">children:</span> [</span><br><span class="line">          [<span class="string">Circular</span>]</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">plain:</span> <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">staticClass:</span> <span class="string">&#x27;&quot;container-bg&quot;&#x27;</span>,</span><br><span class="line">        <span class="attr">static:</span> <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">staticRoot:</span> <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">children:</span> [&#123;</span><br><span class="line">        <span class="attr">type:</span> <span class="number">1</span>,</span><br><span class="line">        <span class="attr">tag:</span> <span class="string">&#x27;home-quotation-view&#x27;</span>,</span><br><span class="line">        <span class="attr">attrsList:</span> [&#123;</span><br><span class="line">          <span class="attr">name:</span> <span class="string">&#x27;:reason&#x27;</span>,</span><br><span class="line">          <span class="attr">value:</span> <span class="string">&#x27;item.reason&#x27;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">name:</span> <span class="string">&#x27;:stockList&#x27;</span>,</span><br><span class="line">          <span class="attr">value:</span> <span class="string">&#x27;item.list&#x27;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">name:</span> <span class="string">&#x27;@itemViewClicked&#x27;</span>,</span><br><span class="line">          <span class="attr">value:</span> <span class="string">&#x27;itemViewClicked&#x27;</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="attr">attrsMap:</span> &#123;</span><br><span class="line">          <span class="attr">&#x27;v-for&#x27;:</span> <span class="string">&#x27;(item, index) in lists&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;:key&#x27;</span><span class="string">:</span> <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;:reason&#x27;</span><span class="string">:</span> <span class="string">&#x27;item.reason&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;:stockList&#x27;</span><span class="string">:</span> <span class="string">&#x27;item.list&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;@itemViewClicked&#x27;</span><span class="string">:</span> <span class="string">&#x27;itemViewClicked&#x27;</span>,</span><br><span class="line">          <span class="attr">&#x27;data-eventid&#x27;:</span> <span class="string">&#x27;<span class="template-variable">&#123;&#123;\&#x27;0-\&#x27;+index&#125;&#125;</span>&#x27;</span>,</span><br><span class="line">          <span class="attr">&#x27;data-comkey&#x27;:</span> <span class="string">&#x27;<span class="template-variable">&#123;&#123;$k&#125;&#125;</span>&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">parent:</span> [<span class="string">Circular</span>],</span><br><span class="line">        <span class="attr">children:</span> [],</span><br><span class="line">        <span class="attr">for:</span> <span class="string">&#x27;lists&#x27;</span>,</span><br><span class="line">        <span class="attr">alias:</span> <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">        <span class="attr">iterator1:</span> <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">        <span class="attr">key:</span> <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">        <span class="attr">plain:</span> <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">hasBindings:</span> <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">attrs:</span> [&#123;</span><br><span class="line">          <span class="attr">name:</span> <span class="string">&#x27;reason&#x27;</span>,</span><br><span class="line">          <span class="attr">value:</span> <span class="string">&#x27;item.reason&#x27;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">name:</span> <span class="string">&#x27;stockList&#x27;</span>,</span><br><span class="line">          <span class="attr">value:</span> <span class="string">&#x27;item.list&#x27;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">name:</span> <span class="string">&#x27;eventid&#x27;</span>,</span><br><span class="line">          <span class="attr">value:</span> <span class="string">&#x27;\&#x27;0-\&#x27;+index&#x27;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">name:</span> <span class="string">&#x27;mpcomid&#x27;</span>,</span><br><span class="line">          <span class="attr">value:</span> <span class="string">&#x27;\&#x27;0-\&#x27;+index&#x27;</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="attr">events:</span> &#123;</span><br><span class="line">          <span class="attr">itemViewClicked:</span> &#123;</span><br><span class="line">            <span class="attr">value:</span> <span class="string">&#x27;itemViewClicked&#x27;</span>,</span><br><span class="line">            <span class="attr">modifiers:</span> <span class="string">undefined</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">eventid:</span> <span class="string">&#x27;\&#x27;0-\&#x27;+index&#x27;</span>,</span><br><span class="line">        <span class="attr">mpcomid:</span> <span class="string">&#x27;\&#x27;0-\&#x27;+index&#x27;</span>,</span><br><span class="line">        <span class="attr">static:</span> <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">staticRoot:</span> <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">forProcessed:</span> <span class="literal">true</span></span><br><span class="line">      &#125;],</span><br><span class="line">      <span class="attr">plain:</span> <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">staticClass:</span> <span class="string">&#x27;&quot;home-container&quot;&#x27;</span>,</span><br><span class="line">      <span class="attr">static:</span> <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">staticRoot:</span> <span class="literal">false</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="attr">plain:</span> <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">staticClass:</span> <span class="string">&#x27;&quot;container-bg&quot;&#x27;</span>,</span><br><span class="line">    <span class="attr">static:</span> <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">staticRoot:</span> <span class="literal">false</span></span><br><span class="line">  &#125;<span class="string">,</span></span><br><span class="line">  <span class="attr">render:</span> <span class="string">&#x27;with(this)&#123;return _c(\&#x27;view\&#x27;,&#123;staticClass:&quot;container-bg&quot;&#125;,[_c(\&#x27;view\&#x27;,&#123;staticClass:&quot;home-container&quot;&#125;,_l((lists),function(item,index)&#123;return _c(\&#x27;home-quotation-view\&#x27;,&#123;key:index,attrs:&#123;&quot;reason&quot;:item.reason,&quot;stockList&quot;:item.list,&quot;eventid&quot;:\&#x27;0-\&#x27;+index,&quot;mpcomid&quot;:\&#x27;0-\&#x27;+index&#125;,on:&#123;&quot;itemViewClicked&quot;:itemViewClicked&#125;&#125;)&#125;))])&#125;&#x27;</span><span class="string">,</span></span><br><span class="line">  <span class="attr">staticRenderFns:</span> []<span class="string">,</span></span><br><span class="line">  <span class="attr">errors:</span> []<span class="string">,</span></span><br><span class="line">  <span class="attr">tips:</span> []</span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>其中的render函数运行的结果是返回<code>VNode</code>对象，其实<code>render</code>函数应该长下面这样：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">scheme复制代码(<span class="name">function</span>() &#123;</span><br><span class="line">  with(<span class="name">this</span>)&#123;</span><br><span class="line">    return _c(<span class="symbol">&#x27;div</span>&#x27;,&#123;   //创建一个 div 元素</span><br><span class="line">      attrs:&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;app&quot;</span>&#125;  //div 添加属性 id</span><br><span class="line">      &#125;,[</span><br><span class="line">        _m(<span class="name">0</span>),  //静态节点 header，此处对应 staticRenderFns 数组索引为 <span class="number">0</span> 的 render 函数</span><br><span class="line">        _v(<span class="string">&quot; &quot;</span>), //空的文本节点</span><br><span class="line">        (<span class="name">message</span>) //三元表达式，判断 message 是否存在</span><br><span class="line">         //如果存在，创建 p 元素，元素里面有文本，值为 toString(<span class="name">message</span>)</span><br><span class="line">        ?_c(<span class="symbol">&#x27;p</span>&#x27;,[<span class="name">_v</span>(<span class="string">&quot;\n    &quot;</span>+_s(<span class="name">message</span>)+<span class="string">&quot;\n  &quot;</span>)])</span><br><span class="line">        //如果不存在，创建 p 元素，元素里面有文本，值为 No message. </span><br><span class="line">        :_c(<span class="symbol">&#x27;p</span>&#x27;,[<span class="name">_v</span>(<span class="string">&quot;\n    No message.\n  &quot;</span>)])</span><br><span class="line">      ]</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其中的<code>_c</code>就是vue对象的<code>createElement</code>方法 (创建元素)，<code>_m</code>是<code>renderStatic</code>（渲染静态节点），<code>_v</code> 是 <code>createTextVNode</code>（创建文本dom），<code>_s</code> 是 <code>toString</code> （转换为字符串）</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">reasonml复制代码<span class="comment">// src/core/instance/render.js</span></span><br><span class="line">export <span class="keyword">function</span> initRender<span class="function"> (<span class="params">vm<span class="typing">: <span class="module"><span class="identifier">Component</span>)</span> &#123;</span></span></span></span><br><span class="line"><span class="typing"><span class="params"><span class="function"></span>  <span class="operator">...</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>  // <span class="params">bind the createElement fn to this instance</span></span></span><br><span class="line"><span class="params"><span class="function"></span>  // <span class="params">so that we get proper render context inside it.</span></span></span><br><span class="line"><span class="params"><span class="function"></span>  // <span class="params">args order<span class="typing">: tag,</span> data,</span> <span class="params">children,</span> <span class="params">normalizationType,</span> <span class="params">alwaysNormalize</span></span></span><br><span class="line"><span class="params"><span class="function"></span>  // <span class="params">internal version is used by render functions compiled from templates</span></span></span><br><span class="line"><span class="params"><span class="function"></span>  <span class="params">vm._c = (a,</span> <span class="params">b,</span> <span class="params">c,</span> <span class="params">d)</span> =&gt;</span> create<span class="constructor">Element(<span class="params">vm</span>, <span class="params">a</span>, <span class="params">b</span>, <span class="params">c</span>, <span class="params">d</span>, <span class="params">false</span>)</span></span><br><span class="line">  <span class="comment">// normalization is always applied for the public version, used in</span></span><br><span class="line">  <span class="comment">// user-written render functions.</span></span><br><span class="line">  vm.$createElement =<span class="function"> (<span class="params">a</span>, <span class="params">b</span>, <span class="params">c</span>, <span class="params">d</span>) =&gt;</span> create<span class="constructor">Element(<span class="params">vm</span>, <span class="params">a</span>, <span class="params">b</span>, <span class="params">c</span>, <span class="params">d</span>, <span class="params">true</span>)</span><span class="operator"></span></span><br><span class="line"><span class="operator">  ...</span></span><br><span class="line"><span class="operator"></span>&#125;<span class="operator"></span></span><br><span class="line"><span class="operator"></span></span><br><span class="line"><span class="operator">...</span></span><br><span class="line"><span class="operator"></span><span class="module-access"><span class="module"><span class="identifier">Vue</span>.</span></span>prototype._s = toString<span class="operator"></span></span><br><span class="line"><span class="operator">...</span></span><br><span class="line"><span class="operator"></span><span class="module-access"><span class="module"><span class="identifier">Vue</span>.</span></span>prototype._m = renderStatic<span class="operator"></span></span><br><span class="line"><span class="operator">...</span></span><br><span class="line"><span class="operator"></span><span class="module-access"><span class="module"><span class="identifier">Vue</span>.</span></span>prototype._v = createTextVNode</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol><li>调用compileWxml方法生产wxml模板，这个方法最终会调用 mpvue&#x2F;packages&#x2F;mpvue-template-compiler&#x2F;build.js的compileToWxml方法将第一步compile出来的模板转成小程序的wxml模板</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk复制代码<span class="regexp">//</span> mpvue-loader<span class="regexp">/lib/</span>template-compiler/index.js</span><br><span class="line">compileToWxml.call(this, compiled, html)</span><br></pre></td></tr></table></figure><p><strong>以上解答了问题1、2</strong></p><h3 id="runtime"><a href="#runtime" class="headerlink" title="runtime"></a>runtime</h3><p><a href="https://link.juejin.cn/?target=">目录结构</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">awk复制代码.</span><br><span class="line">├── events.js <span class="regexp">//</span>解答问题<span class="number">5</span></span><br><span class="line">├── index.js <span class="regexp">//</span>入口提供Vue对象，以及<span class="variable">$mount</span>，和各种初始化</span><br><span class="line">├── liefcycle <span class="regexp">//</span>解答问题<span class="number">6</span>、<span class="number">7</span></span><br><span class="line">├── node-ops.js <span class="regexp">//</span>操作真实DOM的相关实现，因为小程序不能操作DOM，所以这里都是直接返回</span><br><span class="line">├── patch.js <span class="regexp">//</span>解答问题<span class="number">3</span></span><br><span class="line">└── render.js <span class="regexp">//</span>解答问题<span class="number">4</span></span><br></pre></td></tr></table></figure><p><strong><a href="https://link.juejin.cn/?target=https://github.com/Meituan-Dianping/mpvue/blob/master/src/platforms/mp/runtime/patch.js">patch.js</a></strong></p><p>和vue使用的<code>createPatchFunction</code>保持一致，任然是旧树和新树进行patch产出diff，但是多了一行this.$updateDataToMP()用以更新。</p><p><strong><a href="https://link.juejin.cn/?target=https://github.com/Meituan-Dianping/mpvue/blob/master/src/platforms/mp/runtime/render.js">render.js</a></strong></p><p>两个核心的方法<code>initDataToMP</code>、<code>updateDataToMP</code>。</p><p><code>initDataToMP</code>收集vm上的data，然后调用小程序Page示例的<code>setData</code>渲染。</p><p><code>updateDataToMP</code>在每次patch，也就是依赖收集发现数据改变时更新(参考patch.js代码)，这部分一样会使用<code>nextTick</code>和队列。最终使用了节流阀<code>throttleSetData</code>。50毫秒用来控制频率以解决频繁修改Data，会造成大量传输Data数据而导致的性能问题。</p><p>其中<code>collectVmData</code>最终也是用到了<code>formatVmData</code>。尤其要注意的是一句注释：</p><blockquote><p>getVmData 这儿获取当前组件内的所有数据，包含 props、computed 的数据</p></blockquote><p>我们又知道，service到view是两个线程间通信，如果Data含有大量数据，增加了传输数据量，加大了传输成本，将会造成性能下降。</p><p><strong><a href="https://link.juejin.cn/?target=https://github.com/Meituan-Dianping/mpvue/blob/master/src/platforms/mp/runtime/events.js">events.js</a></strong></p><p>正如官网所说的，这里使用<code>eventTypeMap</code>做了各<a href="https://link.juejin.cn/?target=http://mpvue.com/mpvue/%23_13">事件的隐射</a></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">clean</span><br><span class="line">复制代码<span class="keyword">import</span> &#123; getComKey, eventTypeMap &#125; <span class="keyword">from</span> <span class="string">&#x27;../util/index&#x27;</span></span><br><span class="line">stylus复制代码<span class="comment">// 用于小程序的 event type 到 web 的 event</span></span><br><span class="line"><span class="keyword">export</span> const eventTypeMap = &#123;</span><br><span class="line">  tap: [<span class="string">&#x27;tap&#x27;</span>, <span class="string">&#x27;click&#x27;</span>],</span><br><span class="line">  touchstart: [<span class="string">&#x27;touchstart&#x27;</span>],</span><br><span class="line">  touchmove: [<span class="string">&#x27;touchmove&#x27;</span>],</span><br><span class="line">  touchcancel: [<span class="string">&#x27;touchcancel&#x27;</span>],</span><br><span class="line">  touchend: [<span class="string">&#x27;touchend&#x27;</span>],</span><br><span class="line">  longtap: [<span class="string">&#x27;longtap&#x27;</span>],</span><br><span class="line">  input: [<span class="string">&#x27;input&#x27;</span>],</span><br><span class="line">  blur: [<span class="string">&#x27;change&#x27;</span>, <span class="string">&#x27;blur&#x27;</span>],</span><br><span class="line">  submit: [<span class="string">&#x27;submit&#x27;</span>],</span><br><span class="line">  focus: [<span class="string">&#x27;focus&#x27;</span>],</span><br><span class="line">  scrolltoupper: [<span class="string">&#x27;scrolltoupper&#x27;</span>],</span><br><span class="line">  scrolltolower: [<span class="string">&#x27;scrolltolower&#x27;</span>],</span><br><span class="line">  scroll: [<span class="string">&#x27;scroll&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用了<code>handleProxyWithVue</code>方法来代理小程序事件到vue事件。</p><p>另外看下作者自己对这部分的<a href="https://link.juejin.cn/?target=https://tech.meituan.com/mt_mpvue_development_framework.html">思路</a></p><blockquote><p><strong>事件代理机制</strong>：用户交互触发的数据更新通过事件代理机制完成。在 Vue.js 代码中，事件响应函数对应到组件的 method， Vue.js 自动维护了上下文环境。然而在小程序中并没有类似的机制，又因为 Vue.js 执行环境中维护着一份实时的虚拟 DOM，这与小程序的视图层完全对应，我们思考，在小程序组件节点上触发事件后，只要找到虚拟 DOM 上对应的节点，触发对应的事件不就完成了么；另一方面，Vue.js 事件响应如果触发了数据更新，其生命周期函数更新将自动触发，在此函数上同步更新小程序数据，数据同步也就实现了。</p></blockquote><p><code>getHandle</code>这个方法应该就是作者思路当中所说的：找到对应节点，然后找到handle。</p><p><strong><a href="https://link.juejin.cn/?target=https://github.com/Meituan-Dianping/mpvue/blob/master/src/platforms/mp/runtime/lifecycle.js">lifecycle.js</a></strong></p><p>在<code>initMP</code>方法中，自己创建小程序的App、Page。实现生命周期相关方法，使用<code>callHook</code>代理兼容小程序App、Page的生命周期。</p><p><a href="https://link.juejin.cn/?target=http://mpvue.com/mpvue/%23_4">官方文档生命周期</a>中说到了：</p><blockquote><p>同 vue，不同的是我们会在小程序 onReady 后，再去触发 vue mounted 生命周期</p></blockquote><p>这部分查看，<code>onReady</code>之后才会执行<code>next</code>，这个<code>next</code>回调最终是vue的<code>mountComponent</code>。可以在<a href="https://link.juejin.cn/?target=https://github.com/Meituan-Dianping/mpvue/blob/master/src/platforms/mp/runtime/index.js%23L37">index.js</a>中看到。这部分代码也就是解决了”小程序生命周期中触发vue生命周期”。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">awk复制代码export <span class="keyword">function</span> initMP (mpType, <span class="keyword">next</span>) &#123;</span><br><span class="line">  <span class="regexp">//</span> ...</span><br><span class="line">    global.Page(&#123;</span><br><span class="line">      <span class="regexp">//</span> 生命周期函数--监听页面初次渲染完成</span><br><span class="line">      onReady () &#123;</span><br><span class="line">        mp.status = <span class="string">&#x27;ready&#x27;</span></span><br><span class="line"></span><br><span class="line">        callHook(rootVueVM, <span class="string">&#x27;onReady&#x27;</span>)</span><br><span class="line">        <span class="keyword">next</span>()</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="regexp">//</span> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在小程序onShow时，使用$nextTick去第一次渲染数据，参考上面提到的render.js。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">awk复制代码export <span class="keyword">function</span> initMP (mpType, <span class="keyword">next</span>) &#123;</span><br><span class="line">  <span class="regexp">//</span> ...</span><br><span class="line">  global.Page(&#123;</span><br><span class="line">    <span class="regexp">//</span> 生命周期函数--监听页面显示</span><br><span class="line">    onShow () &#123;</span><br><span class="line">      mp.page = this</span><br><span class="line">      mp.status = <span class="string">&#x27;show&#x27;</span></span><br><span class="line">      callHook(rootVueVM, <span class="string">&#x27;onShow&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="regexp">//</span> 只有页面需要 setData</span><br><span class="line">      rootVueVM.<span class="variable">$nextTick</span>(() =&gt; &#123;</span><br><span class="line">        rootVueVM._initDataToMP()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="regexp">//</span> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在mpvue-loader生成template时，比如点击事件<code>@click</code>会变成<code>bindtap=&quot;handleProxy&quot;</code>，事件绑定全都会使用<code>handleProxy</code>这个方法。</p><p>可以查看上面<a href="#mpvue-loader">mpvue-loader</a>回顾一下。</p><p>最终handleProxy调用的是event.js中的<code>handleProxyWithVue</code>。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">awk复制代码export <span class="keyword">function</span> initMP (mpType, <span class="keyword">next</span>) &#123;</span><br><span class="line">  <span class="regexp">//</span> ...</span><br><span class="line">    global.Page(&#123;</span><br><span class="line">      handleProxy (e) &#123;</span><br><span class="line">        return rootVueVM.<span class="variable">$handleProxyWithVue</span>(e)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="regexp">//</span> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="https://link.juejin.cn/?target=https://github.com/Meituan-Dianping/mpvue/blob/master/src/platforms/mp/runtime/index.js">index.js</a></strong></p><p>最后index.js就负责各种初始化和mount。</p><h2 id="Class和Style为什么暂不支持组件"><a href="#Class和Style为什么暂不支持组件" class="headerlink" title="Class和Style为什么暂不支持组件"></a>Class和Style为什么暂不支持组件</h2><p>原因：目前的组件是使用小程序的 template 标签实现的，给组件指定的class和style是挂载在template标签上，而template 标签不支持 class 及 style 属性。</p><p>解决方案： 在自定义组件上绑定class或style到一个props属性上。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">arduino复制代码 <span class="comment">// 组件ComponentA.vue</span></span><br><span class="line"> &lt;<span class="keyword">template</span>&gt;</span><br><span class="line">  &lt;div <span class="keyword">class</span>=<span class="string">&quot;container&quot;</span> :<span class="keyword">class</span>=<span class="string">&quot;pClass&quot;</span>&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/<span class="keyword">template</span>&gt;</span><br><span class="line">xml复制代码&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      pClass: &#123;</span><br><span class="line">        type: <span class="type">String</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">xml复制代码&lt;!--PageB.vue--&gt;</span></span><br><span class="line"><span class="string">&lt;template&gt;</span></span><br><span class="line"><span class="string">    &lt;component-a :pClass=&quot;cusComponentAClass&quot;  /&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string">applescript复制代码&lt;script&gt;</span></span><br><span class="line"><span class="string">data () &#123;</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">      cusComponentAClass: &#x27;</span>a-<span class="keyword">class</span> b-<span class="keyword">class</span><span class="number">&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">xml复制代码&lt;style lang=<span class="string">&quot;stylus&quot;</span> scoped&gt;</span><br><span class="line">  .a-<span class="keyword">class</span></span><br><span class="line">    border red solid <span class="number">2</span>rpx</span><br><span class="line">  .b-<span class="keyword">class</span></span><br><span class="line">    margin-right <span class="number">20</span>rpx</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>但是这样会有问题就是style加上scoped之后，编译模板生成的代码是下面这样的：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">haskell</span>复制代码 .a-<span class="keyword">class</span>.<span class="class"><span class="keyword">data</span>-v-8f1d914e &#123;</span></span><br><span class="line"><span class="class">   <span class="title">border</span>: #<span class="title">f00</span> <span class="title">solid</span> 2<span class="title">rpx</span>;</span></span><br><span class="line"><span class="class"> &#125;</span></span><br><span class="line"> .b-<span class="keyword">class</span>.<span class="class"><span class="keyword">data</span>-v-8f1d914e &#123;</span></span><br><span class="line"><span class="class">   <span class="title">margin</span>-<span class="title">right</span> 20<span class="title">rpx</span></span></span><br><span class="line"><span class="class"> &#125;</span></span><br></pre></td></tr></table></figure><p>所以想要这些组件的class生效就不能使用scoped的style，改成下面这样，最好自己给a-class和b-class加前缀以防其他的文件引用这些样式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">xml复制代码 <span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;stylus&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.a-class</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span> red solid <span class="number">2</span>rpx</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.b-class</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-right</span> <span class="number">20</span>rpx</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;stylus&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.other-class</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span> red solid <span class="number">2</span>rpx</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">   ...</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在定义组件上绑定style属性到一个props属性上：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">xml复制代码 <span class="comment">&lt;!--P组件ComponentA.vue--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;pStyle&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">xml复制代码<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">pStyle</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">xml复制代码<span class="comment">&lt;!--PageB.vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component-a</span> <span class="attr">:pStyle</span>=<span class="string">&quot;cusComponentAStyle&quot;</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">xml复制代码<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> cusComponentAStyle = <span class="string">&#x27;border:red solid 2rpx; margin-right:20rpx;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">data () &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      cusComponentAStyle</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">xml复制代码<span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;stylus&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以通过定义styleObject，然后通过工具函数转化为styleString，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">javascript复制代码<span class="keyword">const</span> bstyle = &#123;</span><br><span class="line">  <span class="attr">border</span>: <span class="string">&#x27;red solid 2rpx&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;margin-right&#x27;</span>: <span class="string">&#x27;20rpx&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(bstyle)) &#123;</span><br><span class="line">  arr.<span class="title function_">push</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cusComponentAStyle = arr.<span class="title function_">join</span>(<span class="string">&#x27;; &#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>当然自定义组件确定只会改变某个css样式，通过pros传入单个样式的值，然后通过:style绑定肯定没问题：</li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">dust复制代码<span class="comment">&lt;!--组件ComponentA.vue--&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#x27;background-color&#x27;: backgroundColor&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    ...</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">xml复制代码<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span> </span></span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">    props: &#123;</span></span><br><span class="line"><span class="template-variable">      backgroundColor: &#123;</span></span><br><span class="line"><span class="template-variable">        type: String,</span></span><br><span class="line"><span class="template-variable">        <span class="keyword">default</span>: &#x27;yellow&#x27;</span></span><br><span class="line"><span class="template-variable">      &#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">xml复制代码<span class="comment">&lt;!-- PageB.vue --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">component-a</span> <span class="attr">backgroundColor</span>=<span class="string">&quot;red&quot;</span>  /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="分包加载"><a href="#分包加载" class="headerlink" title="分包加载"></a>分包加载</h2><p>package.json修改</p><ul><li>升级： “mpvue-loader”: “^1.1.2-rc.4” “webpack-mpvue-asset-plugin”: “^0.1.1”</li><li>新增： “relative”: “^3.0.2”</li></ul><p>注意事项</p><ul><li>1.1.2-rc.5 修复 slot 文件路径生成错误的问题</li><li>1.1.x 版本还不是很稳定，对稳定性要求较高的项目建议暂时使用 1.0.x 版本</li></ul><p>移动src&#x2F;main.js中config相关内容到同级目录下main.json(新建)中</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nim复制代码<span class="keyword">export</span> default &#123;</span><br><span class="line">  // config: <span class="meta">&#123;...&#125;</span> 需要移动</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>to</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">nim复制代码&#123;</span><br><span class="line"> <span class="string">&quot;pages&quot;</span>: [</span><br><span class="line">   <span class="string">&quot;pages/index/main&quot;</span>,</span><br><span class="line">   <span class="string">&quot;pages/logs/main&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;subPackages&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;root&quot;</span>: <span class="string">&quot;pages/packageA&quot;</span>,</span><br><span class="line">     <span class="string">&quot;pages&quot;</span>: [</span><br><span class="line">       <span class="string">&quot;counter/main&quot;</span></span><br><span class="line">     ]</span><br><span class="line">   &#125;</span><br><span class="line"> ],</span><br><span class="line"> <span class="string">&quot;window&quot;</span>: <span class="meta">&#123;...&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>webpack 配置配合升级指南</strong></p><ul><li>本次升级意在调整生成文件目录结构，对依赖的文件由原来的写死绝对路径该改为相对路径</li><li><a href="mailto:&#x6d;&#x70;&#x76;&#x75;&#x65;&#45;&#x6c;&#111;&#x61;&#100;&#101;&#x72;&#x40;&#49;&#x2e;&#49;&#x2e;&#50;&#45;&#114;&#99;&#46;&#52;">&#x6d;&#x70;&#x76;&#x75;&#x65;&#45;&#x6c;&#111;&#x61;&#100;&#101;&#x72;&#x40;&#49;&#x2e;&#49;&#x2e;&#50;&#45;&#114;&#99;&#46;&#52;</a> 依赖 <a href="mailto:&#119;&#x65;&#98;&#x70;&#97;&#99;&#x6b;&#45;&#109;&#112;&#118;&#117;&#101;&#x2d;&#x61;&#x73;&#x73;&#101;&#x74;&#45;&#112;&#108;&#117;&#103;&#105;&#110;&#64;&#x30;&#x2e;&#x31;&#46;&#x30;">&#119;&#x65;&#98;&#x70;&#97;&#99;&#x6b;&#45;&#109;&#112;&#118;&#117;&#101;&#x2d;&#x61;&#x73;&#x73;&#101;&#x74;&#45;&#112;&#108;&#117;&#103;&#105;&#110;&#64;&#x30;&#x2e;&#x31;&#46;&#x30;</a> 做依赖资源引用</li><li>之前写在 main.js 中的 config 信息，需要在 main.js 同级目录下新建 main.json 文件，使用 webapck-copy-plugin copy 到 build 目录下</li><li>app.json 中引用的图片不会自动 copy 到 dist 目录下 json 配置文件是由 webapck-copy-plugin copy 过去的，不会处理依赖，可以将图片放到根目录下 static 目录下，使用 webapck-copy-plugin copy 过去</li></ul><p>build&#x2F;webpack.base.conf.js</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">arcade复制代码+<span class="keyword">var</span> CopyWebpackPlugin = require(<span class="string">&#x27;copy-webpack-plugin&#x27;</span>)</span><br><span class="line">+<span class="keyword">var</span> relative = require(<span class="string">&#x27;relative&#x27;</span>)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">resolve</span> (<span class="params">dir</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> path.join(__dirname, <span class="string">&#x27;..&#x27;</span>, dir)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">-<span class="keyword">function</span> <span class="title function_">getEntry</span> (<span class="params">rootSrc, pattern</span>) &#123;</span><br><span class="line">-  <span class="keyword">var</span> files = glob.sync(path.resolve(rootSrc, pattern))</span><br><span class="line">-  <span class="keyword">return</span> files.<span class="built_in">reduce</span>(<span class="function">(<span class="params">res, file</span>) =&gt;</span> &#123;</span><br><span class="line">-    <span class="keyword">var</span> info = path.parse(file)</span><br><span class="line">-    <span class="keyword">var</span> key = info.dir.<span class="built_in">slice</span>(rootSrc.<span class="built_in">length</span> + <span class="number">1</span>) + <span class="string">&#x27;/&#x27;</span> + info.name</span><br><span class="line">-    res[key] = path.resolve(file)</span><br><span class="line">-    <span class="keyword">return</span> res</span><br><span class="line">-  &#125;, &#123;&#125;)</span><br><span class="line">+<span class="keyword">function</span> <span class="title function_">getEntry</span> (<span class="params">rootSrc</span>) &#123;</span><br><span class="line">+  <span class="keyword">var</span> <span class="built_in">map</span> = &#123;&#125;;</span><br><span class="line">+  glob.sync(rootSrc + <span class="string">&#x27;/pages/**/main.js&#x27;</span>)</span><br><span class="line">+  .forEach(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">+    <span class="keyword">var</span> key = relative(rootSrc, file).<span class="built_in">replace</span>(<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">+    <span class="built_in">map</span>[key] = file;</span><br><span class="line">+  &#125;)</span><br><span class="line">+   <span class="keyword">return</span> <span class="built_in">map</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">   plugins: [</span><br><span class="line">-    <span class="keyword">new</span> MpvuePlugin()</span><br><span class="line">+    <span class="keyword">new</span> MpvuePlugin(),</span><br><span class="line">+    <span class="keyword">new</span> CopyWebpackPlugin([&#123;</span><br><span class="line">+      from: <span class="string">&#x27;**/*.json&#x27;</span>,</span><br><span class="line">+      to: <span class="string">&#x27;app.json&#x27;</span></span><br><span class="line">+    &#125;], &#123;</span><br><span class="line">+      context: <span class="string">&#x27;src/&#x27;</span></span><br><span class="line">+    &#125;),</span><br><span class="line">+    <span class="keyword">new</span> CopyWebpackPlugin([ <span class="comment">// 处理 main.json 里面引用的图片，不要放代码中引用的图片</span></span><br><span class="line">+      &#123;</span><br><span class="line">+        from: path.resolve(__dirname, <span class="string">&#x27;../static&#x27;</span>),</span><br><span class="line">+        to: path.resolve(__dirname, <span class="string">&#x27;../dist/static&#x27;</span>),</span><br><span class="line">+        ignore: [<span class="string">&#x27;.*&#x27;</span>]</span><br><span class="line">+      &#125;</span><br><span class="line">+    ])</span><br><span class="line">   ]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>build&#x2F;webpack.dev.conf.js</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">php复制代码module.exports = <span class="title function_ invoke__">merge</span>(baseWebpackConfig, &#123;</span><br><span class="line">   <span class="attr">devtool</span>: <span class="string">&#x27;#source-map&#x27;</span>,</span><br><span class="line">   <span class="attr">output</span>: &#123;</span><br><span class="line">     <span class="attr">path</span>: config.build.assetsRoot,</span><br><span class="line">-    <span class="attr">filename</span>: utils.<span class="title function_ invoke__">assetsPath</span>(<span class="string">&#x27;js/[name].js&#x27;</span>),</span><br><span class="line">-    <span class="attr">chunkFilename</span>: utils.<span class="title function_ invoke__">assetsPath</span>(<span class="string">&#x27;js/[id].js&#x27;</span>)</span><br><span class="line">+    <span class="attr">filename</span>: utils.<span class="title function_ invoke__">assetsPath</span>(<span class="string">&#x27;[name].js&#x27;</span>),</span><br><span class="line">+    <span class="attr">chunkFilename</span>: utils.<span class="title function_ invoke__">assetsPath</span>(<span class="string">&#x27;[id].js&#x27;</span>)</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">plugins</span>: [</span><br><span class="line">     <span class="keyword">new</span> webpack.<span class="title function_ invoke__">DefinePlugin</span>(&#123;</span><br><span class="line">    module.exports = <span class="title function_ invoke__">merge</span>(baseWebpackConfig, &#123;</span><br><span class="line">     // copy <span class="keyword">from</span> ./webpack.prod.conf.js</span><br><span class="line">     // extract css into its own file</span><br><span class="line">     <span class="keyword">new</span> <span class="title class_">ExtractTextPlugin</span>(&#123;</span><br><span class="line">-      <span class="attr">filename</span>: utils.<span class="title function_ invoke__">assetsPath</span>(<span class="string">&#x27;css/[name].wxss&#x27;</span>)</span><br><span class="line">+      <span class="attr">filename</span>: utils.<span class="title function_ invoke__">assetsPath</span>(<span class="string">&#x27;[name].wxss&#x27;</span>)</span><br><span class="line">     &#125;),</span><br><span class="line">    module.exports = <span class="title function_ invoke__">merge</span>(baseWebpackConfig, &#123;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;),</span><br><span class="line">     <span class="keyword">new</span> webpack.optimize.<span class="title function_ invoke__">CommonsChunkPlugin</span>(&#123;</span><br><span class="line">-      <span class="attr">name</span>: <span class="string">&#x27;vendor&#x27;</span>,</span><br><span class="line">+      <span class="attr">name</span>: <span class="string">&#x27;common/vendor&#x27;</span>,</span><br><span class="line">       <span class="attr">minChunks</span>: function (module, count) &#123;</span><br><span class="line">         // any required modules inside node_modules are extracted to vendor</span><br><span class="line">         <span class="keyword">return</span> (</span><br><span class="line">        module.exports = <span class="title function_ invoke__">merge</span>(baseWebpackConfig, &#123;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;),</span><br><span class="line">     <span class="keyword">new</span> webpack.optimize.<span class="title function_ invoke__">CommonsChunkPlugin</span>(&#123;</span><br><span class="line">-      <span class="attr">name</span>: <span class="string">&#x27;manifest&#x27;</span>,</span><br><span class="line">-      <span class="attr">chunks</span>: [<span class="string">&#x27;vendor&#x27;</span>]</span><br><span class="line">+      <span class="attr">name</span>: <span class="string">&#x27;common/manifest&#x27;</span>,</span><br><span class="line">+      <span class="attr">chunks</span>: [<span class="string">&#x27;common/vendor&#x27;</span>]</span><br><span class="line">     &#125;),</span><br><span class="line">-    // copy custom <span class="built_in">static</span> assets</span><br><span class="line">-    <span class="keyword">new</span> <span class="title class_">CopyWebpackPlugin</span>([</span><br><span class="line">-      &#123;</span><br><span class="line">-        <span class="attr">from</span>: path.<span class="title function_ invoke__">resolve</span>(__dirname, <span class="string">&#x27;../static&#x27;</span>),</span><br><span class="line">-        <span class="attr">to</span>: config.build.assetsSubDirectory,</span><br><span class="line">-        <span class="attr">ignore</span>: [<span class="string">&#x27;.*&#x27;</span>]</span><br><span class="line">-      &#125;</span><br><span class="line">-    ]),</span><br></pre></td></tr></table></figure><p>build&#x2F;webpack.prod.conf.js</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">php复制代码</span><br><span class="line">    <span class="keyword">var</span> webpackConfig = <span class="title function_ invoke__">merge</span>(baseWebpackConfig, &#123;</span><br><span class="line">   <span class="attr">devtool</span>: config.build.productionSourceMap ? <span class="string">&#x27;#source-map&#x27;</span> : <span class="literal">false</span>,</span><br><span class="line">   <span class="attr">output</span>: &#123;</span><br><span class="line">     <span class="attr">path</span>: config.build.assetsRoot,</span><br><span class="line">-    <span class="attr">filename</span>: utils.<span class="title function_ invoke__">assetsPath</span>(<span class="string">&#x27;js/[name].js&#x27;</span>),</span><br><span class="line">-    <span class="attr">chunkFilename</span>: utils.<span class="title function_ invoke__">assetsPath</span>(<span class="string">&#x27;js/[id].js&#x27;</span>)</span><br><span class="line">+    <span class="attr">filename</span>: utils.<span class="title function_ invoke__">assetsPath</span>(<span class="string">&#x27;[name].js&#x27;</span>),</span><br><span class="line">+    <span class="attr">chunkFilename</span>: utils.<span class="title function_ invoke__">assetsPath</span>(<span class="string">&#x27;[id].js&#x27;</span>)</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">var</span> webpackConfig = <span class="title function_ invoke__">merge</span>(baseWebpackConfig, &#123;</span><br><span class="line">     &#125;),</span><br><span class="line">     // extract css into its own file</span><br><span class="line">     <span class="keyword">new</span> <span class="title class_">ExtractTextPlugin</span>(&#123;</span><br><span class="line">-      // <span class="attr">filename</span>: utils.<span class="title function_ invoke__">assetsPath</span>(<span class="string">&#x27;css/[name].[contenthash].css&#x27;</span>)</span><br><span class="line">-      <span class="attr">filename</span>: utils.<span class="title function_ invoke__">assetsPath</span>(<span class="string">&#x27;css/[name].wxss&#x27;</span>)</span><br><span class="line">+      // <span class="attr">filename</span>: utils.<span class="title function_ invoke__">assetsPath</span>(<span class="string">&#x27;[name].[contenthash].css&#x27;</span>)</span><br><span class="line">+      <span class="attr">filename</span>: utils.<span class="title function_ invoke__">assetsPath</span>(<span class="string">&#x27;[name].wxss&#x27;</span>)</span><br><span class="line">     &#125;),</span><br><span class="line">     <span class="comment">// Compress extracted CSS. We are using this plugin so that possible</span></span><br><span class="line">     <span class="comment">// duplicated CSS from different components can be deduped.</span></span><br><span class="line">    <span class="keyword">var</span> webpackConfig = <span class="title function_ invoke__">merge</span>(baseWebpackConfig, &#123;</span><br><span class="line">     <span class="keyword">new</span> webpack.<span class="title function_ invoke__">HashedModuleIdsPlugin</span>(),</span><br><span class="line">     // split vendor js into its own file</span><br><span class="line">     <span class="keyword">new</span> webpack.optimize.<span class="title function_ invoke__">CommonsChunkPlugin</span>(&#123;</span><br><span class="line">-      <span class="attr">name</span>: <span class="string">&#x27;vendor&#x27;</span>,</span><br><span class="line">+      <span class="attr">name</span>: <span class="string">&#x27;common/vendor&#x27;</span>,</span><br><span class="line">       <span class="attr">minChunks</span>: function (module, count) &#123;</span><br><span class="line">         // any required modules inside node_modules are extracted to vendor</span><br><span class="line">         <span class="keyword">return</span> (</span><br><span class="line">     <span class="keyword">var</span> webpackConfig = <span class="title function_ invoke__">merge</span>(baseWebpackConfig, &#123;</span><br><span class="line">     // extract webpack runtime <span class="keyword">and</span> module manifest to its own file in order to</span><br><span class="line">     // prevent vendor hash <span class="keyword">from</span> being updated whenever app bundle is updated</span><br><span class="line">     <span class="keyword">new</span> webpack.optimize.<span class="title function_ invoke__">CommonsChunkPlugin</span>(&#123;</span><br><span class="line">-      <span class="attr">name</span>: <span class="string">&#x27;manifest&#x27;</span>,</span><br><span class="line">-      <span class="attr">chunks</span>: [<span class="string">&#x27;vendor&#x27;</span>]</span><br><span class="line">-    &#125;),</span><br><span class="line">+      <span class="attr">name</span>: <span class="string">&#x27;common/manifest&#x27;</span>,</span><br><span class="line">+      <span class="attr">chunks</span>: [<span class="string">&#x27;common/vendor&#x27;</span>]</span><br><span class="line">+    &#125;)</span><br><span class="line">-    // copy custom <span class="built_in">static</span> assets</span><br><span class="line">-    <span class="keyword">new</span> <span class="title class_">CopyWebpackPlugin</span>([</span><br><span class="line">-      &#123;</span><br><span class="line">-        <span class="attr">from</span>: path.<span class="title function_ invoke__">resolve</span>(__dirname, <span class="string">&#x27;../static&#x27;</span>),</span><br><span class="line">-        <span class="attr">to</span>: config.build.assetsSubDirectory,</span><br><span class="line">-        <span class="attr">ignore</span>: [<span class="string">&#x27;.*&#x27;</span>]</span><br><span class="line">-      &#125;</span><br><span class="line">-    ])</span><br><span class="line">   ]</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>config&#x2F;index.js</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">coffeescript复制代码</span><br><span class="line">module.<span class="built_in">exports</span> = &#123;</span><br><span class="line">     env: <span class="built_in">require</span>(<span class="string">&#x27;./prod.env&#x27;</span>),</span><br><span class="line">     index: path.resolve(__dirname, <span class="string">&#x27;../dist/index.html&#x27;</span>),</span><br><span class="line">     assetsRoot: path.resolve(__dirname, <span class="string">&#x27;../dist&#x27;</span>),</span><br><span class="line">-    assetsSubDirectory: <span class="string">&#x27;static&#x27;</span>, <span class="regexp">//</span> 不将资源聚合放在 static 目录下</span><br><span class="line">+    assetsSubDirectory: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">     assetsPublicPath: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">     productionSourceMap: <span class="literal">false</span>,</span><br><span class="line">     <span class="regexp">//</span> Gzip <span class="literal">off</span> <span class="keyword">by</span> <span class="keyword">default</span> <span class="keyword">as</span> many popular static hosts such <span class="keyword">as</span></span><br><span class="line">@@ <span class="number">-26</span>,<span class="number">7</span> +<span class="number">26</span>,<span class="number">7</span> @@ module.<span class="built_in">exports</span> = &#123;</span><br><span class="line">     port: <span class="number">8080</span>,</span><br><span class="line">     <span class="regexp">//</span> 在小程序开发者工具中不需要自动打开浏览器</span><br><span class="line">     autoOpenBrowser: <span class="literal">false</span>,</span><br><span class="line">-    assetsSubDirectory: <span class="string">&#x27;static&#x27;</span>, <span class="regexp">//</span> 不将资源聚合放在 static 目录下</span><br><span class="line">+    assetsSubDirectory: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">     assetsPublicPath: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">     proxyTable: &#123;&#125;,</span><br><span class="line">     <span class="regexp">//</span> CSS Sourcemaps <span class="literal">off</span> <span class="keyword">by</span> <span class="keyword">default</span> because relative paths are <span class="string">&quot;buggy&quot;</span></span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>以上内容部分来自：</p><ul><li><a href="https://link.juejin.cn/?target=https://zhuanlan.zhihu.com/p/22754296">微信小程序架构分析 (上)</a></li><li><a href="https://link.juejin.cn/?target=https://zhuanlan.zhihu.com/p/25105936">微信小程序架构解析</a></li><li><a href="https://link.juejin.cn/?target=http://daxue.qq.com/content/online/id/4107">2018微信公开课第七季上海站·小程序专场</a></li><li><a href="https://juejin.cn/post/6844903548866543623">小程序中使用iconfont</a></li><li><a href="https://link.juejin.cn/?target=http://www.infoq.com/cn/news/2018/07/wchat-miniprog-support">微信小程序的下一步：支持NPM、小程序云、可视化编程、支持分包</a></li><li><a href="https://link.juejin.cn/?target=http://mpvue.com/build/mpvue-loader/">mpvue-docs</a></li><li><a href="https://juejin.cn/post/6844903607301570568">使用Mpvue开发微信小程序的最佳实践</a></li><li><a href="https://link.juejin.cn/?target=https://tech.meituan.com/mt_mpvue_development_framework.html">用Vue.js开发微信小程序：开源框架mpvue解析</a></li><li><a href="https://link.juejin.cn/?target=https://github.com/answershuto/learnVue">learnVue</a></li></ul><p>作者：yck<br>链接：<a href="https://juejin.cn/post/6844903670589423623">https://juejin.cn/post/6844903670589423623</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo笔记</title>
      <link href="/post/e5a5d29d.html"/>
      <url>/post/e5a5d29d.html</url>
      
        <content type="html"><![CDATA[<p>本文介绍如何在 Hexo 博客中添加一篇文章，以及文章的配置。</p><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><p>执行下面的命令创建一篇文章：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>您可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p><p>例如，以下命令用于创建一篇文件名为 “lesson-1” 的文章：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new lesson-1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上命令将在站点根目录的 <code>source\_posts</code> 目录下创建一个 <code>lesson-1.md</code> 的文件。</p><h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2022/5/16 20:46:25</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><p>参数</p><p>描述</p><p>默认值</p><p><code>layout</code></p><p>布局</p><p><code>config.default_layout</code></p><p><code>title</code></p><p>标题</p><p>文章的文件名</p><p><code>date</code></p><p>建立日期</p><p>文件建立日期</p><p><code>updated</code></p><p>更新日期</p><p>文件更新日期</p><p><code>comments</code></p><p>开启文章的评论功能</p><p>true</p><p><code>tags</code></p><p>标签（不适用于分页）</p><p><code>categories</code></p><p>分类（不适用于分页）</p><p><code>permalink</code></p><p>覆盖文章网址</p><p><code>excerpt</code></p><p>文章的摘要</p><p><strong>分类和标签</strong></p><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，而标签没有顺序和层次。</p><p>分类和标签的添加如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">- 分类1</span><br><span class="line">tags:</span><br><span class="line">- 标签1</span><br><span class="line">- 标签2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Hexo 不支持指定多个同级分类。下面的指定方法会使分类 <code>分类2</code> 成为 <code>分类1</code> 的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">- 分类1</span><br><span class="line">- 分类2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">- [分类1, 分类1-1]</span><br><span class="line">- [分类1, 分类1-2]</span><br><span class="line">- [分类2]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时这篇文章同时包括二个分类： <code>分类1-1</code> 和 <code>分类1-2</code> 分别都是父分类 <code>分类1</code> 的子分类，同时 <code>分类2</code> 是一个没有子分类的分类。</p><p>注：默认情况下，新创建的文章是没有 categories 和 tags 的，我们可以在根目录下的 <code>scaffolds\post.md</code> 文件添加如下代码，这样每次新建文章，就自动有了这两个参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h3><p>如果没有设置摘要，首页将显示文章全部内容。摘要可以控制文章在首页显示的内容。</p><p>有两种设置摘要的方法。</p><p><strong>方法一：写摘要</strong></p><p>在文章的 <code>front-matter</code> 中添加 <code>excerpt</code>，其中 <code>excerpt</code> 中的内容就会被显示在首页上。如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2022/5/16 20:46:25</span><br><span class="line">excerpt: 这是摘要...</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>方法二：文章截断</strong></p><p>在文章中需要截断的地方加入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首页就会显示这条指令以上的所有内容，隐藏接下来的所有内容。</p><p><strong>以上就是在 Hexo 博客中创建文章，以及对文章分类、标签和摘要的配置。</strong></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
